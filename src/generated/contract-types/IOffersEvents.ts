/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IOffersStructs {
  export type OfferStruct = {
    creator: string;
    duration: BigNumberish;
    expiration: BigNumberish;
    fixedTerms: boolean;
    floorTerm: boolean;
    lenderOffer: boolean;
    nftContractAddress: string;
    nftId: BigNumberish;
    asset: string;
    amount: BigNumberish;
    interestRatePerSecond: BigNumberish;
  };

  export type OfferStructOutput = [
    string,
    number,
    number,
    boolean,
    boolean,
    boolean,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    creator: string;
    duration: number;
    expiration: number;
    fixedTerms: boolean;
    floorTerm: boolean;
    lenderOffer: boolean;
    nftContractAddress: string;
    nftId: BigNumber;
    asset: string;
    amount: BigNumber;
    interestRatePerSecond: BigNumber;
  };
}

export interface IOffersEventsInterface extends utils.Interface {
  contractName: "IOffersEvents";
  functions: {};

  events: {
    "NewOffer(address,address,uint256,tuple,bytes32)": EventFragment;
    "OfferRemoved(address,address,uint256,tuple,bytes32)": EventFragment;
    "OfferSignatureUsed(address,uint256,tuple,bytes)": EventFragment;
    "OffersXLendingContractAddressUpdated(address,address)": EventFragment;
    "OffersXSigLendingContractAddressUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferSignatureUsed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OffersXLendingContractAddressUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OffersXSigLendingContractAddressUpdated"
  ): EventFragment;
}

export type NewOfferEvent = TypedEvent<
  [string, string, BigNumber, IOffersStructs.OfferStructOutput, string],
  {
    creator: string;
    nftContractAddress: string;
    nftId: BigNumber;
    offer: IOffersStructs.OfferStructOutput;
    offerHash: string;
  }
>;

export type NewOfferEventFilter = TypedEventFilter<NewOfferEvent>;

export type OfferRemovedEvent = TypedEvent<
  [string, string, BigNumber, IOffersStructs.OfferStructOutput, string],
  {
    creator: string;
    nftContractAddress: string;
    nftId: BigNumber;
    offer: IOffersStructs.OfferStructOutput;
    offerHash: string;
  }
>;

export type OfferRemovedEventFilter = TypedEventFilter<OfferRemovedEvent>;

export type OfferSignatureUsedEvent = TypedEvent<
  [string, BigNumber, IOffersStructs.OfferStructOutput, string],
  {
    nftContractAddress: string;
    nftId: BigNumber;
    offer: IOffersStructs.OfferStructOutput;
    signature: string;
  }
>;

export type OfferSignatureUsedEventFilter =
  TypedEventFilter<OfferSignatureUsedEvent>;

export type OffersXLendingContractAddressUpdatedEvent = TypedEvent<
  [string, string],
  { oldLendingContractAddress: string; newLendingContractAddress: string }
>;

export type OffersXLendingContractAddressUpdatedEventFilter =
  TypedEventFilter<OffersXLendingContractAddressUpdatedEvent>;

export type OffersXSigLendingContractAddressUpdatedEvent = TypedEvent<
  [string, string],
  { oldSigLendingContractAddress: string; newSigLendingContractAddress: string }
>;

export type OffersXSigLendingContractAddressUpdatedEventFilter =
  TypedEventFilter<OffersXSigLendingContractAddressUpdatedEvent>;

export interface IOffersEvents extends BaseContract {
  contractName: "IOffersEvents";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOffersEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "NewOffer(address,address,uint256,tuple,bytes32)"(
      creator?: string | null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      offerHash?: null
    ): NewOfferEventFilter;
    NewOffer(
      creator?: string | null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      offerHash?: null
    ): NewOfferEventFilter;

    "OfferRemoved(address,address,uint256,tuple,bytes32)"(
      creator?: string | null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      offerHash?: null
    ): OfferRemovedEventFilter;
    OfferRemoved(
      creator?: string | null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      offerHash?: null
    ): OfferRemovedEventFilter;

    "OfferSignatureUsed(address,uint256,tuple,bytes)"(
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      signature?: null
    ): OfferSignatureUsedEventFilter;
    OfferSignatureUsed(
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      signature?: null
    ): OfferSignatureUsedEventFilter;

    "OffersXLendingContractAddressUpdated(address,address)"(
      oldLendingContractAddress?: null,
      newLendingContractAddress?: null
    ): OffersXLendingContractAddressUpdatedEventFilter;
    OffersXLendingContractAddressUpdated(
      oldLendingContractAddress?: null,
      newLendingContractAddress?: null
    ): OffersXLendingContractAddressUpdatedEventFilter;

    "OffersXSigLendingContractAddressUpdated(address,address)"(
      oldSigLendingContractAddress?: null,
      newSigLendingContractAddress?: null
    ): OffersXSigLendingContractAddressUpdatedEventFilter;
    OffersXSigLendingContractAddressUpdated(
      oldSigLendingContractAddress?: null,
      newSigLendingContractAddress?: null
    ): OffersXSigLendingContractAddressUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
