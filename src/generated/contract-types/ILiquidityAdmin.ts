/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ILiquidityAdminInterface extends utils.Interface {
  contractName: "ILiquidityAdmin";
  functions: {
    "pause()": FunctionFragment;
    "pauseSanctions()": FunctionFragment;
    "setCAssetAddress(address,address)": FunctionFragment;
    "setMaxCAssetBalance(address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unpauseSanctions()": FunctionFragment;
    "updateLendingContractAddress(address)": FunctionFragment;
    "updateRegenCollectiveAddress(address)": FunctionFragment;
    "updateRegenCollectiveBpsOfRevenue(uint16)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseSanctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCAssetAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCAssetBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpauseSanctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLendingContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegenCollectiveAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegenCollectiveBpsOfRevenue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseSanctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCAssetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseSanctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLendingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegenCollectiveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegenCollectiveBpsOfRevenue",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILiquidityAdmin extends BaseContract {
  contractName: "ILiquidityAdmin";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidityAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxCAssetBalance(
      cAsset: string,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLendingContractAddress(
      newLendingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegenCollectiveAddress(
      newRegenCollectiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegenCollectiveBpsOfRevenue(
      newRegenCollectiveBpsOfRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseSanctions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCAssetAddress(
    asset: string,
    cAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxCAssetBalance(
    cAsset: string,
    maxBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseSanctions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLendingContractAddress(
    newLendingContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegenCollectiveAddress(
    newRegenCollectiveAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegenCollectiveBpsOfRevenue(
    newRegenCollectiveBpsOfRevenue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    pause(overrides?: CallOverrides): Promise<void>;

    pauseSanctions(overrides?: CallOverrides): Promise<void>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCAssetBalance(
      cAsset: string,
      maxBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unpauseSanctions(overrides?: CallOverrides): Promise<void>;

    updateLendingContractAddress(
      newLendingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegenCollectiveAddress(
      newRegenCollectiveAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegenCollectiveBpsOfRevenue(
      newRegenCollectiveBpsOfRevenue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxCAssetBalance(
      cAsset: string,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLendingContractAddress(
      newLendingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegenCollectiveAddress(
      newRegenCollectiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegenCollectiveBpsOfRevenue(
      newRegenCollectiveBpsOfRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCAssetBalance(
      cAsset: string,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLendingContractAddress(
      newLendingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegenCollectiveAddress(
      newRegenCollectiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegenCollectiveBpsOfRevenue(
      newRegenCollectiveBpsOfRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
