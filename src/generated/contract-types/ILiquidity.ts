/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ILiquidityInterface extends utils.Interface {
  contractName: "ILiquidity";
  functions: {
    "addToCAssetBalance(address,address,uint256)": FunctionFragment;
    "assetAmountToCAssetAmount(address,uint256)": FunctionFragment;
    "assetToCAsset(address)": FunctionFragment;
    "burnCErc20(address,uint256)": FunctionFragment;
    "cAssetAmountToAssetAmount(address,uint256)": FunctionFragment;
    "compContractAddress()": FunctionFragment;
    "getCAsset(address)": FunctionFragment;
    "getCAssetBalance(address,address)": FunctionFragment;
    "lendingContractAddress()": FunctionFragment;
    "maxBalanceByCAsset(address)": FunctionFragment;
    "mintCErc20(address,address,uint256)": FunctionFragment;
    "mintCEth()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseSanctions()": FunctionFragment;
    "regenCollectiveAddress()": FunctionFragment;
    "regenCollectiveBpsOfRevenue()": FunctionFragment;
    "sendValue(address,uint256,address)": FunctionFragment;
    "setCAssetAddress(address,address)": FunctionFragment;
    "setMaxCAssetBalance(address,uint256)": FunctionFragment;
    "supplyCErc20(address,uint256)": FunctionFragment;
    "supplyErc20(address,uint256)": FunctionFragment;
    "supplyEth()": FunctionFragment;
    "unpause()": FunctionFragment;
    "unpauseSanctions()": FunctionFragment;
    "updateLendingContractAddress(address)": FunctionFragment;
    "updateRegenCollectiveAddress(address)": FunctionFragment;
    "updateRegenCollectiveBpsOfRevenue(uint16)": FunctionFragment;
    "withdrawCBalance(address,address,uint256)": FunctionFragment;
    "withdrawCErc20(address,uint256)": FunctionFragment;
    "withdrawComp()": FunctionFragment;
    "withdrawErc20(address,uint256)": FunctionFragment;
    "withdrawEth(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToCAssetBalance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetAmountToCAssetAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetToCAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnCErc20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cAssetAmountToAssetAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCAssetBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBalanceByCAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCErc20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintCEth", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseSanctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "regenCollectiveAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "regenCollectiveBpsOfRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendValue",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCAssetAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCAssetBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCErc20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyErc20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "supplyEth", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpauseSanctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLendingContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegenCollectiveAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegenCollectiveBpsOfRevenue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCBalance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCErc20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawComp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToCAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetAmountToCAssetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetToCAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnCErc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cAssetAmountToAssetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBalanceByCAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintCErc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintCEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseSanctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regenCollectiveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regenCollectiveBpsOfRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCAssetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyCErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplyEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseSanctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLendingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegenCollectiveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegenCollectiveBpsOfRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;

  events: {
    "AssetToCAssetSet(address,address)": EventFragment;
    "CErc20Supplied(address,address,uint256)": EventFragment;
    "CErc20Withdrawn(address,address,uint256)": EventFragment;
    "Erc20Supplied(address,address,uint256,uint256)": EventFragment;
    "Erc20Withdrawn(address,address,uint256,uint256)": EventFragment;
    "EthSupplied(address,uint256,uint256)": EventFragment;
    "EthWithdrawn(address,uint256,uint256)": EventFragment;
    "LiquiditySanctionsPaused()": EventFragment;
    "LiquiditySanctionsUnpaused()": EventFragment;
    "LiquidityXLendingContractAddressUpdated(address,address)": EventFragment;
    "PercentForRegen(address,address,uint256,uint256)": EventFragment;
    "RegenCollectiveAddressUpdated(address)": EventFragment;
    "RegenCollectiveBpsOfRevenueUpdated(uint16,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetToCAssetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CErc20Supplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CErc20Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Erc20Supplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Erc20Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthSupplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquiditySanctionsPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquiditySanctionsUnpaused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityXLendingContractAddressUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PercentForRegen"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RegenCollectiveAddressUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RegenCollectiveBpsOfRevenueUpdated"
  ): EventFragment;
}

export type AssetToCAssetSetEvent = TypedEvent<
  [string, string],
  { asset: string; cAsset: string }
>;

export type AssetToCAssetSetEventFilter =
  TypedEventFilter<AssetToCAssetSetEvent>;

export type CErc20SuppliedEvent = TypedEvent<
  [string, string, BigNumber],
  { liquidityProvider: string; cAsset: string; cTokenAmount: BigNumber }
>;

export type CErc20SuppliedEventFilter = TypedEventFilter<CErc20SuppliedEvent>;

export type CErc20WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { liquidityProvider: string; cAsset: string; cTokenAmount: BigNumber }
>;

export type CErc20WithdrawnEventFilter = TypedEventFilter<CErc20WithdrawnEvent>;

export type Erc20SuppliedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    liquidityProvider: string;
    asset: string;
    tokenAmount: BigNumber;
    cTokenAmount: BigNumber;
  }
>;

export type Erc20SuppliedEventFilter = TypedEventFilter<Erc20SuppliedEvent>;

export type Erc20WithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    liquidityProvider: string;
    asset: string;
    tokenAmount: BigNumber;
    cTokenAmount: BigNumber;
  }
>;

export type Erc20WithdrawnEventFilter = TypedEventFilter<Erc20WithdrawnEvent>;

export type EthSuppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { liquidityProvider: string; amount: BigNumber; cTokenAmount: BigNumber }
>;

export type EthSuppliedEventFilter = TypedEventFilter<EthSuppliedEvent>;

export type EthWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { liquidityProvider: string; amount: BigNumber; cTokenAmount: BigNumber }
>;

export type EthWithdrawnEventFilter = TypedEventFilter<EthWithdrawnEvent>;

export type LiquiditySanctionsPausedEvent = TypedEvent<[], {}>;

export type LiquiditySanctionsPausedEventFilter =
  TypedEventFilter<LiquiditySanctionsPausedEvent>;

export type LiquiditySanctionsUnpausedEvent = TypedEvent<[], {}>;

export type LiquiditySanctionsUnpausedEventFilter =
  TypedEventFilter<LiquiditySanctionsUnpausedEvent>;

export type LiquidityXLendingContractAddressUpdatedEvent = TypedEvent<
  [string, string],
  { oldLendingContractAddress: string; newLendingContractAddress: string }
>;

export type LiquidityXLendingContractAddressUpdatedEventFilter =
  TypedEventFilter<LiquidityXLendingContractAddressUpdatedEvent>;

export type PercentForRegenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    liquidityProvider: string;
    asset: string;
    tokenAmount: BigNumber;
    cTokenAmount: BigNumber;
  }
>;

export type PercentForRegenEventFilter = TypedEventFilter<PercentForRegenEvent>;

export type RegenCollectiveAddressUpdatedEvent = TypedEvent<
  [string],
  { newRegenCollectiveAddress: string }
>;

export type RegenCollectiveAddressUpdatedEventFilter =
  TypedEventFilter<RegenCollectiveAddressUpdatedEvent>;

export type RegenCollectiveBpsOfRevenueUpdatedEvent = TypedEvent<
  [number, number],
  {
    oldRegenCollectiveBpsOfRevenue: number;
    newRegenCollectiveBpsOfRevenue: number;
  }
>;

export type RegenCollectiveBpsOfRevenueUpdatedEventFilter =
  TypedEventFilter<RegenCollectiveBpsOfRevenueUpdatedEvent>;

export interface ILiquidity extends BaseContract {
  contractName: "ILiquidity";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToCAssetBalance(
      account: string,
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetAmountToCAssetAmount(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetToCAsset(asset: string, overrides?: CallOverrides): Promise<[string]>;

    burnCErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cAssetAmountToAssetAmount(
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compContractAddress(overrides?: CallOverrides): Promise<[string]>;

    getCAsset(asset: string, overrides?: CallOverrides): Promise<[string]>;

    getCAssetBalance(
      account: string,
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lendingContractAddress(overrides?: CallOverrides): Promise<[string]>;

    maxBalanceByCAsset(
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintCErc20(
      from: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintCEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    regenCollectiveAddress(overrides?: CallOverrides): Promise<[string]>;

    regenCollectiveBpsOfRevenue(overrides?: CallOverrides): Promise<[number]>;

    sendValue(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxCAssetBalance(
      cAsset: string,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyCErc20(
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLendingContractAddress(
      newLendingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegenCollectiveAddress(
      newRegenCollectiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegenCollectiveBpsOfRevenue(
      newRegenCollectiveBpsOfRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCBalance(
      account: string,
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCErc20(
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawComp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEth(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToCAssetBalance(
    account: string,
    cAsset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetAmountToCAssetAmount(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetToCAsset(asset: string, overrides?: CallOverrides): Promise<string>;

  burnCErc20(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cAssetAmountToAssetAmount(
    cAsset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compContractAddress(overrides?: CallOverrides): Promise<string>;

  getCAsset(asset: string, overrides?: CallOverrides): Promise<string>;

  getCAssetBalance(
    account: string,
    cAsset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lendingContractAddress(overrides?: CallOverrides): Promise<string>;

  maxBalanceByCAsset(
    cAsset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintCErc20(
    from: string,
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintCEth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseSanctions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  regenCollectiveAddress(overrides?: CallOverrides): Promise<string>;

  regenCollectiveBpsOfRevenue(overrides?: CallOverrides): Promise<number>;

  sendValue(
    asset: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCAssetAddress(
    asset: string,
    cAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxCAssetBalance(
    cAsset: string,
    maxBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyCErc20(
    cAsset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyErc20(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyEth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseSanctions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLendingContractAddress(
    newLendingContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegenCollectiveAddress(
    newRegenCollectiveAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegenCollectiveBpsOfRevenue(
    newRegenCollectiveBpsOfRevenue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCBalance(
    account: string,
    cAsset: string,
    cTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCErc20(
    cAsset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawComp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawErc20(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEth(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToCAssetBalance(
      account: string,
      cAsset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetAmountToCAssetAmount(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetToCAsset(asset: string, overrides?: CallOverrides): Promise<string>;

    burnCErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cAssetAmountToAssetAmount(
      cAsset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compContractAddress(overrides?: CallOverrides): Promise<string>;

    getCAsset(asset: string, overrides?: CallOverrides): Promise<string>;

    getCAssetBalance(
      account: string,
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingContractAddress(overrides?: CallOverrides): Promise<string>;

    maxBalanceByCAsset(
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCErc20(
      from: string,
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCEth(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseSanctions(overrides?: CallOverrides): Promise<void>;

    regenCollectiveAddress(overrides?: CallOverrides): Promise<string>;

    regenCollectiveBpsOfRevenue(overrides?: CallOverrides): Promise<number>;

    sendValue(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCAssetBalance(
      cAsset: string,
      maxBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyCErc20(
      cAsset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyEth(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unpauseSanctions(overrides?: CallOverrides): Promise<void>;

    updateLendingContractAddress(
      newLendingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegenCollectiveAddress(
      newRegenCollectiveAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegenCollectiveBpsOfRevenue(
      newRegenCollectiveBpsOfRevenue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCBalance(
      account: string,
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCErc20(
      cAsset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawComp(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawEth(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AssetToCAssetSet(address,address)"(
      asset?: null,
      cAsset?: null
    ): AssetToCAssetSetEventFilter;
    AssetToCAssetSet(asset?: null, cAsset?: null): AssetToCAssetSetEventFilter;

    "CErc20Supplied(address,address,uint256)"(
      liquidityProvider?: string | null,
      cAsset?: string | null,
      cTokenAmount?: null
    ): CErc20SuppliedEventFilter;
    CErc20Supplied(
      liquidityProvider?: string | null,
      cAsset?: string | null,
      cTokenAmount?: null
    ): CErc20SuppliedEventFilter;

    "CErc20Withdrawn(address,address,uint256)"(
      liquidityProvider?: string | null,
      cAsset?: string | null,
      cTokenAmount?: null
    ): CErc20WithdrawnEventFilter;
    CErc20Withdrawn(
      liquidityProvider?: string | null,
      cAsset?: string | null,
      cTokenAmount?: null
    ): CErc20WithdrawnEventFilter;

    "Erc20Supplied(address,address,uint256,uint256)"(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null
    ): Erc20SuppliedEventFilter;
    Erc20Supplied(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null
    ): Erc20SuppliedEventFilter;

    "Erc20Withdrawn(address,address,uint256,uint256)"(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null
    ): Erc20WithdrawnEventFilter;
    Erc20Withdrawn(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null
    ): Erc20WithdrawnEventFilter;

    "EthSupplied(address,uint256,uint256)"(
      liquidityProvider?: string | null,
      amount?: null,
      cTokenAmount?: null
    ): EthSuppliedEventFilter;
    EthSupplied(
      liquidityProvider?: string | null,
      amount?: null,
      cTokenAmount?: null
    ): EthSuppliedEventFilter;

    "EthWithdrawn(address,uint256,uint256)"(
      liquidityProvider?: string | null,
      amount?: null,
      cTokenAmount?: null
    ): EthWithdrawnEventFilter;
    EthWithdrawn(
      liquidityProvider?: string | null,
      amount?: null,
      cTokenAmount?: null
    ): EthWithdrawnEventFilter;

    "LiquiditySanctionsPaused()"(): LiquiditySanctionsPausedEventFilter;
    LiquiditySanctionsPaused(): LiquiditySanctionsPausedEventFilter;

    "LiquiditySanctionsUnpaused()"(): LiquiditySanctionsUnpausedEventFilter;
    LiquiditySanctionsUnpaused(): LiquiditySanctionsUnpausedEventFilter;

    "LiquidityXLendingContractAddressUpdated(address,address)"(
      oldLendingContractAddress?: null,
      newLendingContractAddress?: null
    ): LiquidityXLendingContractAddressUpdatedEventFilter;
    LiquidityXLendingContractAddressUpdated(
      oldLendingContractAddress?: null,
      newLendingContractAddress?: null
    ): LiquidityXLendingContractAddressUpdatedEventFilter;

    "PercentForRegen(address,address,uint256,uint256)"(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null
    ): PercentForRegenEventFilter;
    PercentForRegen(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null
    ): PercentForRegenEventFilter;

    "RegenCollectiveAddressUpdated(address)"(
      newRegenCollectiveAddress?: null
    ): RegenCollectiveAddressUpdatedEventFilter;
    RegenCollectiveAddressUpdated(
      newRegenCollectiveAddress?: null
    ): RegenCollectiveAddressUpdatedEventFilter;

    "RegenCollectiveBpsOfRevenueUpdated(uint16,uint16)"(
      oldRegenCollectiveBpsOfRevenue?: null,
      newRegenCollectiveBpsOfRevenue?: null
    ): RegenCollectiveBpsOfRevenueUpdatedEventFilter;
    RegenCollectiveBpsOfRevenueUpdated(
      oldRegenCollectiveBpsOfRevenue?: null,
      newRegenCollectiveBpsOfRevenue?: null
    ): RegenCollectiveBpsOfRevenueUpdatedEventFilter;
  };

  estimateGas: {
    addToCAssetBalance(
      account: string,
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetAmountToCAssetAmount(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetToCAsset(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnCErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cAssetAmountToAssetAmount(
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCAsset(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCAssetBalance(
      account: string,
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxBalanceByCAsset(
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCErc20(
      from: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintCEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    regenCollectiveAddress(overrides?: CallOverrides): Promise<BigNumber>;

    regenCollectiveBpsOfRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    sendValue(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxCAssetBalance(
      cAsset: string,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyCErc20(
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLendingContractAddress(
      newLendingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegenCollectiveAddress(
      newRegenCollectiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegenCollectiveBpsOfRevenue(
      newRegenCollectiveBpsOfRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCBalance(
      account: string,
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCErc20(
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawComp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEth(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToCAssetBalance(
      account: string,
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetAmountToCAssetAmount(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetToCAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnCErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cAssetAmountToAssetAmount(
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCAssetBalance(
      account: string,
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBalanceByCAsset(
      cAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintCErc20(
      from: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintCEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    regenCollectiveAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    regenCollectiveBpsOfRevenue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendValue(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCAssetBalance(
      cAsset: string,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyCErc20(
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseSanctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLendingContractAddress(
      newLendingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegenCollectiveAddress(
      newRegenCollectiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegenCollectiveBpsOfRevenue(
      newRegenCollectiveBpsOfRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCBalance(
      account: string,
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCErc20(
      cAsset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawComp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawErc20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEth(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
