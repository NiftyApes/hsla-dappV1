/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace ILendingStructs {
  export type OfferStruct = {
    creator: string;
    duration: BigNumberish;
    expiration: BigNumberish;
    fixedTerms: boolean;
    floorTerm: boolean;
    lenderOffer: boolean;
    nftContractAddress: string;
    nftId: BigNumberish;
    asset: string;
    amount: BigNumberish;
    interestRatePerSecond: BigNumberish;
  };

  export type OfferStructOutput = [
    string,
    number,
    number,
    boolean,
    boolean,
    boolean,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
  ] & {
    creator: string;
    duration: number;
    expiration: number;
    fixedTerms: boolean;
    floorTerm: boolean;
    lenderOffer: boolean;
    nftContractAddress: string;
    nftId: BigNumber;
    asset: string;
    amount: BigNumber;
    interestRatePerSecond: BigNumber;
  };

  export type LoanAuctionStruct = {
    nftOwner: string;
    loanEndTimestamp: BigNumberish;
    lastUpdatedTimestamp: BigNumberish;
    fixedTerms: boolean;
    lender: string;
    interestRatePerSecond: BigNumberish;
    asset: string;
    loanDrawFeeProtocolPerSecond: BigNumberish;
    accumulatedLenderInterest: BigNumberish;
    accumulatedProtocolInterest: BigNumberish;
    amount: BigNumberish;
    amountDrawn: BigNumberish;
  };

  export type LoanAuctionStructOutput = [
    string,
    number,
    number,
    boolean,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    nftOwner: string;
    loanEndTimestamp: number;
    lastUpdatedTimestamp: number;
    fixedTerms: boolean;
    lender: string;
    interestRatePerSecond: BigNumber;
    asset: string;
    loanDrawFeeProtocolPerSecond: BigNumber;
    accumulatedLenderInterest: BigNumber;
    accumulatedProtocolInterest: BigNumber;
    amount: BigNumber;
    amountDrawn: BigNumber;
  };
}

export interface NiftyApesInterface extends utils.Interface {
  contractName: 'NiftyApes';
  functions: {
    'assetToCAsset(address)': FunctionFragment;
    'calculateInterestAccrued(address,uint256)': FunctionFragment;
    'createOffer((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96))': FunctionFragment;
    'drawLoanAmount(address,uint256,uint256)': FunctionFragment;
    'executeLoanByBorrower(address,uint256,bytes32,bool)': FunctionFragment;
    'executeLoanByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256)': FunctionFragment;
    'executeLoanByLender(address,uint256,bytes32,bool)': FunctionFragment;
    'executeLoanByLenderSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes)': FunctionFragment;
    'getCAssetBalance(address,address)': FunctionFragment;
    'getLoanAuction(address,uint256)': FunctionFragment;
    'getOffer(address,uint256,bytes32,bool)': FunctionFragment;
    'getOfferHash((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96))': FunctionFragment;
    'getOfferSignatureStatus(bytes)': FunctionFragment;
    'getOfferSigner((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes)': FunctionFragment;
    'initialize()': FunctionFragment;
    'loanDrawFeeProtocolPerSecond()': FunctionFragment;
    'maxBalanceByCAsset(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(address,uint256)': FunctionFragment;
    'partialRepayLoan(address,uint256,uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'refinanceByBorrower(address,uint256,bool,bytes32)': FunctionFragment;
    'refinanceByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256)': FunctionFragment;
    'refinanceByLender((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96))': FunctionFragment;
    'refinancePremiumLenderBps()': FunctionFragment;
    'refinancePremiumProtocolBps()': FunctionFragment;
    'removeOffer(address,uint256,bytes32,bool)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repayLoan(address,uint256)': FunctionFragment;
    'repayLoanForAccount(address,uint256)': FunctionFragment;
    'seizeAsset(address,uint256)': FunctionFragment;
    'setCAssetAddress(address,address)': FunctionFragment;
    'setMaxCAssetBalance(address,uint256)': FunctionFragment;
    'supplyCErc20(address,uint256)': FunctionFragment;
    'supplyErc20(address,uint256)': FunctionFragment;
    'supplyEth()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateLoanDrawProtocolFeePerSecond(uint96)': FunctionFragment;
    'updateRefinancePremiumLenderBps(uint16)': FunctionFragment;
    'updateRefinancePremiumProtocolBps(uint16)': FunctionFragment;
    'withdrawCErc20(address,uint256)': FunctionFragment;
    'withdrawErc20(address,uint256)': FunctionFragment;
    'withdrawEth(uint256)': FunctionFragment;
    'withdrawOfferSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'assetToCAsset', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'calculateInterestAccrued',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'createOffer',
    values: [ILendingStructs.OfferStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'drawLoanAmount',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeLoanByBorrower',
    values: [string, BigNumberish, BytesLike, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeLoanByBorrowerSignature',
    values: [ILendingStructs.OfferStruct, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeLoanByLender',
    values: [string, BigNumberish, BytesLike, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeLoanByLenderSignature',
    values: [ILendingStructs.OfferStruct, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'getCAssetBalance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getLoanAuction', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getOffer',
    values: [string, BigNumberish, BytesLike, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOfferHash',
    values: [ILendingStructs.OfferStruct],
  ): string;
  encodeFunctionData(functionFragment: 'getOfferSignatureStatus', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'getOfferSigner',
    values: [ILendingStructs.OfferStruct, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'loanDrawFeeProtocolPerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxBalanceByCAsset', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'partialRepayLoan',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'refinanceByBorrower',
    values: [string, BigNumberish, boolean, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'refinanceByBorrowerSignature',
    values: [ILendingStructs.OfferStruct, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'refinanceByLender',
    values: [ILendingStructs.OfferStruct],
  ): string;
  encodeFunctionData(functionFragment: 'refinancePremiumLenderBps', values?: undefined): string;
  encodeFunctionData(functionFragment: 'refinancePremiumProtocolBps', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeOffer',
    values: [string, BigNumberish, BytesLike, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repayLoan', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'repayLoanForAccount',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'seizeAsset', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setCAssetAddress', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'setMaxCAssetBalance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'supplyCErc20', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'supplyErc20', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'supplyEth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateLoanDrawProtocolFeePerSecond',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRefinancePremiumLenderBps',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRefinancePremiumProtocolBps',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawCErc20', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawErc20', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawEth', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'withdrawOfferSignature',
    values: [ILendingStructs.OfferStruct, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'assetToCAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateInterestAccrued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createOffer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'drawLoanAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeLoanByBorrower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeLoanByBorrowerSignature', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeLoanByLender', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeLoanByLenderSignature', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCAssetBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanAuction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOffer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOfferHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOfferSignatureStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOfferSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loanDrawFeeProtocolPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxBalanceByCAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'partialRepayLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refinanceByBorrower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refinanceByBorrowerSignature', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refinanceByLender', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refinancePremiumLenderBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refinancePremiumProtocolBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeOffer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayLoanForAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCAssetAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxCAssetBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyCErc20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyErc20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateLoanDrawProtocolFeePerSecond',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRefinancePremiumLenderBps',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRefinancePremiumProtocolBps',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdrawCErc20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawErc20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawOfferSignature', data: BytesLike): Result;

  events: {
    'AmountDrawn(address,address,uint256,uint256,uint256)': EventFragment;
    'AssetSeized(address,address,address,uint256)': EventFragment;
    'CErc20Supplied(address,address,uint256)': EventFragment;
    'CErc20Withdrawn(address,address,uint256)': EventFragment;
    'Erc20Supplied(address,address,uint256,uint256)': EventFragment;
    'Erc20Withdrawn(address,address,uint256,uint256)': EventFragment;
    'EthSupplied(address,uint256,uint256)': EventFragment;
    'EthWithdrawn(address,uint256,uint256)': EventFragment;
    'LoanDrawProtocolFeeUpdated(uint96,uint96)': EventFragment;
    'LoanExecuted(address,address,address,address,uint256,tuple)': EventFragment;
    'LoanRepaid(address,address,address,uint256,address,uint256)': EventFragment;
    'NewAssetListed(address,address)': EventFragment;
    'NewOffer(address,address,address,uint256,tuple,bytes32)': EventFragment;
    'OfferRemoved(address,address,address,uint256,tuple,bytes32)': EventFragment;
    'OfferSignatureUsed(address,uint256,tuple,bytes)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PartialRepayment(address,address,address,uint256,address,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'Refinance(address,address,address,address,uint256,tuple)': EventFragment;
    'RefinancePremiumLenderBpsUpdated(uint16,uint16)': EventFragment;
    'RefinancePremiumProtocolBpsUpdated(uint16,uint16)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AmountDrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetSeized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CErc20Supplied'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CErc20Withdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Erc20Supplied'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Erc20Withdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EthSupplied'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EthWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LoanDrawProtocolFeeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LoanExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LoanRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAssetListed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewOffer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OfferRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OfferSignatureUsed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PartialRepayment'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Refinance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RefinancePremiumLenderBpsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RefinancePremiumProtocolBpsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export type AmountDrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    borrower: string;
    nftContractAddress: string;
    nftId: BigNumber;
    drawAmount: BigNumber;
    totalDrawn: BigNumber;
  }
>;

export type AmountDrawnEventFilter = TypedEventFilter<AmountDrawnEvent>;

export type AssetSeizedEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    lender: string;
    borrower: string;
    nftContractAddress: string;
    nftId: BigNumber;
  }
>;

export type AssetSeizedEventFilter = TypedEventFilter<AssetSeizedEvent>;

export type CErc20SuppliedEvent = TypedEvent<
  [string, string, BigNumber],
  { liquidityProvider: string; cAsset: string; cTokenAmount: BigNumber }
>;

export type CErc20SuppliedEventFilter = TypedEventFilter<CErc20SuppliedEvent>;

export type CErc20WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { liquidityProvider: string; cAsset: string; cTokenAmount: BigNumber }
>;

export type CErc20WithdrawnEventFilter = TypedEventFilter<CErc20WithdrawnEvent>;

export type Erc20SuppliedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    liquidityProvider: string;
    asset: string;
    tokenAmount: BigNumber;
    cTokenAmount: BigNumber;
  }
>;

export type Erc20SuppliedEventFilter = TypedEventFilter<Erc20SuppliedEvent>;

export type Erc20WithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    liquidityProvider: string;
    asset: string;
    tokenAmount: BigNumber;
    cTokenAmount: BigNumber;
  }
>;

export type Erc20WithdrawnEventFilter = TypedEventFilter<Erc20WithdrawnEvent>;

export type EthSuppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { liquidityProvider: string; amount: BigNumber; cTokenAmount: BigNumber }
>;

export type EthSuppliedEventFilter = TypedEventFilter<EthSuppliedEvent>;

export type EthWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { liquidityProvider: string; amount: BigNumber; cTokenAmount: BigNumber }
>;

export type EthWithdrawnEventFilter = TypedEventFilter<EthWithdrawnEvent>;

export type LoanDrawProtocolFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldInterestPersecond: BigNumber; newInterestPersecond: BigNumber }
>;

export type LoanDrawProtocolFeeUpdatedEventFilter =
  TypedEventFilter<LoanDrawProtocolFeeUpdatedEvent>;

export type LoanExecutedEvent = TypedEvent<
  [string, string, string, string, BigNumber, ILendingStructs.OfferStructOutput],
  {
    lender: string;
    asset: string;
    borrower: string;
    nftContractAddress: string;
    nftId: BigNumber;
    offer: ILendingStructs.OfferStructOutput;
  }
>;

export type LoanExecutedEventFilter = TypedEventFilter<LoanExecutedEvent>;

export type LoanRepaidEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber],
  {
    lender: string;
    borrower: string;
    nftContractAddress: string;
    nftId: BigNumber;
    asset: string;
    totalPayment: BigNumber;
  }
>;

export type LoanRepaidEventFilter = TypedEventFilter<LoanRepaidEvent>;

export type NewAssetListedEvent = TypedEvent<[string, string], { asset: string; cAsset: string }>;

export type NewAssetListedEventFilter = TypedEventFilter<NewAssetListedEvent>;

export type NewOfferEvent = TypedEvent<
  [string, string, string, BigNumber, ILendingStructs.OfferStructOutput, string],
  {
    creator: string;
    asset: string;
    nftContractAddress: string;
    nftId: BigNumber;
    offer: ILendingStructs.OfferStructOutput;
    offerHash: string;
  }
>;

export type NewOfferEventFilter = TypedEventFilter<NewOfferEvent>;

export type OfferRemovedEvent = TypedEvent<
  [string, string, string, BigNumber, ILendingStructs.OfferStructOutput, string],
  {
    creator: string;
    asset: string;
    nftContractAddress: string;
    nftId: BigNumber;
    offer: ILendingStructs.OfferStructOutput;
    offerHash: string;
  }
>;

export type OfferRemovedEventFilter = TypedEventFilter<OfferRemovedEvent>;

export type OfferSignatureUsedEvent = TypedEvent<
  [string, BigNumber, ILendingStructs.OfferStructOutput, string],
  {
    nftContractAddress: string;
    nftId: BigNumber;
    offer: ILendingStructs.OfferStructOutput;
    signature: string;
  }
>;

export type OfferSignatureUsedEventFilter = TypedEventFilter<OfferSignatureUsedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type PartialRepaymentEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber],
  {
    lender: string;
    borrower: string;
    nftContractAddress: string;
    nftId: BigNumber;
    asset: string;
    amount: BigNumber;
  }
>;

export type PartialRepaymentEventFilter = TypedEventFilter<PartialRepaymentEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RefinanceEvent = TypedEvent<
  [string, string, string, string, BigNumber, ILendingStructs.OfferStructOutput],
  {
    lender: string;
    asset: string;
    borrower: string;
    nftContractAddress: string;
    nftId: BigNumber;
    offer: ILendingStructs.OfferStructOutput;
  }
>;

export type RefinanceEventFilter = TypedEventFilter<RefinanceEvent>;

export type RefinancePremiumLenderBpsUpdatedEvent = TypedEvent<
  [number, number],
  { oldPremiumLenderBps: number; newPremiumLenderBps: number }
>;

export type RefinancePremiumLenderBpsUpdatedEventFilter =
  TypedEventFilter<RefinancePremiumLenderBpsUpdatedEvent>;

export type RefinancePremiumProtocolBpsUpdatedEvent = TypedEvent<
  [number, number],
  { oldPremiumProtocolBps: number; newPremiumProtocolBps: number }
>;

export type RefinancePremiumProtocolBpsUpdatedEventFilter =
  TypedEventFilter<RefinancePremiumProtocolBpsUpdatedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface NiftyApes extends BaseContract {
  contractName: 'NiftyApes';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NiftyApesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetToCAsset(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    calculateInterestAccrued(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    createOffer(
      offer: ILendingStructs.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    drawLoanAmount(
      nftContractAddress: string,
      nftId: BigNumberish,
      drawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeLoanByBorrower(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeLoanByBorrowerSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeLoanByLender(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeLoanByLenderSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getCAssetBalance(
      account: string,
      cAsset: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLoanAuction(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[ILendingStructs.LoanAuctionStructOutput]>;

    getOffer(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: CallOverrides,
    ): Promise<[ILendingStructs.OfferStructOutput]>;

    getOfferHash(offer: ILendingStructs.OfferStruct, overrides?: CallOverrides): Promise<[string]>;

    getOfferSignatureStatus(signature: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    getOfferSigner(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    loanDrawFeeProtocolPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxBalanceByCAsset(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    partialRepayLoan(
      nftContractAddress: string,
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    refinanceByBorrower(
      nftContractAddress: string,
      nftId: BigNumberish,
      floorTerm: boolean,
      offerHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    refinanceByBorrowerSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    refinanceByLender(
      offer: ILendingStructs.OfferStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    refinancePremiumLenderBps(overrides?: CallOverrides): Promise<[number]>;

    refinancePremiumProtocolBps(overrides?: CallOverrides): Promise<[number]>;

    removeOffer(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repayLoan(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repayLoanForAccount(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    seizeAsset(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxCAssetBalance(
      asset: string,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supplyCErc20(
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supplyErc20(
      asset: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supplyEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateLoanDrawProtocolFeePerSecond(
      newLoanDrawFeeProtocolPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateRefinancePremiumLenderBps(
      newPremiumLenderBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateRefinancePremiumProtocolBps(
      newPremiumProtocolBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawCErc20(
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawErc20(
      asset: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawEth(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawOfferSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  assetToCAsset(arg0: string, overrides?: CallOverrides): Promise<string>;

  calculateInterestAccrued(
    nftContractAddress: string,
    nftId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  createOffer(
    offer: ILendingStructs.OfferStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  drawLoanAmount(
    nftContractAddress: string,
    nftId: BigNumberish,
    drawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeLoanByBorrower(
    nftContractAddress: string,
    nftId: BigNumberish,
    offerHash: BytesLike,
    floorTerm: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeLoanByBorrowerSignature(
    offer: ILendingStructs.OfferStruct,
    signature: BytesLike,
    nftId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeLoanByLender(
    nftContractAddress: string,
    nftId: BigNumberish,
    offerHash: BytesLike,
    floorTerm: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeLoanByLenderSignature(
    offer: ILendingStructs.OfferStruct,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getCAssetBalance(account: string, cAsset: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLoanAuction(
    nftContractAddress: string,
    nftId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<ILendingStructs.LoanAuctionStructOutput>;

  getOffer(
    nftContractAddress: string,
    nftId: BigNumberish,
    offerHash: BytesLike,
    floorTerm: boolean,
    overrides?: CallOverrides,
  ): Promise<ILendingStructs.OfferStructOutput>;

  getOfferHash(offer: ILendingStructs.OfferStruct, overrides?: CallOverrides): Promise<string>;

  getOfferSignatureStatus(signature: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getOfferSigner(
    offer: ILendingStructs.OfferStruct,
    signature: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  loanDrawFeeProtocolPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  maxBalanceByCAsset(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    nftContractAddress: string,
    nftId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  partialRepayLoan(
    nftContractAddress: string,
    nftId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  refinanceByBorrower(
    nftContractAddress: string,
    nftId: BigNumberish,
    floorTerm: boolean,
    offerHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  refinanceByBorrowerSignature(
    offer: ILendingStructs.OfferStruct,
    signature: BytesLike,
    nftId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  refinanceByLender(
    offer: ILendingStructs.OfferStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  refinancePremiumLenderBps(overrides?: CallOverrides): Promise<number>;

  refinancePremiumProtocolBps(overrides?: CallOverrides): Promise<number>;

  removeOffer(
    nftContractAddress: string,
    nftId: BigNumberish,
    offerHash: BytesLike,
    floorTerm: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repayLoan(
    nftContractAddress: string,
    nftId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repayLoanForAccount(
    nftContractAddress: string,
    nftId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  seizeAsset(
    nftContractAddress: string,
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCAssetAddress(
    asset: string,
    cAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxCAssetBalance(
    asset: string,
    maxBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supplyCErc20(
    cAsset: string,
    cTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supplyErc20(
    asset: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supplyEth(
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateLoanDrawProtocolFeePerSecond(
    newLoanDrawFeeProtocolPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateRefinancePremiumLenderBps(
    newPremiumLenderBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateRefinancePremiumProtocolBps(
    newPremiumProtocolBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawCErc20(
    cAsset: string,
    cTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawErc20(
    asset: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawEth(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawOfferSignature(
    offer: ILendingStructs.OfferStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    assetToCAsset(arg0: string, overrides?: CallOverrides): Promise<string>;

    calculateInterestAccrued(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    createOffer(offer: ILendingStructs.OfferStruct, overrides?: CallOverrides): Promise<void>;

    drawLoanAmount(
      nftContractAddress: string,
      nftId: BigNumberish,
      drawAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    executeLoanByBorrower(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    executeLoanByBorrowerSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    executeLoanByLender(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    executeLoanByLenderSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    getCAssetBalance(
      account: string,
      cAsset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanAuction(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<ILendingStructs.LoanAuctionStructOutput>;

    getOffer(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: CallOverrides,
    ): Promise<ILendingStructs.OfferStructOutput>;

    getOfferHash(offer: ILendingStructs.OfferStruct, overrides?: CallOverrides): Promise<string>;

    getOfferSignatureStatus(signature: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getOfferSigner(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    loanDrawFeeProtocolPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    maxBalanceByCAsset(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    partialRepayLoan(
      nftContractAddress: string,
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    refinanceByBorrower(
      nftContractAddress: string,
      nftId: BigNumberish,
      floorTerm: boolean,
      offerHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    refinanceByBorrowerSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    refinanceByLender(offer: ILendingStructs.OfferStruct, overrides?: CallOverrides): Promise<void>;

    refinancePremiumLenderBps(overrides?: CallOverrides): Promise<number>;

    refinancePremiumProtocolBps(overrides?: CallOverrides): Promise<number>;

    removeOffer(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayLoan(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    repayLoanForAccount(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    seizeAsset(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCAssetAddress(asset: string, cAsset: string, overrides?: CallOverrides): Promise<void>;

    setMaxCAssetBalance(
      asset: string,
      maxBalance: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    supplyCErc20(
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    supplyErc20(
      asset: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supplyEth(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateLoanDrawProtocolFeePerSecond(
      newLoanDrawFeeProtocolPerSecond: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateRefinancePremiumLenderBps(
      newPremiumLenderBps: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateRefinancePremiumProtocolBps(
      newPremiumProtocolBps: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawCErc20(
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawErc20(
      asset: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdrawEth(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawOfferSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AmountDrawn(address,address,uint256,uint256,uint256)'(
      borrower?: string | null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      drawAmount?: null,
      totalDrawn?: null,
    ): AmountDrawnEventFilter;
    AmountDrawn(
      borrower?: string | null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      drawAmount?: null,
      totalDrawn?: null,
    ): AmountDrawnEventFilter;

    'AssetSeized(address,address,address,uint256)'(
      lender?: string | null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
    ): AssetSeizedEventFilter;
    AssetSeized(
      lender?: string | null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
    ): AssetSeizedEventFilter;

    'CErc20Supplied(address,address,uint256)'(
      liquidityProvider?: string | null,
      cAsset?: string | null,
      cTokenAmount?: null,
    ): CErc20SuppliedEventFilter;
    CErc20Supplied(
      liquidityProvider?: string | null,
      cAsset?: string | null,
      cTokenAmount?: null,
    ): CErc20SuppliedEventFilter;

    'CErc20Withdrawn(address,address,uint256)'(
      liquidityProvider?: string | null,
      cAsset?: string | null,
      cTokenAmount?: null,
    ): CErc20WithdrawnEventFilter;
    CErc20Withdrawn(
      liquidityProvider?: string | null,
      cAsset?: string | null,
      cTokenAmount?: null,
    ): CErc20WithdrawnEventFilter;

    'Erc20Supplied(address,address,uint256,uint256)'(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null,
    ): Erc20SuppliedEventFilter;
    Erc20Supplied(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null,
    ): Erc20SuppliedEventFilter;

    'Erc20Withdrawn(address,address,uint256,uint256)'(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null,
    ): Erc20WithdrawnEventFilter;
    Erc20Withdrawn(
      liquidityProvider?: string | null,
      asset?: string | null,
      tokenAmount?: null,
      cTokenAmount?: null,
    ): Erc20WithdrawnEventFilter;

    'EthSupplied(address,uint256,uint256)'(
      liquidityProvider?: string | null,
      amount?: null,
      cTokenAmount?: null,
    ): EthSuppliedEventFilter;
    EthSupplied(
      liquidityProvider?: string | null,
      amount?: null,
      cTokenAmount?: null,
    ): EthSuppliedEventFilter;

    'EthWithdrawn(address,uint256,uint256)'(
      liquidityProvider?: string | null,
      amount?: null,
      cTokenAmount?: null,
    ): EthWithdrawnEventFilter;
    EthWithdrawn(
      liquidityProvider?: string | null,
      amount?: null,
      cTokenAmount?: null,
    ): EthWithdrawnEventFilter;

    'LoanDrawProtocolFeeUpdated(uint96,uint96)'(
      oldInterestPersecond?: null,
      newInterestPersecond?: null,
    ): LoanDrawProtocolFeeUpdatedEventFilter;
    LoanDrawProtocolFeeUpdated(
      oldInterestPersecond?: null,
      newInterestPersecond?: null,
    ): LoanDrawProtocolFeeUpdatedEventFilter;

    'LoanExecuted(address,address,address,address,uint256,tuple)'(
      lender?: string | null,
      asset?: null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
    ): LoanExecutedEventFilter;
    LoanExecuted(
      lender?: string | null,
      asset?: null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
    ): LoanExecutedEventFilter;

    'LoanRepaid(address,address,address,uint256,address,uint256)'(
      lender?: string | null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      asset?: null,
      totalPayment?: null,
    ): LoanRepaidEventFilter;
    LoanRepaid(
      lender?: string | null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      asset?: null,
      totalPayment?: null,
    ): LoanRepaidEventFilter;

    'NewAssetListed(address,address)'(asset?: null, cAsset?: null): NewAssetListedEventFilter;
    NewAssetListed(asset?: null, cAsset?: null): NewAssetListedEventFilter;

    'NewOffer(address,address,address,uint256,tuple,bytes32)'(
      creator?: string | null,
      asset?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      offerHash?: null,
    ): NewOfferEventFilter;
    NewOffer(
      creator?: string | null,
      asset?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      offerHash?: null,
    ): NewOfferEventFilter;

    'OfferRemoved(address,address,address,uint256,tuple,bytes32)'(
      creator?: string | null,
      asset?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      offerHash?: null,
    ): OfferRemovedEventFilter;
    OfferRemoved(
      creator?: string | null,
      asset?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      offerHash?: null,
    ): OfferRemovedEventFilter;

    'OfferSignatureUsed(address,uint256,tuple,bytes)'(
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      signature?: null,
    ): OfferSignatureUsedEventFilter;
    OfferSignatureUsed(
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
      signature?: null,
    ): OfferSignatureUsedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'PartialRepayment(address,address,address,uint256,address,uint256)'(
      lender?: string | null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      asset?: null,
      amount?: null,
    ): PartialRepaymentEventFilter;
    PartialRepayment(
      lender?: string | null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      asset?: null,
      amount?: null,
    ): PartialRepaymentEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Refinance(address,address,address,address,uint256,tuple)'(
      lender?: string | null,
      asset?: null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
    ): RefinanceEventFilter;
    Refinance(
      lender?: string | null,
      asset?: null,
      borrower?: null,
      nftContractAddress?: string | null,
      nftId?: BigNumberish | null,
      offer?: null,
    ): RefinanceEventFilter;

    'RefinancePremiumLenderBpsUpdated(uint16,uint16)'(
      oldPremiumLenderBps?: null,
      newPremiumLenderBps?: null,
    ): RefinancePremiumLenderBpsUpdatedEventFilter;
    RefinancePremiumLenderBpsUpdated(
      oldPremiumLenderBps?: null,
      newPremiumLenderBps?: null,
    ): RefinancePremiumLenderBpsUpdatedEventFilter;

    'RefinancePremiumProtocolBpsUpdated(uint16,uint16)'(
      oldPremiumProtocolBps?: null,
      newPremiumProtocolBps?: null,
    ): RefinancePremiumProtocolBpsUpdatedEventFilter;
    RefinancePremiumProtocolBpsUpdated(
      oldPremiumProtocolBps?: null,
      newPremiumProtocolBps?: null,
    ): RefinancePremiumProtocolBpsUpdatedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    assetToCAsset(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestAccrued(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createOffer(
      offer: ILendingStructs.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    drawLoanAmount(
      nftContractAddress: string,
      nftId: BigNumberish,
      drawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeLoanByBorrower(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeLoanByBorrowerSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeLoanByLender(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeLoanByLenderSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getCAssetBalance(
      account: string,
      cAsset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanAuction(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOffer(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOfferHash(offer: ILendingStructs.OfferStruct, overrides?: CallOverrides): Promise<BigNumber>;

    getOfferSignatureStatus(signature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getOfferSigner(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    loanDrawFeeProtocolPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    maxBalanceByCAsset(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    partialRepayLoan(
      nftContractAddress: string,
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    refinanceByBorrower(
      nftContractAddress: string,
      nftId: BigNumberish,
      floorTerm: boolean,
      offerHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    refinanceByBorrowerSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    refinanceByLender(
      offer: ILendingStructs.OfferStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    refinancePremiumLenderBps(overrides?: CallOverrides): Promise<BigNumber>;

    refinancePremiumProtocolBps(overrides?: CallOverrides): Promise<BigNumber>;

    removeOffer(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repayLoan(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repayLoanForAccount(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    seizeAsset(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxCAssetBalance(
      asset: string,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supplyCErc20(
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supplyErc20(
      asset: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supplyEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateLoanDrawProtocolFeePerSecond(
      newLoanDrawFeeProtocolPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateRefinancePremiumLenderBps(
      newPremiumLenderBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateRefinancePremiumProtocolBps(
      newPremiumProtocolBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawCErc20(
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawErc20(
      asset: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawEth(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawOfferSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetToCAsset(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateInterestAccrued(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    createOffer(
      offer: ILendingStructs.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    drawLoanAmount(
      nftContractAddress: string,
      nftId: BigNumberish,
      drawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeLoanByBorrower(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeLoanByBorrowerSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeLoanByLender(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeLoanByLenderSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getCAssetBalance(
      account: string,
      cAsset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoanAuction(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOffer(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOfferHash(
      offer: ILendingStructs.OfferStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOfferSignatureStatus(
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOfferSigner(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    loanDrawFeeProtocolPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBalanceByCAsset(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    partialRepayLoan(
      nftContractAddress: string,
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refinanceByBorrower(
      nftContractAddress: string,
      nftId: BigNumberish,
      floorTerm: boolean,
      offerHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    refinanceByBorrowerSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    refinanceByLender(
      offer: ILendingStructs.OfferStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    refinancePremiumLenderBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refinancePremiumProtocolBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOffer(
      nftContractAddress: string,
      nftId: BigNumberish,
      offerHash: BytesLike,
      floorTerm: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repayLoan(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repayLoanForAccount(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    seizeAsset(
      nftContractAddress: string,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCAssetAddress(
      asset: string,
      cAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxCAssetBalance(
      asset: string,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supplyCErc20(
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supplyErc20(
      asset: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supplyEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateLoanDrawProtocolFeePerSecond(
      newLoanDrawFeeProtocolPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateRefinancePremiumLenderBps(
      newPremiumLenderBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateRefinancePremiumProtocolBps(
      newPremiumProtocolBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawCErc20(
      cAsset: string,
      cTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawErc20(
      asset: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawEth(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawOfferSignature(
      offer: ILendingStructs.OfferStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
