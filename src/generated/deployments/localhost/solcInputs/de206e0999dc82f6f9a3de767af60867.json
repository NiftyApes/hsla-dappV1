{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/compound/ICERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ICToken.sol\";\n\ninterface ICERC20 is ICToken {\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to redeem\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    /**\n     @notice This function is only used to test cAssetAmountToAssetAmount\n     */\n    function redeem(uint256 redeemTokens) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/compound/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface ICToken is IERC20Upgradeable {\n  function exchangeRateCurrent() external returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/Liquidity.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"./interfaces/compound/ICEther.sol\";\nimport \"./interfaces/compound/ICERC20.sol\";\nimport \"./interfaces/niftyapes/liquidity/ILiquidity.sol\";\nimport \"./interfaces/niftyapes/lending/ILending.sol\";\nimport \"./interfaces/niftyapes/offers/IOffers.sol\";\nimport \"./interfaces/sanctions/SanctionsList.sol\";\nimport \"./lib/Math.sol\";\n\n/// @title Implementation of the ILiquidity interface\ncontract NiftyApesLiquidity is OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, ILiquidity {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  using AddressUpgradeable for address payable;\n\n  /// @dev Internal address used for for ETH in our mappings\n  address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n  /// @dev Internal constant address for the Chainalysis OFAC sanctions oracle\n  address private constant SANCTIONS_CONTRACT = 0x40C57923924B5c5c5455c48D93317139ADDaC8fb;\n\n  /// @inheritdoc ILiquidity\n  mapping(address => address) public override assetToCAsset;\n\n  /// @notice The reverse mapping for assetToCAsset\n  mapping(address => address) internal _cAssetToAsset;\n\n  /// @notice The account balance for each cAsset of a user\n  mapping(address => mapping(address => uint256)) internal _balanceByAccountByCAsset;\n\n  /// @inheritdoc ILiquidity\n  mapping(address => uint256) public override maxBalanceByCAsset;\n\n  /// @inheritdoc ILiquidity\n  address public lendingContractAddress;\n\n  /// @inheritdoc ILiquidity\n  uint16 public regenCollectiveBpsOfRevenue;\n\n  /// @inheritdoc ILiquidity\n  address public regenCollectiveAddress;\n\n  /// @inheritdoc ILiquidity\n  address public compContractAddress;\n\n  /// @notice A bool to prevent external eth from being received and locked in the contract\n  bool internal _ethTransferable;\n\n  /// @dev The status of sanctions checks. Can be set to false if oracle becomes malicious.\n  bool internal _sanctionsPause;\n\n  /// @dev This empty reserved space is put in place to allow future versions to add new\n  /// variables without shifting storage.\n  uint256[500] private __gap;\n\n  /// @notice The initializer for the NiftyApes protocol.\n  ///         NiftyApes is intended to be deployed behind a proxy and thus needs to initialize\n  ///         its state outside of a constructor.\n  function initialize(address newCompContractAddress) public initializer {\n    regenCollectiveBpsOfRevenue = 100;\n    regenCollectiveAddress = address(0x252de94Ae0F07fb19112297F299f8c9Cc10E28a6);\n    compContractAddress = newCompContractAddress;\n\n    OwnableUpgradeable.__Ownable_init();\n    PausableUpgradeable.__Pausable_init();\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\n  }\n\n  /// @inheritdoc ILiquidityAdmin\n  function setCAssetAddress(address asset, address cAsset) external onlyOwner {\n    address cAssetOld = assetToCAsset[asset];\n    address assetOld = _cAssetToAsset[cAsset];\n    if (cAssetOld != address(0)) {\n      _cAssetToAsset[cAssetOld] = address(0);\n    }\n    if (assetOld != address(0)) {\n      assetToCAsset[assetOld] = address(0);\n    }\n\n    assetToCAsset[asset] = cAsset;\n    _cAssetToAsset[cAsset] = asset;\n\n    emit AssetToCAssetSet(asset, cAsset);\n  }\n\n  /// @inheritdoc ILiquidityAdmin\n  function setMaxCAssetBalance(address cAsset, uint256 maxBalance) external onlyOwner {\n    maxBalanceByCAsset[cAsset] = maxBalance;\n  }\n\n  /// @inheritdoc ILiquidityAdmin\n  function updateLendingContractAddress(address newLendingContractAddress) external onlyOwner {\n    emit LiquidityXLendingContractAddressUpdated(lendingContractAddress, newLendingContractAddress);\n    lendingContractAddress = newLendingContractAddress;\n  }\n\n  /// @inheritdoc ILiquidityAdmin\n  function updateRegenCollectiveBpsOfRevenue(uint16 newRegenCollectiveBpsOfRevenue) external onlyOwner {\n    require(newRegenCollectiveBpsOfRevenue <= 1_000, \"00002\");\n    require(newRegenCollectiveBpsOfRevenue >= regenCollectiveBpsOfRevenue, \"00039\");\n    emit RegenCollectiveBpsOfRevenueUpdated(regenCollectiveBpsOfRevenue, newRegenCollectiveBpsOfRevenue);\n    regenCollectiveBpsOfRevenue = newRegenCollectiveBpsOfRevenue;\n  }\n\n  /// @inheritdoc ILiquidityAdmin\n  function updateRegenCollectiveAddress(address newRegenCollectiveAddress) external onlyOwner {\n    emit RegenCollectiveAddressUpdated(newRegenCollectiveAddress);\n    regenCollectiveAddress = newRegenCollectiveAddress;\n  }\n\n  /// @inheritdoc ILiquidityAdmin\n  function pauseSanctions() external onlyOwner {\n    _sanctionsPause = true;\n    emit LiquiditySanctionsPaused();\n  }\n\n  /// @inheritdoc ILiquidityAdmin\n  function unpauseSanctions() external onlyOwner {\n    _sanctionsPause = false;\n    emit LiquiditySanctionsUnpaused();\n  }\n\n  /// @inheritdoc ILiquidityAdmin\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  /// @inheritdoc ILiquidityAdmin\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n\n  /// @inheritdoc ILiquidity\n  function getCAssetBalance(address account, address cAsset) public view returns (uint256) {\n    return _balanceByAccountByCAsset[account][cAsset];\n  }\n\n  /// @inheritdoc ILiquidity\n  function getCAsset(address asset) public view returns (address) {\n    address cAsset = assetToCAsset[asset];\n    require(cAsset != address(0), \"00040\");\n    require(asset == _cAssetToAsset[cAsset], \"00042\");\n    return cAsset;\n  }\n\n  function _getAsset(address cAsset) internal view returns (address) {\n    address asset = _cAssetToAsset[cAsset];\n    require(asset != address(0), \"00041\");\n    require(cAsset == assetToCAsset[asset], \"00042\");\n    return asset;\n  }\n\n  /// @inheritdoc ILiquidity\n  function supplyErc20(address asset, uint256 tokenAmount) external whenNotPaused nonReentrant returns (uint256) {\n    _requireIsNotSanctioned(msg.sender);\n\n    address cAsset = getCAsset(asset);\n\n    uint256 cTokensMinted = _mintCErc20(msg.sender, asset, tokenAmount);\n\n    _balanceByAccountByCAsset[msg.sender][cAsset] += cTokensMinted;\n\n    _requireMaxCAssetBalance(cAsset);\n\n    emit Erc20Supplied(msg.sender, asset, tokenAmount, cTokensMinted);\n\n    return cTokensMinted;\n  }\n\n  /// @inheritdoc ILiquidity\n  function supplyCErc20(address cAsset, uint256 cTokenAmount) external whenNotPaused nonReentrant returns (uint256) {\n    _requireIsNotSanctioned(msg.sender);\n    _requireAmountGreaterThanZero(cTokenAmount);\n\n    _getAsset(cAsset); // Ensures asset / cAsset is in the allow list\n    IERC20Upgradeable cToken = IERC20Upgradeable(cAsset);\n\n    cToken.safeTransferFrom(msg.sender, address(this), cTokenAmount);\n\n    _balanceByAccountByCAsset[msg.sender][cAsset] += cTokenAmount;\n\n    _requireMaxCAssetBalance(cAsset);\n\n    emit CErc20Supplied(msg.sender, cAsset, cTokenAmount);\n\n    return cTokenAmount;\n  }\n\n  /// @inheritdoc ILiquidity\n  function withdrawErc20(address asset, uint256 tokenAmount) external whenNotPaused nonReentrant returns (uint256) {\n    _requireIsNotSanctioned(msg.sender);\n\n    address cAsset = getCAsset(asset);\n    IERC20Upgradeable underlying = IERC20Upgradeable(asset);\n\n    if (msg.sender == owner()) {\n      uint256 cTokensBurnt = _ownerWithdrawUnderlying(asset, cAsset);\n      return cTokensBurnt;\n    } else {\n      uint256 cTokensBurnt = _burnCErc20(asset, tokenAmount);\n\n      _withdrawCBalance(msg.sender, cAsset, cTokensBurnt);\n\n      underlying.safeTransfer(msg.sender, tokenAmount);\n\n      emit Erc20Withdrawn(msg.sender, asset, tokenAmount, cTokensBurnt);\n\n      return cTokensBurnt;\n    }\n  }\n\n  /// @inheritdoc ILiquidity\n  function withdrawCErc20(address cAsset, uint256 cTokenAmount) external whenNotPaused nonReentrant returns (uint256) {\n    _requireIsNotSanctioned(msg.sender);\n\n    IERC20Upgradeable cToken = IERC20Upgradeable(cAsset);\n\n    if (msg.sender == owner()) {\n      uint256 cTokensBurnt = _ownerWithdrawCToken(cAsset);\n      return cTokensBurnt;\n    } else {\n      _withdrawCBalance(msg.sender, cAsset, cTokenAmount);\n\n      cToken.safeTransfer(msg.sender, cTokenAmount);\n\n      emit CErc20Withdrawn(msg.sender, cAsset, cTokenAmount);\n\n      return cTokenAmount;\n    }\n  }\n\n  /// @inheritdoc ILiquidity\n  function supplyEth() external payable whenNotPaused nonReentrant returns (uint256) {\n    _requireIsNotSanctioned(msg.sender);\n\n    address cAsset = getCAsset(ETH_ADDRESS);\n\n    uint256 cTokensMinted = _mintCEth(msg.value);\n\n    _balanceByAccountByCAsset[msg.sender][cAsset] += cTokensMinted;\n\n    _requireMaxCAssetBalance(cAsset);\n\n    emit EthSupplied(msg.sender, msg.value, cTokensMinted);\n\n    return cTokensMinted;\n  }\n\n  /// @inheritdoc ILiquidity\n  function withdrawEth(uint256 amount) external whenNotPaused nonReentrant returns (uint256) {\n    _requireIsNotSanctioned(msg.sender);\n\n    address cAsset = getCAsset(ETH_ADDRESS);\n\n    if (msg.sender == owner()) {\n      return _ownerWithdrawUnderlying(ETH_ADDRESS, cAsset);\n    } else {\n      uint256 cTokensBurnt = _burnCErc20(ETH_ADDRESS, amount);\n\n      _withdrawCBalance(msg.sender, cAsset, cTokensBurnt);\n\n      payable(msg.sender).sendValue(amount);\n\n      emit EthWithdrawn(msg.sender, amount, cTokensBurnt);\n\n      return cTokensBurnt;\n    }\n  }\n\n  /// @inheritdoc ILiquidity\n  function withdrawComp() external whenNotPaused nonReentrant onlyOwner returns (uint256) {\n    _requireIsNotSanctioned(msg.sender);\n\n    uint256 ownerBalance = IERC20Upgradeable(compContractAddress).balanceOf(address(this));\n\n    uint256 bpsForRegen = (ownerBalance * regenCollectiveBpsOfRevenue) / 10_000;\n\n    uint256 ownerBalanceMinusRegen = ownerBalance - bpsForRegen;\n\n    _sendValue(compContractAddress, ownerBalanceMinusRegen, owner());\n\n    _sendValue(compContractAddress, bpsForRegen, regenCollectiveAddress);\n\n    emit PercentForRegen(regenCollectiveAddress, compContractAddress, bpsForRegen, 0);\n\n    emit Erc20Withdrawn(owner(), compContractAddress, ownerBalanceMinusRegen, 0);\n\n    return ownerBalance;\n  }\n\n  function _requireEthTransferable() internal view {\n    require(_ethTransferable, \"00043\");\n  }\n\n  function _requireIsNotSanctioned(address addressToCheck) internal view {\n    if (!_sanctionsPause) {\n      SanctionsList sanctionsList = SanctionsList(SANCTIONS_CONTRACT);\n      bool isToSanctioned = sanctionsList.isSanctioned(addressToCheck);\n      require(!isToSanctioned, \"00017\");\n    }\n  }\n\n  function _requireMaxCAssetBalance(address cAsset) internal view {\n    uint256 maxCAssetBalance = maxBalanceByCAsset[cAsset];\n\n    require(maxCAssetBalance >= ICERC20(cAsset).balanceOf(address(this)), \"00044\");\n  }\n\n  function _requireCAssetBalance(\n    address account,\n    address cAsset,\n    uint256 amount\n  ) internal view {\n    require(getCAssetBalance(account, cAsset) >= amount, \"00034\");\n  }\n\n  function _requireAmountGreaterThanZero(uint256 amount) internal pure {\n    require(amount > 0, \"00045\");\n  }\n\n  function _requireLendingContract() internal view {\n    require(msg.sender == lendingContractAddress, \"00031\");\n  }\n\n  function _ownerWithdrawUnderlying(address asset, address cAsset) internal returns (uint256 cTokensBurnt) {\n    uint256 ownerBalance = getCAssetBalance(owner(), cAsset);\n\n    uint256 ownerBalanceUnderlying = cAssetAmountToAssetAmount(cAsset, ownerBalance);\n\n    cTokensBurnt = _burnCErc20(asset, ownerBalanceUnderlying);\n\n    uint256 bpsForRegen = (cTokensBurnt * regenCollectiveBpsOfRevenue) / 10_000;\n\n    uint256 ownerBalanceMinusRegen = cTokensBurnt - bpsForRegen;\n\n    uint256 ownerAmountUnderlying = cAssetAmountToAssetAmount(cAsset, ownerBalanceMinusRegen);\n\n    uint256 regenAmountUnderlying = cAssetAmountToAssetAmount(cAsset, bpsForRegen);\n\n    _withdrawCBalance(owner(), cAsset, cTokensBurnt);\n\n    _sendValue(asset, ownerAmountUnderlying, owner());\n\n    _sendValue(asset, regenAmountUnderlying, regenCollectiveAddress);\n\n    emit PercentForRegen(regenCollectiveAddress, asset, regenAmountUnderlying, bpsForRegen);\n\n    if (asset == ETH_ADDRESS) {\n      emit EthWithdrawn(owner(), ownerAmountUnderlying, ownerBalanceMinusRegen);\n    } else {\n      emit Erc20Withdrawn(owner(), asset, ownerAmountUnderlying, ownerBalanceMinusRegen);\n    }\n  }\n\n  function _ownerWithdrawCToken(address cAsset) internal returns (uint256) {\n    uint256 ownerBalance = getCAssetBalance(owner(), cAsset);\n\n    uint256 bpsForRegen = (ownerBalance * regenCollectiveBpsOfRevenue) / 10_000;\n\n    uint256 ownerBalanceMinusRegen = ownerBalance - bpsForRegen;\n\n    _withdrawCBalance(owner(), cAsset, ownerBalance);\n\n    _sendValue(cAsset, ownerBalanceMinusRegen, owner());\n\n    _sendValue(cAsset, bpsForRegen, regenCollectiveAddress);\n\n    uint256 regenAmountUnderlying = cAssetAmountToAssetAmount(cAsset, bpsForRegen);\n\n    emit PercentForRegen(regenCollectiveAddress, cAsset, regenAmountUnderlying, bpsForRegen);\n\n    emit CErc20Withdrawn(owner(), cAsset, ownerBalanceMinusRegen);\n\n    return ownerBalance;\n  }\n\n  function sendValue(\n    address asset,\n    uint256 amount,\n    address to\n  ) external {\n    _requireLendingContract();\n    _sendValue(asset, amount, to);\n  }\n\n  function _sendValue(\n    address asset,\n    uint256 amount,\n    address to\n  ) internal {\n    _requireAmountGreaterThanZero(amount);\n    if (asset == ETH_ADDRESS) {\n      payable(to).sendValue(amount);\n    } else {\n      IERC20Upgradeable(asset).safeTransfer(to, amount);\n    }\n  }\n\n  /// @inheritdoc ILiquidity\n  function mintCErc20(\n    address from,\n    address asset,\n    uint256 amount\n  ) external returns (uint256) {\n    _requireLendingContract();\n    return _mintCErc20(from, asset, amount);\n  }\n\n  function _mintCErc20(\n    address from,\n    address asset,\n    uint256 amount\n  ) internal returns (uint256) {\n    _requireAmountGreaterThanZero(amount);\n\n    address cAsset = assetToCAsset[asset];\n    IERC20Upgradeable underlying = IERC20Upgradeable(asset);\n    ICERC20 cToken = ICERC20(cAsset);\n\n    underlying.safeTransferFrom(from, address(this), amount);\n    uint256 allowance = underlying.allowance(address(this), address(cToken));\n    if (allowance > 0) {\n      underlying.safeDecreaseAllowance(cAsset, allowance);\n    }\n    underlying.safeIncreaseAllowance(cAsset, amount);\n\n    uint256 cTokenBalanceBefore = cToken.balanceOf(address(this));\n    require(cToken.mint(amount) == 0, \"00037\");\n    uint256 cTokenBalanceAfter = cToken.balanceOf(address(this));\n    return cTokenBalanceAfter - cTokenBalanceBefore;\n  }\n\n  /// @inheritdoc ILiquidity\n  function mintCEth() external payable returns (uint256) {\n    _requireLendingContract();\n    return _mintCEth(msg.value);\n  }\n\n  function _mintCEth(uint256 amount) internal returns (uint256) {\n    _requireAmountGreaterThanZero(amount);\n\n    address cAsset = assetToCAsset[ETH_ADDRESS];\n    ICEther cToken = ICEther(cAsset);\n    uint256 cTokenBalanceBefore = cToken.balanceOf(address(this));\n    cToken.mint{ value: amount }();\n    uint256 cTokenBalanceAfter = cToken.balanceOf(address(this));\n    return cTokenBalanceAfter - cTokenBalanceBefore;\n  }\n\n  /// @inheritdoc ILiquidity\n  function burnCErc20(address asset, uint256 amount) external returns (uint256) {\n    _requireLendingContract();\n    return _burnCErc20(asset, amount);\n  }\n\n  // @notice param amount is denominated in the underlying asset, not cAsset\n  function _burnCErc20(address asset, uint256 amount) internal returns (uint256) {\n    _requireAmountGreaterThanZero(amount);\n\n    address cAsset = assetToCAsset[asset];\n    ICERC20 cToken = ICERC20(cAsset);\n\n    uint256 cTokenBalanceBefore = cToken.balanceOf(address(this));\n    _ethTransferable = true;\n    require(cToken.redeemUnderlying(amount) == 0, \"00038\");\n    _ethTransferable = false;\n    uint256 cTokenBalanceAfter = cToken.balanceOf(address(this));\n    return cTokenBalanceBefore - cTokenBalanceAfter;\n  }\n\n  /// @inheritdoc ILiquidity\n  function withdrawCBalance(\n    address account,\n    address cAsset,\n    uint256 cTokenAmount\n  ) external {\n    _requireLendingContract();\n    _withdrawCBalance(account, cAsset, cTokenAmount);\n  }\n\n  function _withdrawCBalance(\n    address account,\n    address cAsset,\n    uint256 cTokenAmount\n  ) internal {\n    _requireCAssetBalance(account, cAsset, cTokenAmount);\n    _balanceByAccountByCAsset[account][cAsset] -= cTokenAmount;\n  }\n\n  /// @inheritdoc ILiquidity\n  function addToCAssetBalance(\n    address account,\n    address cAsset,\n    uint256 amount\n  ) external {\n    _requireLendingContract();\n    _balanceByAccountByCAsset[account][cAsset] += amount;\n  }\n\n  /// @inheritdoc ILiquidity\n  function assetAmountToCAssetAmount(address asset, uint256 amount) external returns (uint256) {\n    address cAsset = assetToCAsset[asset];\n    ICERC20 cToken = ICERC20(cAsset);\n\n    uint256 exchangeRateMantissa = cToken.exchangeRateCurrent();\n    return Math.divScalarByExpTruncate(amount, exchangeRateMantissa);\n  }\n\n  /// @inheritdoc ILiquidity\n  function cAssetAmountToAssetAmount(address cAsset, uint256 amount) public returns (uint256) {\n    ICERC20 cToken = ICERC20(cAsset);\n\n    uint256 exchangeRateMantissa = cToken.exchangeRateCurrent();\n    return Math.mulScalarTruncate(amount, exchangeRateMantissa);\n  }\n\n  // solhint-disable-next-line no-empty-blocks\n  function renounceOwnership() public override onlyOwner {}\n\n  // This is needed to receive ETH when calling withdrawing ETH from compound\n  receive() external payable {\n    _requireEthTransferable();\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/compound/ICEther.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ICToken.sol\";\n\ninterface ICEther is ICToken {\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Reverts upon any failure\n     */\n    function mint() external payable;\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to redeem\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/niftyapes/liquidity/ILiquidity.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.13;\n\nimport \"./ILiquidityAdmin.sol\";\nimport \"./ILiquidityEvents.sol\";\n\n/// @title NiftyApes interface for managing liquidity.\ninterface ILiquidity is ILiquidityAdmin, ILiquidityEvents {\n    /// @notice Returns the address of a compound token if the compound token is in the allow list on NiftyApes, otherwise zero address.\n    /// @param asset The assets address (e.g. DAI address)\n    function assetToCAsset(address asset) external view returns (address);\n\n    /// @notice Returns a maximum balance of compound tokens, if there is no limit returns zero.\n    /// @param cAsset The compound token address\n    function maxBalanceByCAsset(address cAsset) external view returns (uint256);\n\n    /// @notice Returns the address for the associated lending contract\n    function lendingContractAddress() external view returns (address);\n\n    /// @notice Returns the basis points of revenue sent to the Regen Collective\n    ///         denominated in basis points, parts of 10_000\n    function regenCollectiveBpsOfRevenue() external view returns (uint16);\n\n    /// @notice Returns the address for the Regen Collective\n    function regenCollectiveAddress() external view returns (address);\n\n    /// @notice Returns the address for COMP token\n    function compContractAddress() external view returns (address);\n\n    /// @notice Returns an accounts balance in compound tokens.\n    /// @param account The users account address\n    /// @param cAsset The compound token address\n    function getCAssetBalance(address account, address cAsset) external view returns (uint256);\n\n    /// @notice Returns the whitelisted cAsset pair to the asset\n    /// @param asset The assets address (e.g. DAI address)\n    function getCAsset(address asset) external view returns (address);\n\n    /// @notice Supply a given ERC20 token.\n    ///         The ERC20 token is supplied to compound and users will be earning interest\n    ///         on the token.\n    ///         Callers need to first approve spending of the ERC20 before calling this method\n    /// @param asset The address of the ERC20 token\n    /// @param amount The number of tokens to supply\n    function supplyErc20(address asset, uint256 amount) external returns (uint256);\n\n    /// @notice Supply a given compound token.\n    ///         This method allows users who have already supplied tokens to compound to directly\n    ///         supply their compound tokens to NiftyApes.\n    /// @param cAsset The address of the compound ERC20 token\n    /// @param amount The number of tokens to supply\n    function supplyCErc20(address cAsset, uint256 amount) external returns (uint256);\n\n    /// @notice Withdraw a given ERC20 token.\n    ///         This method withdraws tokens from compound and unwraps the ctoken returning\n    ///         the underlying asset to the user.\n    /// @param asset The address of the ERC20 token\n    /// @param amount The number of tokens to withdraw\n    function withdrawErc20(address asset, uint256 amount) external returns (uint256);\n\n    /// @notice Withdraw a given compound ERC20 token.\n    ///         This method returns compound tokens directly to the user without returning the underlying\n    /// @param cAsset The address of the compound ERC20 token\n    /// @param amount The number of tokens to withdraw\n    function withdrawCErc20(address cAsset, uint256 amount) external returns (uint256);\n\n    /// @notice Supply Eth to NiftyApes.\n    ///         Eth token is supplied to compound and users will be earning interest\n    ///         on it.\n    function supplyEth() external payable returns (uint256);\n\n    /// @notice Withdraw Eth from NiftyApes.\n    ///         This method withdraws tokens from compound and unwraps the ctoken returning\n    ///         the underlying asset to the user.\n    /// @param amount The amount of eth to withdraw\n    function withdrawEth(uint256 amount) external returns (uint256);\n\n    /// @notice OnlyOwner can call Withdraw COMP rewards from NiftyApes.\n    function withdrawComp() external returns (uint256);\n\n    /// @notice Function only callable by the NiftyApesLending contract\n    ///         Allows lending contract to affect liquidity directly\n    /// @param asset The assets address (e.g. DAI address)\n    /// @param amount The amount of eth to withdraw\n    /// @param to Recipient address\n    function sendValue(\n        address asset,\n        uint256 amount,\n        address to\n    ) external;\n\n    /// @notice Function only callable by the NiftyApesLending contract\n    ///         Allows lending contract to affect liquidity directly\n    /// @param from The address the transaction is from\n    /// @param asset The assets address (e.g. DAI address)\n    /// @param amount The amount of eth to withdraw\n    function mintCErc20(\n        address from,\n        address asset,\n        uint256 amount\n    ) external returns (uint256);\n\n    /// @notice Function only callable by the NiftyApesLending contract\n    ///         Allows lending contract to affect liquidity directly\n    function mintCEth() external payable returns (uint256);\n\n    /// @notice Function only callable by the NiftyApesLending contract\n    ///         Allows lending contract to affect liquidity directly\n    /// @param asset The assets address (e.g. DAI address)\n    /// @param amount The amount of eth to withdraw\n    function burnCErc20(address asset, uint256 amount) external returns (uint256);\n\n    /// @notice Function only callable by the NiftyApesLending contract\n    ///         Allows lending contract to affect liquidity directly\n    /// @param account The users account address\n    /// @param cAsset The address of the compound ERC20 token\n    /// @param cTokenAmount The amount of cToken to withdraw\n    function withdrawCBalance(\n        address account,\n        address cAsset,\n        uint256 cTokenAmount\n    ) external;\n\n    /// @notice Function only callable by the NiftyApesLending contract\n    ///         Allows lending contract to affect liquidity directly\n    /// @param account The users account address\n    /// @param cAsset The address of the compound ERC20 token\n    /// @param amount The amount of cAsset to add\n    function addToCAssetBalance(\n        address account,\n        address cAsset,\n        uint256 amount\n    ) external;\n\n    /// @notice Returns the current amount of ctokens to be minted for a given amount of an underlying asset\n    /// @param asset The assets address (e.g. DAI address)\n    /// @param amount The amount of asset to convert to cAsset\n    function assetAmountToCAssetAmount(address asset, uint256 amount) external returns (uint256);\n\n    /// @notice Returns the current amount of tokens to be redeemed for a given amount of cTokens\n    /// @notice This function results in a slightly lower amount of the underlying asset than might be expected\n    ///         Compound math truncates at the 8th decimal when going from underlying to cToken\n    ///         When converting cToken to underlying this previous truncation results in a rounding down at the 8th decimal place\n    ///         This only affects the NiftyApes protocol when the Owner withdraws and sends fund to the Regen Collective\n    ///         And when a lender is slashed for insufficient funds they are left with a very small amount of cTokens\n    ///         in their NiftyApes balance instead of a strict 0\n    /// @param cAsset The compound token address\n    /// @param amount The amount of asset to convert to cAsset\n    function cAssetAmountToAssetAmount(address cAsset, uint256 amount) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/niftyapes/lending/ILending.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ILendingAdmin.sol\";\nimport \"./ILendingEvents.sol\";\nimport \"./ILendingStructs.sol\";\nimport \"../offers/IOffersStructs.sol\";\n\n/// @title The lending interface for Nifty Apes\n///        This interface is intended to be used for interacting with loans on the protocol.\ninterface ILending is ILendingAdmin, ILendingEvents, ILendingStructs, IOffersStructs {\n    /// @notice Returns the address for the associated offers contract\n    function offersContractAddress() external view returns (address);\n\n    /// @notice Returns the address for the associated liquidity contract\n    function liquidityContractAddress() external view returns (address);\n\n    /// @notice Returns the address for the associated signature lending contract\n    function sigLendingContractAddress() external view returns (address);\n\n    /// @notice Returns the fee that computes protocol interest\n    ///         This fee is the basis points in order to calculate interest per second\n    function protocolInterestBps() external view returns (uint16);\n\n    /// @notice Returns the bps premium for refinancing a loan that the new lender has to pay\n    ///         This premium is to compensate lenders for the work of originating a loan\n    ///         Fees are denominated in basis points, parts of 10_000\n    function originationPremiumBps() external view returns (uint16);\n\n    /// @notice Returns the bps premium for refinancing a loan before the current lender has earned the equivalent amount of interest\n    ///         The amount paid decreases as the current lender earns interest\n    ///         The maximum amount paid is the value of gasGriefingPremiumBps\n    ///         For example, if the value of gasGriefingPremiumBps is 25 and 10 bps of interest has been earned, the premium will be 15 bps paid to the current lender\n    ///         Fees are denominated in basis points, parts of 10_000\n    function gasGriefingPremiumBps() external view returns (uint16);\n\n    /// @notice Returns the bps premium paid to the protocol for refinancing a loan with terms that do not improve the cumulative terms of the loan by the equivalent basis points\n    ///         For example, if termGriefingPremiumBps is 25 then the cumulative improvement of amount, interestRatePerSecond, and duration must be more than 25 bps\n    ///         If the amount is 8 bps better, interestRatePerSecond is 7 bps better, and duration is 10 bps better, then no premium is paid\n    ///         If any one of those terms is worse then a full premium is paid\n    ///         Fees are denominated in basis points, parts of 10_000\n    function termGriefingPremiumBps() external view returns (uint16);\n\n    /// @notice Returns the bps premium paid to the protocol for refinancing a loan within 1 hour of default\n    ///         Fees are denominated in basis points, parts of 10_000\n    function defaultRefinancePremiumBps() external view returns (uint16);\n\n    /// @notice Returns a loan auction identified by a given nft.\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of a specified NFT\n    function getLoanAuction(address nftContractAddress, uint256 nftId)\n        external\n        view\n        returns (LoanAuction memory auction);\n\n    /// @notice Start a loan as the borrower using an offer from the on chain offer book.\n    ///         The caller of this method has to be the current owner of the NFT\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    /// @param offerHash The hash of all parameters in an offer\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\n    function executeLoanByBorrower(\n        address nftContractAddress,\n        uint256 nftId,\n        bytes32 offerHash,\n        bool floorTerm\n    ) external payable;\n\n    /// @notice Start a loan as the borrower using a signed offer.\n    ///         The caller of this method has to be the current owner of the NFT\n    ///         Since offers can be floorTerm offers they might not include a specific nft id,\n    ///         thus the caller has to pass an extra nft id to the method to identify the nft.\n    /// @param offer The details of the loan auction offer\n    /// @param signature A signed offerHash\n    /// @param nftId The id of a specified NFT\n    // function executeLoanByBorrowerSignature(\n    //     Offer calldata offer,\n    //     bytes memory signature,\n    //     uint256 nftId\n    // ) external payable;\n\n    /// @notice Start a loan as the lender using an offer from the on chain offer book.\n    ///         Borrowers can make offers for loan terms on their NFTs and thus lenders can\n    ///         execute these offers\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    /// @param offerHash The hash of all parameters in an offer\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\n    function executeLoanByLender(\n        address nftContractAddress,\n        uint256 nftId,\n        bytes32 offerHash,\n        bool floorTerm\n    ) external payable;\n\n    /// @notice Start a loan as the lender using a borrowers offer and signature.\n    ///         Borrowers can make offers for loan terms on their NFTs and thus lenders can\n    ///         execute these offers\n    /// @param offer The details of the loan auction offer\n    /// @param signature A signed offerHash\n    // function executeLoanByLenderSignature(Offer calldata offer, bytes calldata signature)\n    //     external\n    //     payable;\n\n    /// @notice Refinance a loan against the on chain offer book as the borrower.\n    ///         The new offer has to cover the principle remaining and all lender interest owed on the loan\n    ///         Borrowers can refinance at any time even after loan default as long as their NFT collateral has not been seized\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\n    /// @param offerHash The hash of all parameters in an offer. This is used as the unique identifier of an offer.\n    function refinanceByBorrower(\n        address nftContractAddress,\n        uint256 nftId,\n        bool floorTerm,\n        bytes32 offerHash,\n        uint32 expectedLastUpdatedTimestamp\n    ) external;\n\n    /// @notice Refinance a loan against an off chain signed offer as the borrower.\n    ///         The new offer has to cover the principle remaining and all lender interest owed on the loan\n    ///         Borrowers can refinance at any time even after loan default as long as their NFT collateral has not been seized\n    /// @param offer The details of the loan auction offer\n    /// @param signature The signature for the offer\n    /// @param nftId The id of a specified NFT\n    // function refinanceByBorrowerSignature(\n    //     Offer calldata offer,\n    //     bytes memory signature,\n    //     uint256 nftId\n    // ) external;\n\n    /// @notice Refinance a loan against a new offer.\n    ///         The new offer must improve terms for the borrower\n    ///         Lender must improve terms by a cumulative 25 bps or pay a 25 bps premium\n    ///         For example, if termGriefingPremiumBps is 25 then the cumulative improvement of amount, interestRatePerSecond, and duration must be more than 25 bps\n    ///         If the amount is 8 bps better, interestRatePerSecond is 7 bps better, and duration is 10 bps better, then no premium is paid\n    ///         If any one of those terms is worse then a full premium is paid\n    ///         The Lender must allow 25 bps on interest to accrue or pay a gas griefing premium to the current lender\n    ///         This premium is equal to gasGriefingPremiumBps - interestEarned\n    /// @param offer The details of the loan auction offer\n    /// @param expectedLastUpdatedTimestamp The timestamp of the expected terms. This allows lenders to avoid being frontrun and forced to pay a gasGriefingPremium.\n    ///        Lenders can provide a 0 value if they are willing to pay the gasGriefingPremium in a high volume loanAuction\n    function refinanceByLender(Offer calldata offer, uint32 expectedLastUpdatedTimestamp) external;\n\n    /// @notice Allows borrowers to draw a higher balance on their loan if it has been refinanced with a higher maximum amount\n    ///         Drawing down value increases the maximum loan pay back amount and so is not automatically imposed on a refinance by lender, hence this function.\n    ///         If a lender does not have liquidity to support a refinanced amount the borrower will draw whatever amount is available,\n    ///         the lender's interest earned so far is slashed, and the loan amount is set to the amount currently drawn\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    /// @param drawAmount The amount of value to draw and add to the loan amountDrawn\n    function drawLoanAmount(\n        address nftContractAddress,\n        uint256 nftId,\n        uint256 drawAmount\n    ) external;\n\n    /// @notice Repay a loan and release the underlying collateral.\n    ///         The method automatically computes owed interest.\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    function repayLoan(address nftContractAddress, uint256 nftId) external payable;\n\n    /// @notice Repay someone elses loan\n    ///         This function is similar to repayLoan except that it allows for msg.sender to not be\n    ///         the borrower of the loan.\n    ///         The reason this is broken into another function is to make it harder to accidentally\n    ///         be repaying someone elses loan.\n    ///         Unless you are intending to repay someone elses loan you should be using #repayLoan instead\n    ///         The main use case for this function is to have a bot repay a loan on behalf of a borrower\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    function repayLoanForAccount(\n        address nftContractAddress,\n        uint256 nftId,\n        uint32 expectedLoanBeginTimestamp\n    ) external payable;\n\n    /// @notice Repay part of an open loan.\n    ///         Repaying part of a loan will lower the remaining interest accumulated\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    /// @param amount The amount of value to pay down on the principle of the loan\n    function partialRepayLoan(\n        address nftContractAddress,\n        uint256 nftId,\n        uint256 amount\n    ) external payable;\n\n    /// @notice Seizes an asset if the loan has expired and sends it to the lender\n    ///         This function can be called by anyone as soon as the loan is expired without having been repaid in full.\n    ///         This function allows anyone to call it so that an automated bot may seize the asset on behalf of a lender.\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    function seizeAsset(address nftContractAddress, uint256 nftId) external;\n\n    /// @notice Returns the owner of a given nft if there is a current loan on the NFT, otherwise zero.\n    /// @param nftContractAddress The address of the given nft contract\n    /// @param nftId The id of the given nft\n    function ownerOf(address nftContractAddress, uint256 nftId) external view returns (address);\n\n    /// @notice Returns interest since the last update to the loan\n    ///         This only includes the interest from the current active interest period.\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    function calculateInterestAccrued(address nftContractAddress, uint256 nftId)\n        external\n        view\n        returns (uint256, uint256);\n\n    /// @notice Returns the pinterestRatePerSecond for a given set of terms\n    /// @param amount The amount of the loan\n    /// @param interestBps in basis points\n    /// @param duration The duration of the loan\n    function calculateInterestPerSecond(\n        uint256 amount,\n        uint256 interestBps,\n        uint256 duration\n    ) external pure returns (uint96);\n\n    /// @notice Returns the delta between the required accumulated interest and the current accumulated interest\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    function checkSufficientInterestAccumulated(address nftContractAddress, uint256 nftId)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns whether the lender has provided sufficient terms to not be charged a term griefing premium\n    ///         Amount and duration must be equal to or greater than, and interestRatePerSecond must be less than\n    ///         or equal to the current terms or function will fail\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    /// @param amount The amount of asset offered\n    /// @param interestRatePerSecond The interest rate per second offered\n    /// @param duration The duration of the loan offered\n    function checkSufficientTerms(\n        address nftContractAddress,\n        uint256 nftId,\n        uint128 amount,\n        uint96 interestRatePerSecond,\n        uint32 duration\n    ) external view returns (bool);\n\n    /// @notice Function only callable by the NiftyApesSigLending contract\n    ///         Allows SigLending contract to execute loan directly\n    /// @param offer The details of the loan auction offer\n    /// @param lender The lender of the loan\n    /// @param borrower The borrower of the loan\n    /// @param nftId The id of the specified NFT\n    function doExecuteLoan(\n        Offer memory offer,\n        address lender,\n        address borrower,\n        uint256 nftId\n    ) external;\n\n    /// @notice Function only callable by the NiftyApesSigLending contract\n    ///         Allows SigLending contract to refinance a loan directly\n    /// @param offer The details of the loan auction offer\n    /// @param nftId The id of the specified NFT\n    /// @param nftOwner owner of the nft in the lending.sol lendingAuction\n    function doRefinanceByBorrower(\n        Offer memory offer,\n        uint256 nftId,\n        address nftOwner,\n        uint32 expectedLastUpdatedTimestamp\n    ) external;\n}\n"
    },
    "contracts/interfaces/niftyapes/offers/IOffers.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.13;\n\nimport \"./IOffersAdmin.sol\";\nimport \"./IOffersEvents.sol\";\nimport \"./IOffersStructs.sol\";\nimport \"../lending/ILendingStructs.sol\";\n\n/// @title The Offers interface for NiftyApes\n///        This interface is intended to be used for interacting with offers on the protocol\ninterface IOffers is IOffersAdmin, IOffersEvents, IOffersStructs, ILendingStructs {\n    /// @notice Returns the address for the associated lending contract\n    function lendingContractAddress() external view returns (address);\n\n    /// @notice Returns the address for the associated sigLending contract\n    function sigLendingContractAddress() external view returns (address);\n\n    /// @notice Returns the address for the associated liquidity contract\n    function liquidityContractAddress() external view returns (address);\n\n    /// @notice Returns an EIP712 standard compatible hash for a given offer\n    ///         This hash can be signed to create a valid offer.\n    /// @param offer The offer to compute the hash for\n    function getOfferHash(Offer memory offer) external view returns (bytes32);\n\n    /// @notice Returns the signer of an offer or throws an error.\n    /// @param offer The offer to use for retrieving the signer\n    /// @param signature The signature to use for retrieving the signer\n    function getOfferSigner(Offer memory offer, bytes memory signature) external returns (address);\n\n    /// @notice Returns true if a given signature has been revoked otherwise false\n    /// @param signature The signature to check\n    function getOfferSignatureStatus(bytes calldata signature) external view returns (bool status);\n\n    /// @notice Withdraw a given offer\n    ///         Calling this method allows users to withdraw a given offer by cancelling their signature on chain\n    /// @param offer The offer to withdraw\n    /// @param signature The signature of the offer\n    function withdrawOfferSignature(Offer memory offer, bytes calldata signature) external;\n\n    /// @notice Returns an offer from the on-chain offer books\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    /// @param offerHash The hash of all parameters in an offer\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\n    function getOffer(\n        address nftContractAddress,\n        uint256 nftId,\n        bytes32 offerHash,\n        bool floorTerm\n    ) external view returns (Offer memory offer);\n\n    /// @notice Creates an offer in the on chain offer book\n    /// @param offer The details of offer\n    function createOffer(Offer calldata offer) external returns (bytes32);\n\n    /// @notice Removes an offer from the on-chain offer book\n    /// @param nftContractAddress The address of the NFT collection\n    /// @param nftId The id of the specified NFT\n    /// @param offerHash The hash of all parameters in an offer\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\n    function removeOffer(\n        address nftContractAddress,\n        uint256 nftId,\n        bytes32 offerHash,\n        bool floorTerm\n    ) external;\n\n    /// @notice Can only be called by the lendingContractAddress\n    /// @param offer The details of the offer\n    /// @param signature The signature of the offer\n    function markSignatureUsed(Offer memory offer, bytes memory signature) external;\n\n    /// @notice Checks that a signature has a length of 65 bytes\n    /// @param signature The signature of the offer\n    function requireSignature65(bytes memory signature) external pure;\n\n    /// @notice Checks that a signature has not been cancelled/withdrawn on chain\n    /// @param signature The signature of the offer\n    function requireAvailableSignature(bytes memory signature) external view;\n\n    /// @notice Checks that an offer has a minimum duration\n    /// @param offer The details of the offer\n    function requireMinimumDuration(Offer memory offer) external pure;\n\n    /// @notice Checks that an offer is not a floor term offer\n    /// @param offer The details of the offer\n    function requireNoFloorTerms(Offer memory offer) external pure;\n}\n"
    },
    "contracts/interfaces/sanctions/SanctionsList.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface SanctionsList {\n    function isSanctioned(address addr) external view returns (bool);\n}"
    },
    "contracts/lib/Math.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.13;\n\n/// @title A reimplementation of compounds math library\n///        Currently we only need `divScalarByExpTruncate` which is implemented inefficiently and complex within\n///        the compound math library, this is a simpler reimplementation.\nlibrary Math {\n    uint256 constant expScale = 1e18;\n\n    // See compound Exponential#divScalarByExpTruncate\n    function divScalarByExpTruncate(uint256 scalar, uint256 exponent)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 numerator = scalar * expScale;\n        uint256 scaledNumerator = numerator * expScale;\n        uint256 fraction = scaledNumerator / exponent;\n        return fraction / expScale;\n    }\n\n    /// see compound Exponential#mulScalarTruncate\n    function mulScalarTruncate(uint256 scalar, uint256 exponent) internal pure returns (uint256) {\n        uint256 product = exponent * scalar;\n        return product / expScale;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/niftyapes/liquidity/ILiquidityAdmin.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @title NiftyApes interface for the admin role.\ninterface ILiquidityAdmin {\n    /// @notice Allows the owner of the contract to add an asset to the allow list\n    ///         All assets on NiftyApes have to have a mapping present from asset to cAsset,\n    ///         The asset is a token like DAI while the cAsset is the corresponding token in compound cDAI.\n    function setCAssetAddress(address asset, address cAsset) external;\n\n    /// @notice Updates the maximum cAsset balance that the contracts will allow\n    ///         This allows a guarded launch with NiftyApes limiting the amount of liquidity\n    ///         in the protocol.\n    function setMaxCAssetBalance(address cAsset, uint256 maxBalance) external;\n\n    /// @notice Updates the associated lending contract address\n    function updateLendingContractAddress(address newLendingContractAddress) external;\n\n    /// @notice Updates the bps of revenue sent to the Regen Collective\n    ///         Fees are denominated in basis points, parts of 10_000\n    function updateRegenCollectiveBpsOfRevenue(uint16 newRegenCollectiveBpsOfRevenue) external;\n\n    /// @notice Updates the address for the Regen Collective\n    function updateRegenCollectiveAddress(address newRegenCollectiveAddress) external;\n\n    /// @notice Pauses sanctions checks\n    function pauseSanctions() external;\n\n    /// @notice Unpauses sanctions checks\n    function unpauseSanctions() external;\n\n    /// @notice Pauses all interactions with the contract.\n    ///         This is intended to be used as an emergency measure to avoid loosing funds.\n    function pause() external;\n\n    /// @notice Unpauses all interactions with the contract.\n    function unpause() external;\n}\n"
    },
    "contracts/interfaces/niftyapes/liquidity/ILiquidityEvents.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @title Events emitted for changes in liquidity\ninterface ILiquidityEvents {\n    /// @notice Emitted when a liquidity provider adds a token to the protocol.\n    /// @param liquidityProvider The address of the liquidity provider adding funds\n    /// @param asset The address of the token being added\n    /// @param tokenAmount The amount of tokens that have been added to be protocol\n    /// @param cTokenAmount The amount of compound tokens that resulted from this deposit\n    event Erc20Supplied(\n        address indexed liquidityProvider,\n        address indexed asset,\n        uint256 tokenAmount,\n        uint256 cTokenAmount\n    );\n\n    /// @notice Emitted when a liquidity provider adds a compound token to the protocol.\n    ///         If users have already deposited funds into compound they can directly supply compound tokens\n    ///         to nifty apes\n    /// @param liquidityProvider The address of the liquidity provider adding funds\n    /// @param cAsset The address of the compound token being added\n    /// @param cTokenAmount The amount of compound tokens that resulted from this deposit\n    event CErc20Supplied(\n        address indexed liquidityProvider,\n        address indexed cAsset,\n        uint256 cTokenAmount\n    );\n\n    /// @notice Emitted when a liquidity provider removes a token from the protocol.\n    /// @param liquidityProvider The address of the liquidity provider removing funds\n    /// @param asset The address of the token being removed\n    /// @param tokenAmount The amount of tokens that have been removed from be protocol\n    /// @param cTokenAmount The amount of compound tokens that have been removed\n    event Erc20Withdrawn(\n        address indexed liquidityProvider,\n        address indexed asset,\n        uint256 tokenAmount,\n        uint256 cTokenAmount\n    );\n\n    /// @notice Emitted when a liquidity provider removes a compound token from the protocol.\n    /// @param liquidityProvider The address of the liquidity provider removing funds\n    /// @param cAsset The address of the compound token being removed\n    /// @param cTokenAmount The amount of compound tokens being removed\n    event CErc20Withdrawn(\n        address indexed liquidityProvider,\n        address indexed cAsset,\n        uint256 cTokenAmount\n    );\n\n    /// @notice Emitted when a liquidity provider adds ethereum to the protocol\n    /// @param liquidityProvider The address of the liquidity provider adding funds\n    /// @param amount The amount of tokens that have been added to be protocol\n    /// @param cTokenAmount The amount of compound tokens that resulted from this deposit\n    event EthSupplied(address indexed liquidityProvider, uint256 amount, uint256 cTokenAmount);\n\n    /// @notice Emitted when a liquidity provider removes ethereum from the protocol\n    /// @param liquidityProvider The address of the liquidity provider removing funds\n    /// @param amount The amount of ethereum that have been removed from be protocol\n    /// @param cTokenAmount The amount of compound tokens that got removed\n    event EthWithdrawn(address indexed liquidityProvider, uint256 amount, uint256 cTokenAmount);\n\n    /// @notice Emitted when the owner withdraws from the protocol.\n    /// @param liquidityProvider The address of the liquidity provider removing funds\n    /// @param asset The address of the token being removed\n    /// @param tokenAmount The amount of tokens that have been removed from be protocol\n    /// @param cTokenAmount The amount of compound tokens that have been removed\n    event PercentForRegen(\n        address indexed liquidityProvider,\n        address indexed asset,\n        uint256 tokenAmount,\n        uint256 cTokenAmount\n    );\n\n    /// @notice Emitted when a new asset and its corresponding cAsset are added to nifty apes allow list\n    /// @param asset The asset being added to the allow list\n    /// @param cAsset The address of the corresponding compound token\n    event AssetToCAssetSet(address asset, address cAsset);\n\n    /// @notice Emitted when the bps of revenue sent to the Regen Collective is changed\n    /// @param oldRegenCollectiveBpsOfRevenue The old basis points denominated in parts of 10_000\n    /// @param newRegenCollectiveBpsOfRevenue The new basis points denominated in parts of 10_000\n    event RegenCollectiveBpsOfRevenueUpdated(\n        uint16 oldRegenCollectiveBpsOfRevenue,\n        uint16 newRegenCollectiveBpsOfRevenue\n    );\n\n    /// @notice Emitted when the address for the Regen Collective is changed\n    /// @param newRegenCollectiveAddress The new address of the Regen Collective\n    event RegenCollectiveAddressUpdated(address newRegenCollectiveAddress);\n\n    /// @notice Emitted when the associated lending contract address is changed\n    /// @param oldLendingContractAddress The old lending contract address\n    /// @param newLendingContractAddress The new lending contract address\n    event LiquidityXLendingContractAddressUpdated(\n        address oldLendingContractAddress,\n        address newLendingContractAddress\n    );\n\n    /// @notice Emitted when sanctions checks are paused\n    event LiquiditySanctionsPaused();\n\n    /// @notice Emitted when sanctions checks are unpaused\n    event LiquiditySanctionsUnpaused();\n}\n"
    },
    "contracts/interfaces/niftyapes/lending/ILendingAdmin.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ILendingEvents.sol\";\n\n/// @title NiftyApes interface for the admin role.\ninterface ILendingAdmin {\n    /// @notice Updates the fee that computes protocol interest due on loan payback\n    ///         Interest is charged per second on a loan.\n    function updateProtocolInterestBps(uint16 newProtocolInterestBps) external;\n\n    /// @notice Updates the bps premium for refinancing a loan that the new lender has to pay\n    ///         Fees are denominated in basis points, parts of 10_000\n    function updateOriginationPremiumLenderBps(uint16 newOriginationPremiumBps) external;\n\n    /// @notice Updates the bps premium for refinancing a loan before the current lender has earned the equivalent amount of interest\n    ///         Fees are denominated in basis points, parts of 10_000\n    function updateGasGriefingPremiumBps(uint16 newGasGriefingPremiumBps) external;\n\n    /// @notice Updates the bps premium paid to the protocol for refinancing a loan with terms that do not improve the cumulative terms of the loan by the equivalent basis points\n    ///         Fees are denominated in basis points, parts of 10_000\n    function updateTermGriefingPremiumBps(uint16 newTermGriefingPremiumBps) external;\n\n    /// @notice Updates the bps premium paid to the protocol for refinancing a loan within 1 hour of default\n    ///         Fees are denominated in basis points, parts of 10_000\n    function updateDefaultRefinancePremiumBps(uint16 newDefaultRefinancePremiumBps) external;\n\n    /// @notice Pauses sanctions checks\n    function pauseSanctions() external;\n\n    /// @notice Unpauses sanctions checks\n    function unpauseSanctions() external;\n\n    /// @notice Pauses all interactions with the contract.\n    ///         This is intended to be used as an emergency measure to avoid loosing funds.\n    function pause() external;\n\n    /// @notice Unpauses all interactions with the contract.\n    function unpause() external;\n}\n"
    },
    "contracts/interfaces/niftyapes/lending/ILendingEvents.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ILendingStructs.sol\";\n\n/// @title Events emitted by the lending part of the protocol.\ninterface ILendingEvents {\n    /// @notice Emitted when a new loan is executed\n    /// @param nftContractAddress The nft contract address\n    /// @param nftId The nft id\n    /// @param loanAuction The loanAuction details\n    event LoanExecuted(\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        ILendingStructs.LoanAuction loanAuction\n    );\n\n    /// @notice Emitted when a loan is refinanced\n    /// @param nftContractAddress The nft contract address\n    /// @param nftId The nft id\n    /// @param loanAuction The loanAuction details\n    event Refinance(\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        ILendingStructs.LoanAuction loanAuction\n    );\n\n    /// @notice Emitted when a loan amount is drawn\n    /// @param nftContractAddress The nft contract address\n    /// @param nftId The nft id\n    /// @param drawAmount The added amount drawn\n    /// @param loanAuction The loanAuction details\n    event AmountDrawn(\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        uint256 drawAmount,\n        ILendingStructs.LoanAuction loanAuction\n    );\n\n    /// @notice Emitted when a loan is repaid\n    /// @param nftContractAddress The nft contract address\n    /// @param nftId The nft id\n    ///  @param totalPayment The total payment amount\n    /// @param loanAuction The loanAuction details\n    event LoanRepaid(\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        uint256 totalPayment,\n        ILendingStructs.LoanAuction loanAuction\n    );\n\n    /// @notice Emitted when a loan is partially repaid\n    /// @param nftContractAddress The nft contract address\n    /// @param nftId The nft id\n    ///  @param amount The payment amount\n    /// @param loanAuction The loanAuction details\n    event PartialRepayment(\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        uint256 amount,\n        ILendingStructs.LoanAuction loanAuction\n    );\n\n    /// @notice Emitted when an asset is seized\n    /// @param nftContractAddress The nft contract address\n    /// @param nftId The nft id,\n    /// @param loanAuction The loanAuction details\n    event AssetSeized(\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        ILendingStructs.LoanAuction loanAuction\n    );\n\n    /// @notice Emitted when the protocol interest fee is updated.\n    ///         Interest is charged per second on a loan.\n    ///         This is the fee that the protocol charges for facilitating the loan\n    /// @param oldProtocolInterestBps The old value denominated in tokens per second\n    /// @param newProtocolInterestBps The new value denominated in tokens per second\n    event ProtocolInterestBpsUpdated(uint96 oldProtocolInterestBps, uint96 newProtocolInterestBps);\n\n    /// @notice Emitted when the the bps premium for refinancing a loan that the new lender has to pay is changed\n    /// @param oldOriginationPremiumBps The old basis points denominated in parts of 10_000\n    /// @param newOriginationPremiumBps The new basis points denominated in parts of 10_000\n    event OriginationPremiumBpsUpdated(\n        uint16 oldOriginationPremiumBps,\n        uint16 newOriginationPremiumBps\n    );\n\n    /// @notice Emitted when the bps premium for refinancing a loan before the current lender has earned the equivalent amount of interest has changed\n    /// @param oldGasGriefingPremiumBps The old basis points denominated in parts of 10_000\n    /// @param newGasGriefingPremiumBps The new basis points denominated in parts of 10_000\n    event GasGriefingPremiumBpsUpdated(\n        uint16 oldGasGriefingPremiumBps,\n        uint16 newGasGriefingPremiumBps\n    );\n\n    /// @notice Emitted when the bps premium paid to the protocol for refinancing a loan before the current lender has earned the equivalent amount of interest is changed\n    /// @param oldGasGriefingProtocolPremiumBps The old basis points denominated in parts of 10_000\n    /// @param newGasGriefingProtocolPremiumBps The new basis points denominated in parts of 10_000\n    event GasGriefingProtocolPremiumBpsUpdated(\n        uint16 oldGasGriefingProtocolPremiumBps,\n        uint16 newGasGriefingProtocolPremiumBps\n    );\n\n    /// @notice Emitted when the bps premium paid to the protocol for refinancing a loan with terms that do not improve the cumulative terms of the loan by the equivalent basis points is changed\n    /// @param oldTermGriefingPremiumBps The old basis points denominated in parts of 10_000\n    /// @param newTermGriefingPremiumBps The new basis points denominated in parts of 10_000\n    event TermGriefingPremiumBpsUpdated(\n        uint16 oldTermGriefingPremiumBps,\n        uint16 newTermGriefingPremiumBps\n    );\n\n    /// @notice Emitted when the bps premium paid to the protocol for refinancing a loan within 1 hour of default is changed\n    /// @param oldDefaultRefinancePremiumBps The old basis points denominated in parts of 10_000\n    /// @param newDefaultRefinancePremiumBps The new basis points denominated in parts of 10_000\n    event DefaultRefinancePremiumBpsUpdated(\n        uint16 oldDefaultRefinancePremiumBps,\n        uint16 newDefaultRefinancePremiumBps\n    );\n\n    /// @notice Emitted when sanctions checks are paused\n    event LendingSanctionsPaused();\n\n    /// @notice Emitted when sanctions checks are unpaused\n    event LendingSanctionsUnpaused();\n}\n"
    },
    "contracts/interfaces/niftyapes/lending/ILendingStructs.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ILendingStructs {\n    //timestamps are uint32, will expire in 2048\n    struct LoanAuction {\n        // SLOT 0 START\n        // The original owner of the nft.\n        // If there is an active loan on an nft, nifty apes contracts become the holder (original owner)\n        // of the underlying nft. This field tracks who to return the nft to if the loan gets repaid.\n        address nftOwner;\n        // end timestamp of loan\n        uint32 loanEndTimestamp;\n        /// Last timestamp this loan was updated\n        uint32 lastUpdatedTimestamp;\n        // Whether or not the loan can be refinanced\n        bool fixedTerms;\n        // The current lender of a loan\n        address lender;\n        // interest rate of loan in basis points\n        uint96 interestRatePerSecond;\n        // SLOT 1 START\n        // the asset in which the loan has been denominated\n        address asset;\n        // beginning timestamp of loan\n        uint32 loanBeginTimestamp;\n        // refinanceByLender was last action, enables slashing\n        bool lenderRefi;\n        // cumulative interest of varying rates paid by new lenders to buy out the loan auction\n        uint128 accumulatedLenderInterest;\n        // 32 unused bytes in slot 1\n        // SLOT 2 START\n        // cumulative interest of varying rates accrued by the protocol. Paid by lenders upon refinance, repaid by borrower at the end of the loan.\n        uint128 accumulatedPaidProtocolInterest;\n        // The maximum amount of tokens that can be drawn from this loan\n        uint128 amount;\n        // SLOT 3 START\n        // amount withdrawn by the nftOwner. This is the amount they will pay interest on, with this value as minimum\n        uint128 amountDrawn;\n        // This fee is the rate of interest per second for the protocol\n        uint96 protocolInterestRatePerSecond;\n        // 32 unused bytes in slot 3\n        // SLOT 4 START\n        uint128 slashableLenderInterest;\n        // cumulative unpaid protocol interest. Accrues per lender period of interest.\n        uint128 unpaidProtocolInterest;\n    }\n}\n"
    },
    "contracts/interfaces/niftyapes/offers/IOffersStructs.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IOffersStructs {\n    //timestamps are uint32, will expire in 2048\n    struct Offer {\n        // SLOT 0 START\n        // Offer creator\n        address creator;\n        // offer loan duration\n        uint32 duration;\n        // The expiration timestamp of the offer in a unix timestamp in seconds\n        uint32 expiration;\n        // is loan offer fixed terms or open for perpetual auction\n        bool fixedTerms;\n        // is offer for single NFT or for every NFT in a collection\n        bool floorTerm;\n        // Whether or not this offer was made by a lender or a borrower\n        bool lenderOffer;\n        // SLOT 1 START\n        // offer NFT contract address\n        address nftContractAddress;\n        // SLOT 2 START\n        // offer NFT ID\n        uint256 nftId; // ignored if floorTerm is true\n        // SLOT 3 START\n        // offer asset type\n        address asset;\n        // SLOT 4 START\n        // offer loan amount\n        uint128 amount;\n        // offer interest rate per second. (Amount * InterestRate) / MAX-BPS / Duration\n        uint96 interestRatePerSecond;\n    }\n}\n"
    },
    "contracts/interfaces/niftyapes/offers/IOffersAdmin.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @title NiftyApes interface for the admin role.\ninterface IOffersAdmin {\n    /// @notice Updates the associated lending contract address\n    function updateLendingContractAddress(address newLendingContractAddress) external;\n\n    /// @notice Updates the associated signature lending contract address\n    function updateSigLendingContractAddress(address newSigLendingContractAddress) external;\n\n    /// @notice Pauses all interactions with the contract.\n    ///         This is intended to be used as an emergency measure to avoid loosing funds.\n    function pause() external;\n\n    /// @notice Unpauses all interactions with the contract.\n    function unpause() external;\n}\n"
    },
    "contracts/interfaces/niftyapes/offers/IOffersEvents.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IOffersStructs.sol\";\n\n/// @title Events emitted by the offers part of the protocol.\ninterface IOffersEvents {\n    /// @notice Emitted when a new offer is stored on chain\n    /// @param creator The creator of the offer, this can either be a borrower or a lender (check boolean flag in the offer).\n    /// @param nftContractAddress The nft contract address\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\n    /// @param offer The offer details\n    /// @param offerHash The offer hash\n    event NewOffer(\n        address indexed creator,\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        IOffersStructs.Offer offer,\n        bytes32 offerHash\n    );\n\n    /// @notice Emitted when a offer is removed from chain\n    /// @param creator The creator of the offer, this can either be a borrower or a lender (check boolean flag in the offer).\n    /// @param nftContractAddress The nft contract address\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\n    /// @param offer The offer details\n    /// @param offerHash The offer hash\n    event OfferRemoved(\n        address indexed creator,\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        IOffersStructs.Offer offer,\n        bytes32 offerHash\n    );\n\n    /// @notice Emitted when a offer signature gets has been used\n    /// @param nftContractAddress The nft contract address\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\n    /// @param offer The offer details\n    /// @param signature The signature that has been revoked\n    event OfferSignatureUsed(\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        IOffersStructs.Offer offer,\n        bytes signature\n    );\n\n    /// @notice Emitted when the associated lending contract address is changed\n    /// @param oldLendingContractAddress The old lending contract address\n    /// @param newLendingContractAddress The new lending contract address\n    event OffersXLendingContractAddressUpdated(\n        address oldLendingContractAddress,\n        address newLendingContractAddress\n    );\n\n    /// @notice Emitted when the associated signature lending contract address is changed\n    /// @param oldSigLendingContractAddress The old lending contract address\n    /// @param newSigLendingContractAddress The new lending contract address\n    event OffersXSigLendingContractAddressUpdated(\n        address oldSigLendingContractAddress,\n        address newSigLendingContractAddress\n    );\n}\n"
    },
    "contracts/Lending.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"./interfaces/niftyapes/lending/ILending.sol\";\nimport \"./interfaces/niftyapes/liquidity/ILiquidity.sol\";\nimport \"./interfaces/niftyapes/offers/IOffers.sol\";\nimport \"./interfaces/sanctions/SanctionsList.sol\";\n\n/// @title Implementation of the ILending interface\ncontract NiftyApesLending is OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, ERC721HolderUpgradeable, ILending {\n  using AddressUpgradeable for address payable;\n\n  /// @dev Internal address used for for ETH in our mappings\n  address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n  /// @dev Internal constant address for the Chainalysis OFAC sanctions oracle\n  address private constant SANCTIONS_CONTRACT = 0x40C57923924B5c5c5455c48D93317139ADDaC8fb;\n\n  /// @notice The maximum value that any fee on the protocol can be set to.\n  ///         Fees on the protocol are denominated in parts of 10_000.\n  uint256 private constant MAX_FEE = 1_000;\n\n  /// @notice The base value for fees in the protocol.\n  uint256 private constant MAX_BPS = 10_000;\n\n  /// @dev A mapping for a NFT to a loan auction.\n  ///      The mapping has to be broken into two parts since an NFT is denominated by its address (first part)\n  ///      and its nftId (second part) in our code base.\n  mapping(address => mapping(uint256 => LoanAuction)) private _loanAuctions;\n\n  /// @inheritdoc ILending\n  address public offersContractAddress;\n\n  /// @inheritdoc ILending\n  address public liquidityContractAddress;\n\n  /// @inheritdoc ILending\n  address public sigLendingContractAddress;\n\n  /// @inheritdoc ILending\n  uint16 public protocolInterestBps;\n\n  /// @inheritdoc ILending\n  uint16 public originationPremiumBps;\n\n  /// @inheritdoc ILending\n  uint16 public gasGriefingPremiumBps;\n\n  /// @inheritdoc ILending\n  uint16 public termGriefingPremiumBps;\n\n  /// @inheritdoc ILending\n  uint16 public defaultRefinancePremiumBps;\n\n  /// @dev The status of sanctions checks. Can be set to false if oracle becomes malicious.\n  bool internal _sanctionsPause;\n\n  /// @dev This empty reserved space is put in place to allow future versions to add new\n  /// variables without shifting storage.\n  uint256[500] private __gap;\n\n  /// @notice The initializer for the NiftyApes protocol.\n  ///         Nifty Apes is intended to be deployed behind a proxy amd thus needs to initialize\n  ///         its state outsize of a constructor.\n  function initialize(\n    address newLiquidityContractAddress,\n    address newOffersContractAddress,\n    address newSigLendingContractAddress\n  ) public initializer {\n    protocolInterestBps = 0;\n    originationPremiumBps = 50;\n    gasGriefingPremiumBps = 25;\n    termGriefingPremiumBps = 25;\n    defaultRefinancePremiumBps = 25;\n\n    liquidityContractAddress = newLiquidityContractAddress;\n    offersContractAddress = newOffersContractAddress;\n    sigLendingContractAddress = newSigLendingContractAddress;\n\n    OwnableUpgradeable.__Ownable_init();\n    PausableUpgradeable.__Pausable_init();\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\n  }\n\n  /// @inheritdoc ILendingAdmin\n  function updateProtocolInterestBps(uint16 newProtocolInterestBps) external onlyOwner {\n    _requireMaxFee(newProtocolInterestBps);\n    emit ProtocolInterestBpsUpdated(protocolInterestBps, newProtocolInterestBps);\n    protocolInterestBps = newProtocolInterestBps;\n  }\n\n  /// @inheritdoc ILendingAdmin\n  function updateOriginationPremiumLenderBps(uint16 newOriginationPremiumBps) external onlyOwner {\n    _requireMaxFee(newOriginationPremiumBps);\n    emit OriginationPremiumBpsUpdated(originationPremiumBps, newOriginationPremiumBps);\n    originationPremiumBps = newOriginationPremiumBps;\n  }\n\n  /// @inheritdoc ILendingAdmin\n  function updateGasGriefingPremiumBps(uint16 newGasGriefingPremiumBps) external onlyOwner {\n    _requireMaxFee(newGasGriefingPremiumBps);\n    emit GasGriefingPremiumBpsUpdated(gasGriefingPremiumBps, newGasGriefingPremiumBps);\n    gasGriefingPremiumBps = newGasGriefingPremiumBps;\n  }\n\n  /// @inheritdoc ILendingAdmin\n  function updateDefaultRefinancePremiumBps(uint16 newDefaultRefinancePremiumBps) external onlyOwner {\n    _requireMaxFee(newDefaultRefinancePremiumBps);\n    emit DefaultRefinancePremiumBpsUpdated(defaultRefinancePremiumBps, newDefaultRefinancePremiumBps);\n    defaultRefinancePremiumBps = newDefaultRefinancePremiumBps;\n  }\n\n  /// @inheritdoc ILendingAdmin\n  function updateTermGriefingPremiumBps(uint16 newTermGriefingPremiumBps) external onlyOwner {\n    _requireMaxFee(newTermGriefingPremiumBps);\n    emit TermGriefingPremiumBpsUpdated(termGriefingPremiumBps, newTermGriefingPremiumBps);\n    termGriefingPremiumBps = newTermGriefingPremiumBps;\n  }\n\n  /// @inheritdoc ILendingAdmin\n  function pauseSanctions() external onlyOwner {\n    _sanctionsPause = true;\n    emit LendingSanctionsPaused();\n  }\n\n  /// @inheritdoc ILendingAdmin\n  function unpauseSanctions() external onlyOwner {\n    _sanctionsPause = false;\n    emit LendingSanctionsUnpaused();\n  }\n\n  /// @inheritdoc ILendingAdmin\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  /// @inheritdoc ILendingAdmin\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n\n  /// @inheritdoc ILending\n  function getLoanAuction(address nftContractAddress, uint256 nftId) external view returns (LoanAuction memory) {\n    return _getLoanAuctionInternal(nftContractAddress, nftId);\n  }\n\n  function _getLoanAuctionInternal(address nftContractAddress, uint256 nftId) internal view returns (LoanAuction storage) {\n    return _loanAuctions[nftContractAddress][nftId];\n  }\n\n  /// @inheritdoc ILending\n  function executeLoanByBorrower(\n    address nftContractAddress,\n    uint256 nftId,\n    bytes32 offerHash,\n    bool floorTerm\n  ) external payable whenNotPaused nonReentrant {\n    Offer memory offer = IOffers(offersContractAddress).getOffer(nftContractAddress, nftId, offerHash, floorTerm);\n\n    _requireLenderOffer(offer);\n\n    // Remove the offer from storage, saving gas\n    // We can only do this for non floor offers since\n    // a floor offer can be used for multiple nfts\n    if (!offer.floorTerm) {\n      _requireMatchingNftId(offer, nftId);\n      IOffers(offersContractAddress).removeOffer(nftContractAddress, nftId, offerHash, floorTerm);\n    }\n    _doExecuteLoan(offer, offer.creator, msg.sender, nftId);\n  }\n\n  /// @inheritdoc ILending\n  function executeLoanByLender(\n    address nftContractAddress,\n    uint256 nftId,\n    bytes32 offerHash,\n    bool floorTerm\n  ) public payable whenNotPaused nonReentrant {\n    Offer memory offer = IOffers(offersContractAddress).getOffer(nftContractAddress, nftId, offerHash, floorTerm);\n\n    _requireBorrowerOffer(offer);\n    _requireNoFloorTerms(offer);\n\n    IOffers(offersContractAddress).removeOffer(nftContractAddress, nftId, offerHash, floorTerm);\n\n    _doExecuteLoan(offer, msg.sender, offer.creator, nftId);\n  }\n\n  function doExecuteLoan(\n    Offer memory offer,\n    address lender,\n    address borrower,\n    uint256 nftId\n  ) external whenNotPaused nonReentrant {\n    _requireSigLendingContract();\n    _doExecuteLoan(offer, lender, borrower, nftId);\n  }\n\n  function _doExecuteLoan(\n    Offer memory offer,\n    address lender,\n    address borrower,\n    uint256 nftId\n  ) internal {\n    _requireIsNotSanctioned(lender);\n    _requireIsNotSanctioned(borrower);\n    // requireOfferPresent\n    require(offer.asset != address(0), \"00004\");\n\n    address cAsset = ILiquidity(liquidityContractAddress).getCAsset(offer.asset);\n\n    LoanAuction storage loanAuction = _getLoanAuctionInternal(offer.nftContractAddress, nftId);\n\n    // requireNoOpenLoan\n    require(loanAuction.lastUpdatedTimestamp == 0, \"00006\");\n    _requireOfferNotExpired(offer);\n    _requireMinDurationForOffer(offer);\n    // require721Owner\n    require(IERC721Upgradeable(offer.nftContractAddress).ownerOf(nftId) == borrower, \"00018\");\n\n    _createLoan(loanAuction, offer, lender, borrower);\n\n    _transferNft(offer.nftContractAddress, nftId, borrower, address(this));\n\n    uint256 cTokensBurned = ILiquidity(liquidityContractAddress).burnCErc20(offer.asset, offer.amount);\n    ILiquidity(liquidityContractAddress).withdrawCBalance(lender, cAsset, cTokensBurned);\n\n    ILiquidity(liquidityContractAddress).sendValue(offer.asset, offer.amount, borrower);\n\n    emit LoanExecuted(offer.nftContractAddress, nftId, loanAuction);\n  }\n\n  function refinanceByBorrower(\n    address nftContractAddress,\n    uint256 nftId,\n    bool floorTerm,\n    bytes32 offerHash,\n    uint32 expectedLastUpdatedTimestamp\n  ) external whenNotPaused nonReentrant {\n    Offer memory offer = IOffers(offersContractAddress).getOffer(nftContractAddress, nftId, offerHash, floorTerm);\n\n    if (!offer.floorTerm) {\n      _requireMatchingNftId(offer, nftId);\n      // Only removing the offer if its not a floor term offer\n      // Floor term offers can be used for multiple nfts\n      IOffers(offersContractAddress).removeOffer(nftContractAddress, nftId, offerHash, floorTerm);\n    }\n\n    _doRefinanceByBorrower(offer, nftId, msg.sender, expectedLastUpdatedTimestamp);\n  }\n\n  function doRefinanceByBorrower(\n    Offer memory offer,\n    uint256 nftId,\n    address nftOwner,\n    uint32 expectedLastUpdatedTimestamp\n  ) external whenNotPaused nonReentrant {\n    _requireSigLendingContract();\n    _doRefinanceByBorrower(offer, nftId, nftOwner, expectedLastUpdatedTimestamp);\n  }\n\n  function _doRefinanceByBorrower(\n    Offer memory offer,\n    uint256 nftId,\n    address nftOwner,\n    uint32 expectedLastUpdatedTimestamp\n  ) internal {\n    LoanAuction storage loanAuction = _getLoanAuctionInternal(offer.nftContractAddress, nftId);\n\n    _requireIsNotSanctioned(nftOwner);\n    _requireIsNotSanctioned(offer.creator);\n    _requireMatchingAsset(offer.asset, loanAuction.asset);\n    _requireNftOwner(loanAuction, nftOwner);\n    _requireNoFixedTerm(loanAuction);\n    // requireExpectedTermsAreActive\n    if (expectedLastUpdatedTimestamp != 0) {\n      require(loanAuction.lastUpdatedTimestamp == expectedLastUpdatedTimestamp, \"00026\");\n    }\n    _requireOpenLoan(loanAuction);\n    _requireLoanNotExpired(loanAuction);\n    _requireOfferNotExpired(offer);\n    _requireLenderOffer(offer);\n    _requireMinDurationForOffer(offer);\n\n    address cAsset = ILiquidity(liquidityContractAddress).getCAsset(offer.asset);\n\n    uint256 interestThresholdDelta = _checkSufficientInterestAccumulated(loanAuction);\n\n    if (interestThresholdDelta > 0) {\n      loanAuction.accumulatedLenderInterest += SafeCastUpgradeable.toUint128(interestThresholdDelta);\n    }\n\n    _updateInterest(loanAuction);\n\n    uint256 toLenderUnderlying = loanAuction.amountDrawn +\n      loanAuction.accumulatedLenderInterest +\n      loanAuction.slashableLenderInterest +\n      loanAuction.accumulatedPaidProtocolInterest;\n\n    uint256 toProtocolUnderlying = loanAuction.unpaidProtocolInterest;\n\n    require(offer.amount >= toLenderUnderlying + toProtocolUnderlying, \"00005\");\n\n    uint256 toLenderCToken = ILiquidity(liquidityContractAddress).assetAmountToCAssetAmount(offer.asset, toLenderUnderlying);\n\n    uint256 toProtocolCToken = ILiquidity(liquidityContractAddress).assetAmountToCAssetAmount(offer.asset, toProtocolUnderlying);\n\n    ILiquidity(liquidityContractAddress).withdrawCBalance(offer.creator, cAsset, toLenderCToken + toProtocolCToken);\n    ILiquidity(liquidityContractAddress).addToCAssetBalance(loanAuction.lender, cAsset, toLenderCToken);\n    ILiquidity(liquidityContractAddress).addToCAssetBalance(owner(), cAsset, toProtocolCToken);\n\n    uint128 currentAmountDrawn = loanAuction.amountDrawn;\n\n    // update Loan state\n    if (loanAuction.lenderRefi) {\n      loanAuction.lenderRefi = false;\n    }\n    loanAuction.lender = offer.creator;\n    loanAuction.amount = offer.amount;\n    loanAuction.interestRatePerSecond = offer.interestRatePerSecond;\n    loanAuction.loanEndTimestamp = loanAuction.loanBeginTimestamp + offer.duration;\n    loanAuction.amountDrawn = SafeCastUpgradeable.toUint128(toLenderUnderlying + toProtocolUnderlying);\n    loanAuction.accumulatedLenderInterest = 0;\n    loanAuction.accumulatedPaidProtocolInterest = 0;\n    loanAuction.unpaidProtocolInterest = 0;\n    if (offer.fixedTerms) {\n      loanAuction.fixedTerms = offer.fixedTerms;\n    }\n    if (loanAuction.slashableLenderInterest > 0) {\n      loanAuction.slashableLenderInterest = 0;\n    }\n\n    emit Refinance(offer.nftContractAddress, nftId, loanAuction);\n\n    emit AmountDrawn(offer.nftContractAddress, nftId, loanAuction.amountDrawn - currentAmountDrawn, loanAuction);\n  }\n\n  /// @inheritdoc ILending\n  function refinanceByLender(Offer memory offer, uint32 expectedLastUpdatedTimestamp) external whenNotPaused nonReentrant {\n    LoanAuction storage loanAuction = _getLoanAuctionInternal(offer.nftContractAddress, offer.nftId);\n\n    _requireIsNotSanctioned(msg.sender);\n    _requireOpenLoan(loanAuction);\n    // requireExpectedTermsAreActive\n    if (expectedLastUpdatedTimestamp != 0) {\n      require(loanAuction.lastUpdatedTimestamp == expectedLastUpdatedTimestamp, \"00026\");\n    }\n    _requireOfferCreator(offer, msg.sender);\n    _requireLenderOffer(offer);\n    _requireLoanNotExpired(loanAuction);\n    _requireOfferNotExpired(offer);\n    _requireOfferParity(loanAuction, offer);\n    _requireNoFixedTerm(loanAuction);\n    _requireNoFloorTerms(offer);\n    _requireMatchingAsset(offer.asset, loanAuction.asset);\n    // requireNoFixTermOffer\n    require(!offer.fixedTerms, \"00016\");\n\n    address cAsset = ILiquidity(liquidityContractAddress).getCAsset(offer.asset);\n\n    // check how much, if any, gasGriefing premium should be applied\n    uint256 interestThresholdDelta = _checkSufficientInterestAccumulated(loanAuction);\n\n    // check whether a termGriefing premium should apply\n    bool sufficientTerms = _checkSufficientTerms(loanAuction, offer.amount, offer.interestRatePerSecond, offer.duration);\n\n    _updateInterest(loanAuction);\n\n    // set lenderRefi to true to signify the last action to occur in the loan was a lenderRefinance\n    loanAuction.lenderRefi = true;\n\n    uint256 protocolInterestAndPremium;\n    uint256 protocolPremiumInCtokens;\n\n    if (!sufficientTerms) {\n      protocolInterestAndPremium += (uint256(loanAuction.amountDrawn) * termGriefingPremiumBps) / MAX_BPS;\n    }\n\n    // update LoanAuction struct\n    loanAuction.amount = offer.amount;\n    loanAuction.interestRatePerSecond = offer.interestRatePerSecond;\n    loanAuction.loanEndTimestamp = loanAuction.loanBeginTimestamp + offer.duration;\n\n    if (loanAuction.lender == offer.creator) {\n      // If current lender is refinancing the loan they do not need to pay any fees or buy themselves out.\n      // require prospective lender has sufficient available balance to refinance loan\n      uint256 additionalTokens = ILiquidity(liquidityContractAddress).assetAmountToCAssetAmount(offer.asset, offer.amount - loanAuction.amountDrawn);\n\n      // This value is only a termGriefing if applicable\n      protocolPremiumInCtokens = ILiquidity(liquidityContractAddress).assetAmountToCAssetAmount(offer.asset, protocolInterestAndPremium);\n\n      _requireSufficientBalance(offer.creator, cAsset, additionalTokens + protocolPremiumInCtokens);\n\n      ILiquidity(liquidityContractAddress).withdrawCBalance(offer.creator, cAsset, protocolPremiumInCtokens);\n      ILiquidity(liquidityContractAddress).addToCAssetBalance(owner(), cAsset, protocolPremiumInCtokens);\n    } else {\n      // If refinance is done by a new lender and refinacneByLender was the last action to occur, add slashableInterest to accumulated interest\n      if (loanAuction.slashableLenderInterest > 0) {\n        loanAuction.accumulatedLenderInterest += loanAuction.slashableLenderInterest;\n        loanAuction.slashableLenderInterest = 0;\n      }\n      // calculate the value to pay out to the current lender, this includes the protocolInterest, which is paid out each refinance,\n      // and reimbursed by the borrower at the end of the loan.\n      // this value may double count the currentProtocolInterest, it is paid to the current lender here and paid out to the protocol  on ln 548\n      uint256 interestAndPremiumOwedToCurrentLender = uint256(loanAuction.accumulatedLenderInterest) +\n        loanAuction.accumulatedPaidProtocolInterest +\n        ((uint256(loanAuction.amountDrawn) * originationPremiumBps) / MAX_BPS);\n\n      // add protocolInterest\n      protocolInterestAndPremium += loanAuction.unpaidProtocolInterest;\n\n      // add gasGriefing premium\n      if (interestThresholdDelta > 0) {\n        interestAndPremiumOwedToCurrentLender += interestThresholdDelta;\n      }\n\n      // add default premium\n      if (_currentTimestamp32() > loanAuction.loanEndTimestamp - 1 hours) {\n        protocolInterestAndPremium += (uint256(loanAuction.amountDrawn) * defaultRefinancePremiumBps) / MAX_BPS;\n      }\n\n      uint256 fullCTokenAmountRequired = ILiquidity(liquidityContractAddress).assetAmountToCAssetAmount(\n        offer.asset,\n        interestAndPremiumOwedToCurrentLender + protocolInterestAndPremium + loanAuction.amount\n      );\n\n      uint256 fullCTokenAmountToWithdraw = ILiquidity(liquidityContractAddress).assetAmountToCAssetAmount(\n        offer.asset,\n        interestAndPremiumOwedToCurrentLender + protocolInterestAndPremium + loanAuction.amountDrawn\n      );\n\n      // require prospective lender has sufficient available balance to refinance loan\n      _requireSufficientBalance(offer.creator, cAsset, fullCTokenAmountRequired);\n\n      protocolPremiumInCtokens = ILiquidity(liquidityContractAddress).assetAmountToCAssetAmount(offer.asset, protocolInterestAndPremium);\n\n      address currentlender = loanAuction.lender;\n\n      // update LoanAuction lender\n      loanAuction.lender = offer.creator;\n\n      ILiquidity(liquidityContractAddress).withdrawCBalance(offer.creator, cAsset, fullCTokenAmountToWithdraw);\n\n      ILiquidity(liquidityContractAddress).addToCAssetBalance(currentlender, cAsset, (fullCTokenAmountToWithdraw - protocolPremiumInCtokens));\n\n      ILiquidity(liquidityContractAddress).addToCAssetBalance(owner(), cAsset, protocolPremiumInCtokens);\n\n      loanAuction.accumulatedPaidProtocolInterest += loanAuction.unpaidProtocolInterest;\n      loanAuction.unpaidProtocolInterest = 0;\n    }\n\n    emit Refinance(offer.nftContractAddress, offer.nftId, loanAuction);\n  }\n\n  /// @inheritdoc ILending\n  function drawLoanAmount(\n    address nftContractAddress,\n    uint256 nftId,\n    uint256 drawAmount\n  ) external whenNotPaused nonReentrant {\n    LoanAuction storage loanAuction = _getLoanAuctionInternal(nftContractAddress, nftId);\n\n    _requireIsNotSanctioned(msg.sender);\n    _requireOpenLoan(loanAuction);\n    _requireNftOwner(loanAuction, msg.sender);\n    // requireDrawableAmount\n    require((drawAmount + loanAuction.amountDrawn) <= loanAuction.amount, \"00020\");\n    _requireLoanNotExpired(loanAuction);\n\n    address cAsset = ILiquidity(liquidityContractAddress).getCAsset(loanAuction.asset);\n\n    _updateInterest(loanAuction);\n\n    uint256 slashedDrawAmount = _slashUnsupportedAmount(loanAuction, drawAmount, cAsset);\n\n    if (slashedDrawAmount != 0) {\n      uint256 currentAmountDrawn = loanAuction.amountDrawn;\n      loanAuction.amountDrawn += SafeCastUpgradeable.toUint128(slashedDrawAmount);\n\n      uint32 duration = (loanAuction.loanEndTimestamp - loanAuction.loanBeginTimestamp);\n\n      if (loanAuction.interestRatePerSecond != 0) {\n        uint256 interestBps = _calculateInterestBps(currentAmountDrawn, loanAuction.interestRatePerSecond, duration);\n        loanAuction.interestRatePerSecond = calculateInterestPerSecond(loanAuction.amountDrawn, interestBps, duration);\n      }\n\n      if (loanAuction.protocolInterestRatePerSecond != 0) {\n        loanAuction.protocolInterestRatePerSecond = calculateInterestPerSecond(loanAuction.amountDrawn, protocolInterestBps, duration);\n      }\n\n      uint256 cTokensBurnt = ILiquidity(liquidityContractAddress).burnCErc20(loanAuction.asset, slashedDrawAmount);\n\n      ILiquidity(liquidityContractAddress).withdrawCBalance(loanAuction.lender, cAsset, cTokensBurnt);\n\n      ILiquidity(liquidityContractAddress).sendValue(loanAuction.asset, slashedDrawAmount, loanAuction.nftOwner);\n    }\n\n    emit AmountDrawn(nftContractAddress, nftId, slashedDrawAmount, loanAuction);\n  }\n\n  /// @inheritdoc ILending\n  function repayLoan(address nftContractAddress, uint256 nftId) external payable override whenNotPaused nonReentrant {\n    _repayLoanAmount(nftContractAddress, nftId, true, 0, true);\n  }\n\n  /// @inheritdoc ILending\n  function repayLoanForAccount(\n    address nftContractAddress,\n    uint256 nftId,\n    uint32 expectedLoanBeginTimestamp\n  ) external payable override whenNotPaused nonReentrant {\n    LoanAuction memory loanAuction = _getLoanAuctionInternal(nftContractAddress, nftId);\n    // requireExpectedLoanIsActive\n    require(loanAuction.loanBeginTimestamp == expectedLoanBeginTimestamp, \"00027\");\n\n    _repayLoanAmount(nftContractAddress, nftId, true, 0, false);\n  }\n\n  /// @inheritdoc ILending\n  function partialRepayLoan(\n    address nftContractAddress,\n    uint256 nftId,\n    uint256 amount\n  ) external payable whenNotPaused nonReentrant {\n    _repayLoanAmount(nftContractAddress, nftId, false, amount, true);\n  }\n\n  function _repayLoanAmount(\n    address nftContractAddress,\n    uint256 nftId,\n    bool repayFull,\n    uint256 paymentAmount,\n    bool checkMsgSender\n  ) internal {\n    LoanAuction storage loanAuction = _getLoanAuctionInternal(nftContractAddress, nftId);\n\n    _requireIsNotSanctioned(msg.sender);\n    _requireOpenLoan(loanAuction);\n\n    if (checkMsgSender) {\n      require(msg.sender == loanAuction.nftOwner, \"00028\");\n    }\n\n    _updateInterest(loanAuction);\n\n    if (repayFull) {\n      paymentAmount =\n        uint256(loanAuction.accumulatedLenderInterest) +\n        loanAuction.accumulatedPaidProtocolInterest +\n        loanAuction.unpaidProtocolInterest +\n        loanAuction.slashableLenderInterest +\n        loanAuction.amountDrawn;\n    } else {\n      require(paymentAmount < loanAuction.amountDrawn, \"00029\");\n      _requireLoanNotExpired(loanAuction);\n    }\n    if (loanAuction.asset == ETH_ADDRESS) {\n      require(msg.value >= paymentAmount, \"00030\");\n      // If the caller has overpaid we send the extra ETH back\n      if (msg.value > paymentAmount) {\n        unchecked {\n          payable(msg.sender).sendValue(msg.value - paymentAmount);\n        }\n      }\n    }\n\n    uint256 cTokensMinted = _handleLoanPayment(loanAuction.asset, paymentAmount);\n\n    address cAsset = ILiquidity(liquidityContractAddress).getCAsset(loanAuction.asset);\n\n    _payoutCTokenBalances(loanAuction, cAsset, cTokensMinted, paymentAmount, repayFull);\n\n    if (repayFull) {\n      _transferNft(nftContractAddress, nftId, address(this), loanAuction.nftOwner);\n\n      emit LoanRepaid(nftContractAddress, nftId, paymentAmount, loanAuction);\n\n      delete _loanAuctions[nftContractAddress][nftId];\n    } else {\n      if (loanAuction.lenderRefi) {\n        loanAuction.lenderRefi = false;\n        if (loanAuction.slashableLenderInterest > 0) {\n          loanAuction.accumulatedLenderInterest += loanAuction.slashableLenderInterest;\n          loanAuction.slashableLenderInterest = 0;\n        }\n      }\n      uint256 currentAmountDrawn = loanAuction.amountDrawn;\n      loanAuction.amountDrawn -= SafeCastUpgradeable.toUint128(paymentAmount);\n\n      uint32 duration = (loanAuction.loanEndTimestamp - loanAuction.loanBeginTimestamp);\n\n      if (loanAuction.interestRatePerSecond != 0) {\n        uint256 interestBps = _calculateInterestBps(currentAmountDrawn, loanAuction.interestRatePerSecond, duration);\n        loanAuction.interestRatePerSecond = calculateInterestPerSecond(loanAuction.amountDrawn, interestBps, duration);\n      }\n\n      if (loanAuction.protocolInterestRatePerSecond != 0) {\n        loanAuction.protocolInterestRatePerSecond = calculateInterestPerSecond(loanAuction.amountDrawn, protocolInterestBps, duration);\n      }\n\n      emit PartialRepayment(nftContractAddress, nftId, paymentAmount, loanAuction);\n    }\n  }\n\n  /// @inheritdoc ILending\n  function seizeAsset(address nftContractAddress, uint256 nftId) external whenNotPaused nonReentrant {\n    LoanAuction storage loanAuction = _getLoanAuctionInternal(nftContractAddress, nftId);\n    ILiquidity(liquidityContractAddress).getCAsset(loanAuction.asset); // Ensure asset mapping exists\n\n    _requireOpenLoan(loanAuction);\n    // requireLoanExpired\n    require(_currentTimestamp32() >= loanAuction.loanEndTimestamp, \"00008\");\n\n    address currentLender = loanAuction.lender;\n\n    delete _loanAuctions[nftContractAddress][nftId];\n\n    _transferNft(nftContractAddress, nftId, address(this), currentLender);\n\n    emit AssetSeized(nftContractAddress, nftId, loanAuction);\n  }\n\n  function _slashUnsupportedAmount(\n    LoanAuction storage loanAuction,\n    uint256 drawAmount,\n    address cAsset\n  ) internal returns (uint256) {\n    if (loanAuction.lenderRefi) {\n      loanAuction.lenderRefi = false;\n\n      uint256 lenderBalance = ILiquidity(liquidityContractAddress).getCAssetBalance(loanAuction.lender, cAsset);\n\n      uint256 drawTokens = ILiquidity(liquidityContractAddress).assetAmountToCAssetAmount(loanAuction.asset, drawAmount);\n\n      if (lenderBalance < drawTokens) {\n        drawAmount = ILiquidity(liquidityContractAddress).cAssetAmountToAssetAmount(cAsset, lenderBalance);\n\n        // This eliminates all accumulated interest for this lender on the loan\n        loanAuction.slashableLenderInterest = 0;\n\n        loanAuction.amount = SafeCastUpgradeable.toUint128(loanAuction.amountDrawn + drawAmount);\n      } else {\n        if (loanAuction.slashableLenderInterest > 0) {\n          loanAuction.accumulatedLenderInterest += loanAuction.slashableLenderInterest;\n          loanAuction.slashableLenderInterest = 0;\n        }\n      }\n    }\n\n    return drawAmount;\n  }\n\n  /// @inheritdoc ILending\n  function ownerOf(address nftContractAddress, uint256 nftId) public view returns (address) {\n    return _loanAuctions[nftContractAddress][nftId].nftOwner;\n  }\n\n  function _updateInterest(LoanAuction storage loanAuction) internal returns (uint256 lenderInterest, uint256 protocolInterest) {\n    (lenderInterest, protocolInterest) = _calculateInterestAccrued(loanAuction);\n\n    if (loanAuction.lenderRefi == true) {\n      loanAuction.slashableLenderInterest += SafeCastUpgradeable.toUint128(lenderInterest);\n    } else {\n      loanAuction.accumulatedLenderInterest += SafeCastUpgradeable.toUint128(lenderInterest);\n    }\n\n    loanAuction.unpaidProtocolInterest += SafeCastUpgradeable.toUint128(protocolInterest);\n    loanAuction.lastUpdatedTimestamp = _currentTimestamp32();\n  }\n\n  /// @inheritdoc ILending\n  function calculateInterestAccrued(address nftContractAddress, uint256 nftId) public view returns (uint256, uint256) {\n    return _calculateInterestAccrued(_getLoanAuctionInternal(nftContractAddress, nftId));\n  }\n\n  function _calculateInterestAccrued(LoanAuction storage loanAuction) internal view returns (uint256 lenderInterest, uint256 protocolInterest) {\n    uint256 timePassed = _currentTimestamp32() - loanAuction.lastUpdatedTimestamp;\n\n    lenderInterest = (timePassed * loanAuction.interestRatePerSecond);\n    protocolInterest = (timePassed * loanAuction.protocolInterestRatePerSecond);\n  }\n\n  /// @inheritdoc ILending\n  function calculateInterestPerSecond(\n    uint256 amount,\n    uint256 interestBps,\n    uint256 duration\n  ) public pure returns (uint96) {\n    // account for 0 protocolInterestBps\n    if (interestBps == 0) {\n      return 0;\n    }\n\n    uint96 result = SafeCastUpgradeable.toUint96((amount * interestBps) / MAX_BPS / duration);\n\n    // return 1 for cases where (amount * interestBps) / MAX_BPS < duration;\n    return result == 0 ? 1 : result;\n  }\n\n  function _calculateInterestBps(\n    uint256 amount,\n    uint96 interestRatePerSecond,\n    uint256 duration\n  ) private pure returns (uint256) {\n    return (((uint256(interestRatePerSecond) * duration) * MAX_BPS) / amount) + 1;\n  }\n\n  /// @inheritdoc ILending\n  function checkSufficientInterestAccumulated(address nftContractAddress, uint256 nftId) public view returns (uint256) {\n    return _checkSufficientInterestAccumulated(_getLoanAuctionInternal(nftContractAddress, nftId));\n  }\n\n  function _checkSufficientInterestAccumulated(LoanAuction storage loanAuction) internal view returns (uint256 interestThresholdDelta) {\n    (uint256 lenderInterest, ) = _calculateInterestAccrued(loanAuction);\n\n    uint256 interestThreshold = (uint256(loanAuction.amountDrawn) * gasGriefingPremiumBps) / MAX_BPS;\n\n    if (interestThreshold > lenderInterest) {\n      return interestThreshold - lenderInterest;\n    } else {\n      return 0;\n    }\n  }\n\n  /// @inheritdoc ILending\n  function checkSufficientTerms(\n    address nftContractAddress,\n    uint256 nftId,\n    uint128 amount,\n    uint96 interestRatePerSecond,\n    uint32 duration\n  ) public view returns (bool) {\n    return _checkSufficientTerms(_getLoanAuctionInternal(nftContractAddress, nftId), amount, interestRatePerSecond, duration);\n  }\n\n  function _checkSufficientTerms(\n    LoanAuction storage loanAuction,\n    uint128 amount,\n    uint96 interestRatePerSecond,\n    uint32 duration\n  ) internal view returns (bool) {\n    uint256 loanDuration = loanAuction.loanEndTimestamp - loanAuction.loanBeginTimestamp;\n\n    // calculate the Bps improvement of each offer term\n    uint256 amountImprovement = ((uint256(amount) - loanAuction.amount) * MAX_BPS) / loanAuction.amount;\n    uint256 interestImprovement = ((uint256(loanAuction.interestRatePerSecond) - interestRatePerSecond) * MAX_BPS) / loanAuction.interestRatePerSecond;\n    uint256 durationImprovement = ((uint256(duration) - loanDuration) * MAX_BPS) / loanDuration;\n\n    // sum improvements\n    uint256 improvementSum = amountImprovement + interestImprovement + durationImprovement;\n\n    // check and return if improvements are greater than 25 bps total\n    return improvementSum > termGriefingPremiumBps;\n  }\n\n  function _requireSufficientBalance(\n    address creator,\n    address cAsset,\n    uint256 amount\n  ) internal view {\n    require(ILiquidity(liquidityContractAddress).getCAssetBalance(creator, cAsset) >= amount, \"00001\");\n  }\n\n  function _requireMaxFee(uint16 feeValue) internal pure {\n    require(feeValue <= MAX_FEE, \"00002\");\n  }\n\n  function _requireOpenLoan(LoanAuction storage loanAuction) internal view {\n    require(loanAuction.lastUpdatedTimestamp != 0, \"00007\");\n  }\n\n  function _requireLoanNotExpired(LoanAuction storage loanAuction) internal view {\n    require(_currentTimestamp32() < loanAuction.loanEndTimestamp, \"00009\");\n  }\n\n  function _requireOfferNotExpired(Offer memory offer) internal view {\n    require(offer.expiration > SafeCastUpgradeable.toUint32(block.timestamp), \"00010\");\n  }\n\n  function _requireMinDurationForOffer(Offer memory offer) internal pure {\n    require(offer.duration >= 1 days, \"00011\");\n  }\n\n  function _requireLenderOffer(Offer memory offer) internal pure {\n    require(offer.lenderOffer, \"00012\");\n  }\n\n  function _requireBorrowerOffer(Offer memory offer) internal pure {\n    require(!offer.lenderOffer, \"00013\");\n  }\n\n  function _requireNoFloorTerms(Offer memory offer) internal pure {\n    require(!offer.floorTerm, \"00014\");\n  }\n\n  function _requireNoFixedTerm(LoanAuction storage loanAuction) internal view {\n    require(!loanAuction.fixedTerms, \"00015\");\n  }\n\n  function _requireIsNotSanctioned(address addressToCheck) internal view {\n    if (!_sanctionsPause) {\n      SanctionsList sanctionsList = SanctionsList(SANCTIONS_CONTRACT);\n      bool isToSanctioned = sanctionsList.isSanctioned(addressToCheck);\n      require(!isToSanctioned, \"00017\");\n    }\n  }\n\n  function _requireMatchingAsset(address asset1, address asset2) internal pure {\n    require(asset1 == asset2, \"00019\");\n  }\n\n  function _requireNftOwner(LoanAuction storage loanAuction, address nftOwner) internal view {\n    require(nftOwner == loanAuction.nftOwner, \"00021\");\n  }\n\n  function _requireMatchingNftId(Offer memory offer, uint256 nftId) internal pure {\n    require(nftId == offer.nftId, \"00022\");\n  }\n\n  function _requireOfferCreator(Offer memory offer, address creator) internal pure {\n    require(creator == offer.creator, \"00024\");\n  }\n\n  function _requireSigLendingContract() internal view {\n    require(msg.sender == sigLendingContractAddress, \"00031\");\n  }\n\n  function _requireOfferParity(LoanAuction storage loanAuction, Offer memory offer) internal view {\n    // Caching fields here for gas usage\n    uint128 amount = loanAuction.amount;\n    uint96 interestRatePerSecond = loanAuction.interestRatePerSecond;\n    uint32 loanEndTime = loanAuction.loanEndTimestamp;\n    uint32 offerEndTime = loanAuction.loanBeginTimestamp + offer.duration;\n\n    // Better amount\n    if (offer.amount > amount && offer.interestRatePerSecond <= interestRatePerSecond && offerEndTime >= loanEndTime) {\n      return;\n    }\n\n    // Lower interest rate\n    if (offer.amount >= amount && offer.interestRatePerSecond < interestRatePerSecond && offerEndTime >= loanEndTime) {\n      return;\n    }\n\n    // Longer duration\n    if (offer.amount >= amount && offer.interestRatePerSecond <= interestRatePerSecond && offerEndTime > loanEndTime) {\n      return;\n    }\n\n    revert(\"00025\");\n  }\n\n  function _createLoan(\n    LoanAuction storage loanAuction,\n    Offer memory offer,\n    address lender,\n    address borrower\n  ) internal {\n    loanAuction.nftOwner = borrower;\n    loanAuction.lender = lender;\n    loanAuction.asset = offer.asset;\n    loanAuction.amount = offer.amount;\n    loanAuction.loanEndTimestamp = _currentTimestamp32() + offer.duration;\n    loanAuction.loanBeginTimestamp = _currentTimestamp32();\n    loanAuction.lastUpdatedTimestamp = _currentTimestamp32();\n    loanAuction.amountDrawn = offer.amount;\n    loanAuction.fixedTerms = offer.fixedTerms;\n    loanAuction.lenderRefi = false;\n    loanAuction.accumulatedLenderInterest = 0;\n    loanAuction.accumulatedPaidProtocolInterest = 0;\n    loanAuction.interestRatePerSecond = offer.interestRatePerSecond;\n    loanAuction.protocolInterestRatePerSecond = calculateInterestPerSecond(offer.amount, protocolInterestBps, offer.duration);\n    loanAuction.slashableLenderInterest = 0;\n  }\n\n  function _transferNft(\n    address nftContractAddress,\n    uint256 nftId,\n    address from,\n    address to\n  ) internal {\n    IERC721Upgradeable(nftContractAddress).safeTransferFrom(from, to, nftId);\n  }\n\n  function _payoutCTokenBalances(\n    LoanAuction storage loanAuction,\n    address cAsset,\n    uint256 totalCTokens,\n    uint256 totalPayment,\n    bool repayFull\n  ) internal {\n    uint256 cTokensToLender = totalCTokens;\n\n    if (repayFull) {\n      uint256 cTokensToProtocol = (totalCTokens * loanAuction.unpaidProtocolInterest) / totalPayment;\n      cTokensToLender -= cTokensToProtocol;\n\n      ILiquidity(liquidityContractAddress).addToCAssetBalance(owner(), cAsset, cTokensToProtocol);\n    }\n\n    ILiquidity(liquidityContractAddress).addToCAssetBalance(loanAuction.lender, cAsset, cTokensToLender);\n  }\n\n  function _handleLoanPayment(address asset, uint256 payment) internal returns (uint256) {\n    if (asset == ETH_ADDRESS) {\n      return ILiquidity(liquidityContractAddress).mintCEth{ value: payment }();\n    } else {\n      require(msg.value == 0, \"00023\");\n      return ILiquidity(liquidityContractAddress).mintCErc20(msg.sender, asset, payment);\n    }\n  }\n\n  function _currentTimestamp32() internal view returns (uint32) {\n    return SafeCastUpgradeable.toUint32(block.timestamp);\n  }\n\n  // solhint-disable-next-line no-empty-blocks\n  function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\n    function __ERC721Holder_init() internal onlyInitializing {\n    }\n\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/SigLending.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"./interfaces/niftyapes/lending/ILending.sol\";\nimport \"./interfaces/niftyapes/sigLending/ISigLending.sol\";\nimport \"./interfaces/niftyapes/offers/IOffers.sol\";\n\n/// @title Implementation of the ILending interface\ncontract NiftyApesSigLending is OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, ISigLending {\n  /// @inheritdoc ISigLending\n  address public offersContractAddress;\n\n  /// @inheritdoc ISigLending\n  address public lendingContractAddress;\n\n  /// @dev This empty reserved space is put in place to allow future versions to add new\n  /// variables without shifting storage.\n  uint256[500] private __gap;\n\n  /// @notice The initializer for the NiftyApes protocol.\n  ///         Nifty Apes is intended to be deployed behind a proxy amd thus needs to initialize\n  ///         its state outsize of a constructor.\n  function initialize(address newOffersContractAddress) public initializer {\n    offersContractAddress = newOffersContractAddress;\n\n    OwnableUpgradeable.__Ownable_init();\n    PausableUpgradeable.__Pausable_init();\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\n  }\n\n  /// @inheritdoc ISigLendingAdmin\n  function updateLendingContractAddress(address newLendingContractAddress) external onlyOwner {\n    emit SigLendingXLendingContractAddressUpdated(lendingContractAddress, newLendingContractAddress);\n    lendingContractAddress = newLendingContractAddress;\n  }\n\n  /// @inheritdoc ISigLendingAdmin\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  /// @inheritdoc ISigLendingAdmin\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n\n  // @inheritdoc ISigLending\n  function executeLoanByBorrowerSignature(\n    Offer memory offer,\n    bytes memory signature,\n    uint256 nftId\n  ) external payable whenNotPaused nonReentrant {\n    address lender = IOffers(offersContractAddress).getOfferSigner(offer, signature);\n\n    _requireOfferCreator(offer, lender);\n    IOffers(offersContractAddress).requireAvailableSignature(signature);\n    IOffers(offersContractAddress).requireSignature65(signature);\n    IOffers(offersContractAddress).requireMinimumDuration(offer);\n    _requireLenderOffer(offer);\n\n    if (!offer.floorTerm) {\n      _requireMatchingNftId(offer, nftId);\n      IOffers(offersContractAddress).markSignatureUsed(offer, signature);\n    }\n\n    // execute state changes for executeLoanByBid\n    ILending(lendingContractAddress).doExecuteLoan(offer, lender, msg.sender, nftId);\n  }\n\n  // @inheritdoc ISigLending\n  function executeLoanByLenderSignature(Offer memory offer, bytes memory signature) external payable whenNotPaused nonReentrant {\n    address borrower = IOffers(offersContractAddress).getOfferSigner(offer, signature);\n\n    _requireOfferCreator(offer, borrower);\n    IOffers(offersContractAddress).requireAvailableSignature(signature);\n    IOffers(offersContractAddress).requireSignature65(signature);\n    IOffers(offersContractAddress).requireMinimumDuration(offer);\n    _requireBorrowerOffer(offer);\n    IOffers(offersContractAddress).requireNoFloorTerms(offer);\n\n    IOffers(offersContractAddress).markSignatureUsed(offer, signature);\n\n    ILending(lendingContractAddress).doExecuteLoan(offer, msg.sender, borrower, offer.nftId);\n  }\n\n  // @inheritdoc ISigLending\n  function refinanceByBorrowerSignature(\n    Offer memory offer,\n    bytes memory signature,\n    uint256 nftId,\n    uint32 expectedLastUpdatedTimestamp\n  ) external whenNotPaused nonReentrant {\n    address signer = IOffers(offersContractAddress).getOfferSigner(offer, signature);\n\n    _requireOfferCreator(offer, signer);\n    IOffers(offersContractAddress).requireAvailableSignature(signature);\n    IOffers(offersContractAddress).requireSignature65(signature);\n    IOffers(offersContractAddress).requireMinimumDuration(offer);\n\n    if (!offer.floorTerm) {\n      _requireMatchingNftId(offer, nftId);\n      IOffers(offersContractAddress).markSignatureUsed(offer, signature);\n    }\n\n    ILending(lendingContractAddress).doRefinanceByBorrower(offer, nftId, msg.sender, expectedLastUpdatedTimestamp);\n  }\n\n  function _requireLenderOffer(Offer memory offer) internal pure {\n    require(offer.lenderOffer, \"00012\");\n  }\n\n  function _requireBorrowerOffer(Offer memory offer) internal pure {\n    require(!offer.lenderOffer, \"00013\");\n  }\n\n  function _requireMatchingNftId(Offer memory offer, uint256 nftId) internal pure {\n    require(nftId == offer.nftId, \"00022\");\n  }\n\n  function _requireOfferCreator(Offer memory offer, address creator) internal pure {\n    require(creator == offer.creator, \"00024\");\n  }\n\n  // solhint-disable-next-line no-empty-blocks\n  function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "contracts/interfaces/niftyapes/sigLending/ISigLending.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ISigLendingAdmin.sol\";\nimport \"./ISigLendingEvents.sol\";\nimport \"../offers/IOffersStructs.sol\";\n\n/// @title The signature lending interface for Nifty Apes\n///        This interface is intended to be used for interacting with loans on the protocol.\ninterface ISigLending is ISigLendingAdmin, ISigLendingEvents, IOffersStructs {\n    /// @notice Returns the address for the associated offers contract\n    function offersContractAddress() external view returns (address);\n\n    /// @notice Returns the address for the associated liquidity contract\n    function lendingContractAddress() external view returns (address);\n\n    /// @notice Start a loan as the borrower using a signed offer.\n    ///         The caller of this method has to be the current owner of the NFT\n    ///         Since offers can be floorTerm offers they might not include a specific nft id,\n    ///         thus the caller has to pass an extra nft id to the method to identify the nft.\n    /// @param offer The details of the loan auction offer\n    /// @param signature A signed offerHash\n    /// @param nftId The id of a specified NFT\n    function executeLoanByBorrowerSignature(\n        Offer calldata offer,\n        bytes memory signature,\n        uint256 nftId\n    ) external payable;\n\n    /// @notice Start a loan as the lender using a borrowers offer and signature.\n    ///         Borrowers can make offers for loan terms on their NFTs and thus lenders can\n    ///         execute these offers\n    /// @param offer The details of the loan auction offer\n    /// @param signature A signed offerHash\n    function executeLoanByLenderSignature(Offer calldata offer, bytes calldata signature)\n        external\n        payable;\n\n    /// @notice Refinance a loan against an off chain signed offer as the borrower.\n    ///         The new offer has to cover the principle remaining and all lender interest owed on the loan\n    ///         Borrowers can refinance at any time even after loan default as long as their NFT collateral has not been seized\n    /// @param offer The details of the loan auction offer\n    /// @param signature The signature for the offer\n    /// @param nftId The id of a specified NFT\n    function refinanceByBorrowerSignature(\n        Offer calldata offer,\n        bytes memory signature,\n        uint256 nftId,\n        uint32 expectedLastUpdatedTimestamp\n    ) external;\n}\n"
    },
    "contracts/interfaces/niftyapes/sigLending/ISigLendingAdmin.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ISigLendingEvents.sol\";\n\n/// @title NiftyApes interface for the admin role.\ninterface ISigLendingAdmin {\n    /// @notice Updates the associated liquidity contract address\n    function updateLendingContractAddress(address newLendingContractAddress) external;\n\n    /// @notice Pauses all interactions with the contract.\n    ///         This is intended to be used as an emergency measure to avoid loosing funds.\n    function pause() external;\n\n    /// @notice Unpauses all interactions with the contract.\n    function unpause() external;\n}\n"
    },
    "contracts/interfaces/niftyapes/sigLending/ISigLendingEvents.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @title Events emitted by the signature lending part of the protocol.\ninterface ISigLendingEvents {\n    /// @notice Emitted when the associated liquidity contract address is changed\n    /// @param oldLendingContractAddress The old liquidity contract address\n    /// @param newLendingContractAddress The new liquidity contract address\n    event SigLendingXLendingContractAddressUpdated(\n        address oldLendingContractAddress,\n        address newLendingContractAddress\n    );\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/lib/ECDSABridge.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\n\n/// @title Moves OpenZeppelin's ECDSA implementation into a separate library to save\n///        code size in the main contract.\nlibrary ECDSABridge {\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n    return ECDSAUpgradeable.recover(hash, signature);\n  }\n}\n"
    },
    "contracts/Offers.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"./interfaces/niftyapes/offers/IOffers.sol\";\nimport \"./interfaces/niftyapes/liquidity/ILiquidity.sol\";\nimport \"./lib/ECDSABridge.sol\";\n\n/// @title Implementation of the IOffers interface\ncontract NiftyApesOffers is OwnableUpgradeable, PausableUpgradeable, EIP712Upgradeable, IOffers {\n  /// @dev A mapping for a NFT to an Offer\n  ///      The mapping has to be broken into three parts since an NFT is denominated by its address (first part)\n  ///      and its nftId (second part), offers are referred to by their hash (see #getEIP712EncodedOffer for details) (third part).\n  mapping(address => mapping(uint256 => mapping(bytes32 => Offer))) private _nftOfferBooks;\n\n  /// @dev A mapping for a NFT to a floor offer\n  ///      Floor offers are different from offers on a specific NFT since they are valid on any NFT fro the same address.\n  ///      Thus this mapping skips the nftId, see _nftOfferBooks above.\n  mapping(address => mapping(bytes32 => Offer)) private _floorOfferBooks;\n\n  /// @dev A mapping to mark a signature as used.\n  ///      The mapping allows users to withdraw offers that they made by signature.\n  mapping(bytes => bool) private _cancelledOrFinalized;\n\n  /// @inheritdoc IOffers\n  address public lendingContractAddress;\n\n  /// @inheritdoc IOffers\n  address public sigLendingContractAddress;\n\n  /// @inheritdoc IOffers\n  address public liquidityContractAddress;\n\n  /// @dev This empty reserved space is put in place to allow future versions to add new\n  /// variables without shifting storage.\n  uint256[500] private __gap;\n\n  /// @notice The initializer for the NiftyApes protocol.\n  ///         NiftyApes is intended to be deployed behind a proxy and thus needs to initialize\n  ///         its state outside of a constructor.\n  function initialize(address newliquidityContractAddress) public initializer {\n    EIP712Upgradeable.__EIP712_init(\"NiftyApes_Offers\", \"0.0.1\");\n\n    liquidityContractAddress = newliquidityContractAddress;\n\n    OwnableUpgradeable.__Ownable_init();\n    PausableUpgradeable.__Pausable_init();\n  }\n\n  /// @inheritdoc IOffersAdmin\n  function updateLendingContractAddress(address newLendingContractAddress) external onlyOwner {\n    require(address(newLendingContractAddress) != address(0), \"00035\");\n    emit OffersXLendingContractAddressUpdated(lendingContractAddress, newLendingContractAddress);\n    lendingContractAddress = newLendingContractAddress;\n  }\n\n  /// @inheritdoc IOffersAdmin\n  function updateSigLendingContractAddress(address newSigLendingContractAddress) external onlyOwner {\n    require(address(newSigLendingContractAddress) != address(0), \"00035\");\n    emit OffersXSigLendingContractAddressUpdated(sigLendingContractAddress, newSigLendingContractAddress);\n    sigLendingContractAddress = newSigLendingContractAddress;\n  }\n\n  /// @inheritdoc IOffersAdmin\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  /// @inheritdoc IOffersAdmin\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n\n  /// @inheritdoc IOffers\n  function getOfferHash(Offer memory offer) public view returns (bytes32) {\n    return\n      _hashTypedDataV4(\n        keccak256(\n          abi.encode(\n            0x428a8e8c29d93e1e11aecebd37fa09e4f7c542a1302c7ac497bf5f49662103a5,\n            keccak256(\n              abi.encode(\n                offer.creator,\n                offer.duration,\n                offer.expiration,\n                offer.fixedTerms,\n                offer.floorTerm,\n                offer.lenderOffer,\n                offer.nftContractAddress,\n                offer.nftId,\n                offer.asset,\n                offer.amount,\n                offer.interestRatePerSecond\n              )\n            )\n          )\n        )\n      );\n  }\n\n  /// @inheritdoc IOffers\n  function getOfferSigner(Offer memory offer, bytes memory signature) public view override returns (address) {\n    return ECDSABridge.recover(getOfferHash(offer), signature);\n  }\n\n  /// @inheritdoc IOffers\n  function getOfferSignatureStatus(bytes memory signature) external view returns (bool) {\n    return _cancelledOrFinalized[signature];\n  }\n\n  /// @inheritdoc IOffers\n  function withdrawOfferSignature(Offer memory offer, bytes memory signature) external whenNotPaused {\n    requireAvailableSignature(signature);\n    requireSignature65(signature);\n\n    address signer = getOfferSigner(offer, signature);\n\n    _requireSigner(signer, msg.sender);\n    _requireOfferCreatorOrLendingContract(offer.creator, msg.sender);\n\n    _markSignatureUsed(offer, signature);\n  }\n\n  function _getOfferBook(\n    address nftContractAddress,\n    uint256 nftId,\n    bool floorTerm\n  ) internal view returns (mapping(bytes32 => Offer) storage) {\n    return floorTerm ? _floorOfferBooks[nftContractAddress] : _nftOfferBooks[nftContractAddress][nftId];\n  }\n\n  /// @inheritdoc IOffers\n  function getOffer(\n    address nftContractAddress,\n    uint256 nftId,\n    bytes32 offerHash,\n    bool floorTerm\n  ) public view returns (Offer memory) {\n    return _getOfferInternal(nftContractAddress, nftId, offerHash, floorTerm);\n  }\n\n  function _getOfferInternal(\n    address nftContractAddress,\n    uint256 nftId,\n    bytes32 offerHash,\n    bool floorTerm\n  ) internal view returns (Offer storage) {\n    return _getOfferBook(nftContractAddress, nftId, floorTerm)[offerHash];\n  }\n\n  /// @inheritdoc IOffers\n  function createOffer(Offer memory offer) external whenNotPaused returns (bytes32 offerHash) {\n    address cAsset = ILiquidity(liquidityContractAddress).getCAsset(offer.asset);\n\n    _requireOfferNotExpired(offer);\n    requireMinimumDuration(offer);\n    _requireOfferCreatorOrLendingContract(offer.creator, msg.sender);\n\n    if (offer.lenderOffer) {\n      uint256 offerTokens = ILiquidity(liquidityContractAddress).assetAmountToCAssetAmount(offer.asset, offer.amount);\n      _requireCAssetBalance(msg.sender, cAsset, offerTokens);\n    } else {\n      _require721Owner(offer.nftContractAddress, offer.nftId, msg.sender);\n      requireNoFloorTerms(offer);\n    }\n\n    mapping(bytes32 => Offer) storage offerBook = _getOfferBook(offer.nftContractAddress, offer.nftId, offer.floorTerm);\n\n    offerHash = getOfferHash(offer);\n\n    _requireOfferDoesntExist(offerBook[offerHash].creator);\n\n    offerBook[offerHash] = offer;\n\n    emit NewOffer(offer.creator, offer.nftContractAddress, offer.nftId, offer, offerHash);\n  }\n\n  /// @inheritdoc IOffers\n  function removeOffer(\n    address nftContractAddress,\n    uint256 nftId,\n    bytes32 offerHash,\n    bool floorTerm\n  ) external whenNotPaused {\n    mapping(bytes32 => Offer) storage offerBook = _getOfferBook(nftContractAddress, nftId, floorTerm);\n\n    Offer storage offer = offerBook[offerHash];\n\n    _requireOfferCreatorOrLendingContract(offer.creator, msg.sender);\n\n    emit OfferRemoved(offer.creator, offer.nftContractAddress, nftId, offer, offerHash);\n\n    delete offerBook[offerHash];\n  }\n\n  /// @inheritdoc IOffers\n  function markSignatureUsed(Offer memory offer, bytes memory signature) external {\n    require(msg.sender == sigLendingContractAddress, \"00031\");\n    _markSignatureUsed(offer, signature);\n  }\n\n  function _markSignatureUsed(Offer memory offer, bytes memory signature) internal {\n    _cancelledOrFinalized[signature] = true;\n\n    emit OfferSignatureUsed(offer.nftContractAddress, offer.nftId, offer, signature);\n  }\n\n  /// @inheritdoc IOffers\n  function requireAvailableSignature(bytes memory signature) public view {\n    require(!_cancelledOrFinalized[signature], \"00032\");\n  }\n\n  /// @inheritdoc IOffers\n  function requireSignature65(bytes memory signature) public pure {\n    require(signature.length == 65, \"00003\");\n  }\n\n  /// @inheritdoc IOffers\n  function requireMinimumDuration(Offer memory offer) public pure {\n    require(offer.duration >= 1 days, \"00011\");\n  }\n\n  /// @inheritdoc IOffers\n  function requireNoFloorTerms(Offer memory offer) public pure {\n    require(!offer.floorTerm, \"00014\");\n  }\n\n  function _requireOfferNotExpired(Offer memory offer) internal view {\n    require(offer.expiration > SafeCastUpgradeable.toUint32(block.timestamp), \"00010\");\n  }\n\n  function _require721Owner(\n    address nftContractAddress,\n    uint256 nftId,\n    address owner\n  ) internal view {\n    require(IERC721Upgradeable(nftContractAddress).ownerOf(nftId) == owner, \"00021\");\n  }\n\n  function _requireSigner(address signer, address expected) internal pure {\n    require(signer == expected, \"00033\");\n  }\n\n  function _requireOfferCreatorOrLendingContract(address signer, address expected) internal view {\n    if (msg.sender != lendingContractAddress) {\n      require(signer == expected, \"00024\");\n    }\n  }\n\n  function _requireOfferDoesntExist(address offerCreator) internal pure {\n    require(offerCreator == address(0), \"00046\");\n  }\n\n  function _requireCAssetBalance(\n    address account,\n    address cAsset,\n    uint256 amount\n  ) internal view {\n    require(ILiquidity(liquidityContractAddress).getCAssetBalance(account, cAsset) >= amount, \"00034\");\n  }\n\n  function renounceOwnership() public override onlyOwner {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}