{
  "address": "0x262e2b50219620226C5fB5956432A88fffd94Ba7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLendingContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLendingContractAddress",
          "type": "address"
        }
      ],
      "name": "SigLendingXLendingContractAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "expiration",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "fixedTerms",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "floorTerm",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "lenderOffer",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "nftContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "uint96",
              "name": "interestRatePerSecond",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOffersStructs.Offer",
          "name": "offer",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "executeLoanByBorrowerSignature",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "expiration",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "fixedTerms",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "floorTerm",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "lenderOffer",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "nftContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "uint96",
              "name": "interestRatePerSecond",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOffersStructs.Offer",
          "name": "offer",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "executeLoanByLenderSignature",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOffersContractAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offersContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "expiration",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "fixedTerms",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "floorTerm",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "lenderOffer",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "nftContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "uint96",
              "name": "interestRatePerSecond",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOffersStructs.Offer",
          "name": "offer",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "expectedLastUpdatedTimestamp",
          "type": "uint32"
        }
      ],
      "name": "refinanceByBorrowerSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLendingContractAddress",
          "type": "address"
        }
      ],
      "name": "updateLendingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a04ef224ac4bb884004ba54c079c995b79531f1030e097d36a6300fd8ab488e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x262e2b50219620226C5fB5956432A88fffd94Ba7",
    "transactionIndex": 0,
    "gasUsed": "1395759",
    "logsBloom": "0x
    "blockHash": "0xfca20532aa21268a83ba5ad9d21c34c027e9c9be78962f7eba382210eecc2d12",
    "transactionHash": "0x6a04ef224ac4bb884004ba54c079c995b79531f1030e097d36a6300fd8ab488e",
    "logs": [],
    "blockNumber": 15634184,
    "cumulativeGasUsed": "1395759",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "377a2baa7ec416e452a5f7490aa13150",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLendingContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLendingContractAddress\",\"type\":\"address\"}],\"name\":\"SigLendingXLendingContractAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"fixedTerms\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"floorTerm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lenderOffer\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"interestRatePerSecond\",\"type\":\"uint96\"}],\"internalType\":\"struct IOffersStructs.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"executeLoanByBorrowerSignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"fixedTerms\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"floorTerm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lenderOffer\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"interestRatePerSecond\",\"type\":\"uint96\"}],\"internalType\":\"struct IOffersStructs.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeLoanByLenderSignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOffersContractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offersContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"fixedTerms\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"floorTerm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lenderOffer\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"interestRatePerSecond\",\"type\":\"uint96\"}],\"internalType\":\"struct IOffersStructs.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"expectedLastUpdatedTimestamp\",\"type\":\"uint32\"}],\"name\":\"refinanceByBorrowerSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLendingContractAddress\",\"type\":\"address\"}],\"name\":\"updateLendingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeLoanByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256)\":{\"params\":{\"nftId\":\"The id of a specified NFT\",\"offer\":\"The details of the loan auction offer\",\"signature\":\"A signed offerHash\"}},\"executeLoanByLenderSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes)\":{\"params\":{\"offer\":\"The details of the loan auction offer\",\"signature\":\"A signed offerHash\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refinanceByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256,uint32)\":{\"params\":{\"nftId\":\"The id of a specified NFT\",\"offer\":\"The details of the loan auction offer\",\"signature\":\"The signature for the offer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting storage.\"}},\"title\":\"Implementation of the ILending interface\",\"version\":1},\"userdoc\":{\"events\":{\"SigLendingXLendingContractAddressUpdated(address,address)\":{\"notice\":\"Emitted when the associated liquidity contract address is changed\"}},\"kind\":\"user\",\"methods\":{\"executeLoanByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256)\":{\"notice\":\"Start a loan as the borrower using a signed offer.         The caller of this method has to be the current owner of the NFT         Since offers can be floorTerm offers they might not include a specific nft id,         thus the caller has to pass an extra nft id to the method to identify the nft.\"},\"executeLoanByLenderSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes)\":{\"notice\":\"Start a loan as the lender using a borrowers offer and signature.         Borrowers can make offers for loan terms on their NFTs and thus lenders can         execute these offers\"},\"initialize(address)\":{\"notice\":\"The initializer for the NiftyApes protocol.         Nifty Apes is intended to be deployed behind a proxy amd thus needs to initialize         its state outsize of a constructor.\"},\"lendingContractAddress()\":{\"notice\":\"Returns the address for the associated liquidity contract\"},\"offersContractAddress()\":{\"notice\":\"Returns the address for the associated offers contract\"},\"pause()\":{\"notice\":\"Pauses all interactions with the contract.         This is intended to be used as an emergency measure to avoid loosing funds.\"},\"refinanceByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256,uint32)\":{\"notice\":\"Refinance a loan against an off chain signed offer as the borrower.         The new offer has to cover the principle remaining and all lender interest owed on the loan         Borrowers can refinance at any time even after loan default as long as their NFT collateral has not been seized\"},\"unpause()\":{\"notice\":\"Unpauses all interactions with the contract.\"},\"updateLendingContractAddress(address)\":{\"notice\":\"Updates the associated liquidity contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SigLending.sol\":\"NiftyApesSigLending\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/SigLending.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/niftyapes/lending/ILending.sol\\\";\\nimport \\\"./interfaces/niftyapes/sigLending/ISigLending.sol\\\";\\nimport \\\"./interfaces/niftyapes/offers/IOffers.sol\\\";\\n\\n/// @title Implementation of the ILending interface\\ncontract NiftyApesSigLending is OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, ISigLending {\\n  /// @inheritdoc ISigLending\\n  address public offersContractAddress;\\n\\n  /// @inheritdoc ISigLending\\n  address public lendingContractAddress;\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to add new\\n  /// variables without shifting storage.\\n  uint256[500] private __gap;\\n\\n  /// @notice The initializer for the NiftyApes protocol.\\n  ///         Nifty Apes is intended to be deployed behind a proxy amd thus needs to initialize\\n  ///         its state outsize of a constructor.\\n  function initialize(address newOffersContractAddress) public initializer {\\n    offersContractAddress = newOffersContractAddress;\\n\\n    OwnableUpgradeable.__Ownable_init();\\n    PausableUpgradeable.__Pausable_init();\\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n  }\\n\\n  /// @inheritdoc ISigLendingAdmin\\n  function updateLendingContractAddress(address newLendingContractAddress) external onlyOwner {\\n    emit SigLendingXLendingContractAddressUpdated(lendingContractAddress, newLendingContractAddress);\\n    lendingContractAddress = newLendingContractAddress;\\n  }\\n\\n  /// @inheritdoc ISigLendingAdmin\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  /// @inheritdoc ISigLendingAdmin\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n\\n  // @inheritdoc ISigLending\\n  function executeLoanByBorrowerSignature(\\n    Offer memory offer,\\n    bytes memory signature,\\n    uint256 nftId\\n  ) external payable whenNotPaused nonReentrant {\\n    address lender = IOffers(offersContractAddress).getOfferSigner(offer, signature);\\n\\n    _requireOfferCreator(offer, lender);\\n    IOffers(offersContractAddress).requireAvailableSignature(signature);\\n    IOffers(offersContractAddress).requireSignature65(signature);\\n    IOffers(offersContractAddress).requireMinimumDuration(offer);\\n    _requireLenderOffer(offer);\\n\\n    if (!offer.floorTerm) {\\n      _requireMatchingNftId(offer, nftId);\\n      IOffers(offersContractAddress).markSignatureUsed(offer, signature);\\n    }\\n\\n    // execute state changes for executeLoanByBid\\n    ILending(lendingContractAddress).doExecuteLoan(offer, lender, msg.sender, nftId);\\n  }\\n\\n  // @inheritdoc ISigLending\\n  function executeLoanByLenderSignature(Offer memory offer, bytes memory signature) external payable whenNotPaused nonReentrant {\\n    address borrower = IOffers(offersContractAddress).getOfferSigner(offer, signature);\\n\\n    _requireOfferCreator(offer, borrower);\\n    IOffers(offersContractAddress).requireAvailableSignature(signature);\\n    IOffers(offersContractAddress).requireSignature65(signature);\\n    IOffers(offersContractAddress).requireMinimumDuration(offer);\\n    _requireBorrowerOffer(offer);\\n    IOffers(offersContractAddress).requireNoFloorTerms(offer);\\n\\n    IOffers(offersContractAddress).markSignatureUsed(offer, signature);\\n\\n    ILending(lendingContractAddress).doExecuteLoan(offer, msg.sender, borrower, offer.nftId);\\n  }\\n\\n  // @inheritdoc ISigLending\\n  function refinanceByBorrowerSignature(\\n    Offer memory offer,\\n    bytes memory signature,\\n    uint256 nftId,\\n    uint32 expectedLastUpdatedTimestamp\\n  ) external whenNotPaused nonReentrant {\\n    address signer = IOffers(offersContractAddress).getOfferSigner(offer, signature);\\n\\n    _requireOfferCreator(offer, signer);\\n    IOffers(offersContractAddress).requireAvailableSignature(signature);\\n    IOffers(offersContractAddress).requireSignature65(signature);\\n    IOffers(offersContractAddress).requireMinimumDuration(offer);\\n\\n    if (!offer.floorTerm) {\\n      _requireMatchingNftId(offer, nftId);\\n      IOffers(offersContractAddress).markSignatureUsed(offer, signature);\\n    }\\n\\n    ILending(lendingContractAddress).doRefinanceByBorrower(offer, nftId, msg.sender, expectedLastUpdatedTimestamp);\\n  }\\n\\n  function _requireLenderOffer(Offer memory offer) internal pure {\\n    require(offer.lenderOffer, \\\"00012\\\");\\n  }\\n\\n  function _requireBorrowerOffer(Offer memory offer) internal pure {\\n    require(!offer.lenderOffer, \\\"00013\\\");\\n  }\\n\\n  function _requireMatchingNftId(Offer memory offer, uint256 nftId) internal pure {\\n    require(nftId == offer.nftId, \\\"00022\\\");\\n  }\\n\\n  function _requireOfferCreator(Offer memory offer, address creator) internal pure {\\n    require(creator == offer.creator, \\\"00024\\\");\\n  }\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  function renounceOwnership() public override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x78683689a753e14d7071b5b9d924051c02995e0e4c4c62b6f5365cf1879e6879\",\"license\":\"Unlicensed\"},\"contracts/interfaces/niftyapes/lending/ILending.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./ILendingAdmin.sol\\\";\\nimport \\\"./ILendingEvents.sol\\\";\\nimport \\\"./ILendingStructs.sol\\\";\\nimport \\\"../offers/IOffersStructs.sol\\\";\\n\\n/// @title The lending interface for Nifty Apes\\n///        This interface is intended to be used for interacting with loans on the protocol.\\ninterface ILending is ILendingAdmin, ILendingEvents, ILendingStructs, IOffersStructs {\\n    /// @notice Returns the address for the associated offers contract\\n    function offersContractAddress() external view returns (address);\\n\\n    /// @notice Returns the address for the associated liquidity contract\\n    function liquidityContractAddress() external view returns (address);\\n\\n    /// @notice Returns the address for the associated signature lending contract\\n    function sigLendingContractAddress() external view returns (address);\\n\\n    /// @notice Returns the fee that computes protocol interest\\n    ///         This fee is the basis points in order to calculate interest per second\\n    function protocolInterestBps() external view returns (uint16);\\n\\n    /// @notice Returns the bps premium for refinancing a loan that the new lender has to pay\\n    ///         This premium is to compensate lenders for the work of originating a loan\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function originationPremiumBps() external view returns (uint16);\\n\\n    /// @notice Returns the bps premium for refinancing a loan before the current lender has earned the equivalent amount of interest\\n    ///         The amount paid decreases as the current lender earns interest\\n    ///         The maximum amount paid is the value of gasGriefingPremiumBps\\n    ///         For example, if the value of gasGriefingPremiumBps is 25 and 10 bps of interest has been earned, the premium will be 15 bps paid to the current lender\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function gasGriefingPremiumBps() external view returns (uint16);\\n\\n    /// @notice Returns the bps premium paid to the protocol for refinancing a loan before the current lender has earned the equivalent amount of interest\\n    ///         This value represents the percentage of the gas griefing premium taken by the protocol.\\n    ///         For example, if the value of gasGriefingPremiumBps is 25 and 10 bps of interest has been earned, the premium will be 15 bps paid to the current lender\\n    ///         This premium is a percentage of the delta from the gasGriefingPremium. In effect, it is an additional percentage paid equivalent to the interest earned X the gasGriefingProtocol premium\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function gasGriefingProtocolPremiumBps() external view returns (uint16);\\n\\n    /// @notice Returns the bps premium paid to the protocol for refinancing a loan with terms that do not improve the cumulative terms of the loan by the equivalent basis points\\n    ///         For example, if termGriefingPremiumBps is 25 then the cumulative improvement of amount, interestRatePerSecond, and duration must be more than 25 bps\\n    ///         If the amount is 8 bps better, interestRatePerSecond is 7 bps better, and duration is 10 bps better, then no premium is paid\\n    ///         If any one of those terms is worse then a full premium is paid\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function termGriefingPremiumBps() external view returns (uint16);\\n\\n    /// @notice Returns the bps premium paid to the protocol for refinancing a loan within 1 hour of default\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function defaultRefinancePremiumBps() external view returns (uint16);\\n\\n    /// @notice Returns a loan auction identified by a given nft.\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of a specified NFT\\n    function getLoanAuction(address nftContractAddress, uint256 nftId)\\n        external\\n        view\\n        returns (LoanAuction memory auction);\\n\\n    /// @notice Start a loan as the borrower using an offer from the on chain offer book.\\n    ///         The caller of this method has to be the current owner of the NFT\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    /// @param offerHash The hash of all parameters in an offer\\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\\n    function executeLoanByBorrower(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        bytes32 offerHash,\\n        bool floorTerm\\n    ) external payable;\\n\\n    /// @notice Start a loan as the borrower using a signed offer.\\n    ///         The caller of this method has to be the current owner of the NFT\\n    ///         Since offers can be floorTerm offers they might not include a specific nft id,\\n    ///         thus the caller has to pass an extra nft id to the method to identify the nft.\\n    /// @param offer The details of the loan auction offer\\n    /// @param signature A signed offerHash\\n    /// @param nftId The id of a specified NFT\\n    // function executeLoanByBorrowerSignature(\\n    //     Offer calldata offer,\\n    //     bytes memory signature,\\n    //     uint256 nftId\\n    // ) external payable;\\n\\n    /// @notice Start a loan as the lender using an offer from the on chain offer book.\\n    ///         Borrowers can make offers for loan terms on their NFTs and thus lenders can\\n    ///         execute these offers\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    /// @param offerHash The hash of all parameters in an offer\\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\\n    function executeLoanByLender(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        bytes32 offerHash,\\n        bool floorTerm\\n    ) external payable;\\n\\n    /// @notice Start a loan as the lender using a borrowers offer and signature.\\n    ///         Borrowers can make offers for loan terms on their NFTs and thus lenders can\\n    ///         execute these offers\\n    /// @param offer The details of the loan auction offer\\n    /// @param signature A signed offerHash\\n    // function executeLoanByLenderSignature(Offer calldata offer, bytes calldata signature)\\n    //     external\\n    //     payable;\\n\\n    /// @notice Refinance a loan against the on chain offer book as the borrower.\\n    ///         The new offer has to cover the principle remaining and all lender interest owed on the loan\\n    ///         Borrowers can refinance at any time even after loan default as long as their NFT collateral has not been seized\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\\n    /// @param offerHash The hash of all parameters in an offer. This is used as the unique identifier of an offer.\\n    function refinanceByBorrower(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        bool floorTerm,\\n        bytes32 offerHash,\\n        uint32 expectedLastUpdatedTimestamp\\n    ) external;\\n\\n    /// @notice Refinance a loan against an off chain signed offer as the borrower.\\n    ///         The new offer has to cover the principle remaining and all lender interest owed on the loan\\n    ///         Borrowers can refinance at any time even after loan default as long as their NFT collateral has not been seized\\n    /// @param offer The details of the loan auction offer\\n    /// @param signature The signature for the offer\\n    /// @param nftId The id of a specified NFT\\n    // function refinanceByBorrowerSignature(\\n    //     Offer calldata offer,\\n    //     bytes memory signature,\\n    //     uint256 nftId\\n    // ) external;\\n\\n    /// @notice Refinance a loan against a new offer.\\n    ///         The new offer must improve terms for the borrower\\n    ///         Lender must improve terms by a cumulative 25 bps or pay a 25 bps premium\\n    ///         For example, if termGriefingPremiumBps is 25 then the cumulative improvement of amount, interestRatePerSecond, and duration must be more than 25 bps\\n    ///         If the amount is 8 bps better, interestRatePerSecond is 7 bps better, and duration is 10 bps better, then no premium is paid\\n    ///         If any one of those terms is worse then a full premium is paid\\n    ///         The Lender must allow 25 bps on interest to accrue or pay a gas griefing premium to the current lender\\n    ///         This premium is equal to gasGriefingPremiumBps - interestEarned\\n    /// @param offer The details of the loan auction offer\\n    /// @param expectedLastUpdatedTimestamp The timestamp of the expected terms. This allows lenders to avoid being frontrun and forced to pay a gasGriefingPremium.\\n    ///        Lenders can provide a 0 value if they are willing to pay the gasGriefingPremium in a high volume loanAuction\\n    function refinanceByLender(Offer calldata offer, uint32 expectedLastUpdatedTimestamp) external;\\n\\n    /// @notice Allows borrowers to draw a higher balance on their loan if it has been refinanced with a higher maximum amount\\n    ///         Drawing down value increases the maximum loan pay back amount and so is not automatically imposed on a refinance by lender, hence this function.\\n    ///         If a lender does not have liquidity to support a refinanced amount the borrower will draw whatever amount is available,\\n    ///         the lender's interest earned so far is slashed, and the loan amount is set to the amount currently drawn\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    /// @param drawAmount The amount of value to draw and add to the loan amountDrawn\\n    function drawLoanAmount(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        uint256 drawAmount\\n    ) external;\\n\\n    /// @notice Repay a loan and release the underlying collateral.\\n    ///         The method automatically computes owed interest.\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    function repayLoan(address nftContractAddress, uint256 nftId) external payable;\\n\\n    /// @notice Repay someone elses loan\\n    ///         This function is similar to repayLoan except that it allows for msg.sender to not be\\n    ///         the borrower of the loan.\\n    ///         The reason this is broken into another function is to make it harder to accidentally\\n    ///         be repaying someone elses loan.\\n    ///         Unless you are intending to repay someone elses loan you should be using #repayLoan instead\\n    ///         The main use case for this function is to have a bot repay a loan on behalf of a borrower\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    function repayLoanForAccount(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        uint32 expectedLoanBeginTimestamp\\n    ) external payable;\\n\\n    /// @notice Repay part of an open loan.\\n    ///         Repaying part of a loan will lower the remaining interest accumulated\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    /// @param amount The amount of value to pay down on the principle of the loan\\n    function partialRepayLoan(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        uint256 amount\\n    ) external payable;\\n\\n    /// @notice Seizes an asset if the loan has expired and sends it to the lender\\n    ///         This function can be called by anyone as soon as the loan is expired without having been repaid in full.\\n    ///         This function allows anyone to call it so that an automated bot may seize the asset on behalf of a lender.\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    function seizeAsset(address nftContractAddress, uint256 nftId) external;\\n\\n    /// @notice Returns the owner of a given nft if there is a current loan on the NFT, otherwise zero.\\n    /// @param nftContractAddress The address of the given nft contract\\n    /// @param nftId The id of the given nft\\n    function ownerOf(address nftContractAddress, uint256 nftId) external view returns (address);\\n\\n    /// @notice Returns interest since the last update to the loan\\n    ///         This only includes the interest from the current active interest period.\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    function calculateInterestAccrued(address nftContractAddress, uint256 nftId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /// @notice Returns the protocolInterestRatePerSecond for a given set of terms\\n    ///         There is a set protocolInterestRateBps so no interestBps value is provided\\n    /// @param amount The amount of the loan\\n    /// @param duration The duration of the loan\\n    function calculateProtocolInterestPerSecond(uint256 amount, uint256 duration)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /// @notice Returns the delta between the required accumulated interest and the current accumulated interest\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    function checkSufficientInterestAccumulated(address nftContractAddress, uint256 nftId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns whether the lender has provided sufficient terms to not be charged a term griefing premium\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    function checkSufficientTerms(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        uint128 amount,\\n        uint96 interestRatePerSecond,\\n        uint32 duration\\n    ) external view returns (bool);\\n\\n    /// @notice Function only callable by the NiftyApesSigLending contract\\n    ///         Allows SigLending contract to execute loan directly\\n    /// @param offer The details of the loan auction offer\\n    /// @param lender The lender of the loan\\n    /// @param borrower The borrower of the loan\\n    /// @param nftId The id of the specified NFT\\n    function doExecuteLoan(\\n        Offer memory offer,\\n        address lender,\\n        address borrower,\\n        uint256 nftId\\n    ) external;\\n\\n    /// @notice Function only callable by the NiftyApesSigLending contract\\n    ///         Allows SigLending contract to refinance a loan directly\\n    /// @param offer The details of the loan auction offer\\n    /// @param nftId The id of the specified NFT\\n    /// @param nftOwner owner of the nft in the lending.sol lendingAuction\\n    function doRefinanceByBorrower(\\n        Offer memory offer,\\n        uint256 nftId,\\n        address nftOwner,\\n        uint32 expectedLastUpdatedTimestamp\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc03ed0ac88ce78399d7ff439bcb20555d554d9ab5d32946a85c7bb28fe78d694\",\"license\":\"MIT\"},\"contracts/interfaces/niftyapes/lending/ILendingAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./ILendingEvents.sol\\\";\\n\\n/// @title NiftyApes interface for the admin role.\\ninterface ILendingAdmin {\\n    /// @notice Updates the fee that computes protocol interest due on loan payback\\n    ///         Interest is charged per second on a loan.\\n    function updateProtocolInterestBps(uint16 newProtocolInterestBps) external;\\n\\n    /// @notice Updates the bps premium for refinancing a loan that the new lender has to pay\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function updateOriginationPremiumLenderBps(uint16 newOriginationPremiumBps) external;\\n\\n    /// @notice Updates the bps premium for refinancing a loan before the current lender has earned the equivalent amount of interest\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function updateGasGriefingPremiumBps(uint16 newGasGriefingPremiumBps) external;\\n\\n    /// @notice Updates the bps premium paid to the protocol for refinancing a loan before the current lender has earned the equivalent amount of interest\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function updateGasGriefingProtocolPremiumBps(uint16 newGasGriefingProtocolPremiumBps) external;\\n\\n    /// @notice Updates the bps premium paid to the protocol for refinancing a loan with terms that do not improve the cumulative terms of the loan by the equivalent basis points\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function updateTermGriefingPremiumBps(uint16 newTermGriefingPremiumBps) external;\\n\\n    /// @notice Updates the bps premium paid to the protocol for refinancing a loan within 1 hour of default\\n    ///         Fees are denominated in basis points, parts of 10_000\\n    function updateDefaultRefinancePremiumBps(uint16 newDefaultRefinancePremiumBps) external;\\n\\n    /// @notice Pauses sanctions checks\\n    function pauseSanctions() external;\\n\\n    /// @notice Unpauses sanctions checks\\n    function unpauseSanctions() external;\\n\\n    /// @notice Pauses all interactions with the contract.\\n    ///         This is intended to be used as an emergency measure to avoid loosing funds.\\n    function pause() external;\\n\\n    /// @notice Unpauses all interactions with the contract.\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x2f22a46a7fbb6868fb18d8eefe9da2163ce20c097101353d040411bad25ca29e\",\"license\":\"MIT\"},\"contracts/interfaces/niftyapes/lending/ILendingEvents.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../offers/IOffersStructs.sol\\\";\\n\\n/// @title Events emitted by the lending part of the protocol.\\ninterface ILendingEvents {\\n    /// @notice Emitted when a new loan is executed\\n    /// @param nftContractAddress The nft contract address\\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\\n    /// @param offer The offer details\\n    event LoanExecuted(\\n        address indexed nftContractAddress,\\n        uint256 indexed nftId,\\n        IOffersStructs.Offer offer\\n    );\\n\\n    /// @notice Emitted when a loan is refinanced\\n    /// @param nftContractAddress The nft contract address\\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\\n    /// @param offer The offer details\\n    event Refinance(\\n        address indexed nftContractAddress,\\n        uint256 indexed nftId,\\n        IOffersStructs.Offer offer\\n    );\\n\\n    /// @notice Emitted when a loan amount is drawn\\n    /// @param nftContractAddress The nft contract address\\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\\n    /// @param drawAmount The added amount drawn\\n    ///  @param totalDrawn The total amount drawn now\\n    event AmountDrawn(\\n        address indexed nftContractAddress,\\n        uint256 indexed nftId,\\n        uint256 drawAmount,\\n        uint256 totalDrawn\\n    );\\n\\n    /// @notice Emitted when a loan is repaid\\n    /// @param lender The lender of the loan\\n    /// @param borrower The borrower of the loan\\n    /// @param nftContractAddress The nft contract address\\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\\n    /// @param asset The asset of the loan\\n    ///  @param totalPayment The total payment amount\\n    event LoanRepaid(\\n        address indexed lender,\\n        address borrower,\\n        address indexed nftContractAddress,\\n        uint256 indexed nftId,\\n        address asset,\\n        uint256 totalPayment\\n    );\\n\\n    /// @notice Emitted when a loan is partially repaid\\n    /// @param lender The lender of the loan\\n    /// @param borrower The borrower of the loan\\n    /// @param nftContractAddress The nft contract address\\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\\n    /// @param asset The asset of the loan\\n    ///  @param amount The payment amount\\n    event PartialRepayment(\\n        address indexed lender,\\n        address borrower,\\n        address indexed nftContractAddress,\\n        uint256 indexed nftId,\\n        address asset,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an asset is seized\\n    /// @param lender The lender of the loan\\n    /// @param borrower The borrower of the loan\\n    /// @param nftContractAddress The nft contract address\\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\\n    event AssetSeized(\\n        address indexed lender,\\n        address borrower,\\n        address indexed nftContractAddress,\\n        uint256 indexed nftId\\n    );\\n\\n    /// @notice Emitted when the protocol interest fee is updated.\\n    ///         Interest is charged per second on a loan.\\n    ///         This is the fee that the protocol charges for facilitating the loan\\n    /// @param oldProtocolInterestBps The old value denominated in tokens per second\\n    /// @param newProtocolInterestBps The new value denominated in tokens per second\\n    event ProtocolInterestBpsUpdated(uint96 oldProtocolInterestBps, uint96 newProtocolInterestBps);\\n\\n    /// @notice Emitted when the the bps premium for refinancing a loan that the new lender has to pay is changed\\n    /// @param oldOriginationPremiumBps The old basis points denominated in parts of 10_000\\n    /// @param newOriginationPremiumBps The new basis points denominated in parts of 10_000\\n    event OriginationPremiumBpsUpdated(\\n        uint16 oldOriginationPremiumBps,\\n        uint16 newOriginationPremiumBps\\n    );\\n\\n    /// @notice Emitted when the bps premium for refinancing a loan before the current lender has earned the equivalent amount of interest has changed\\n    /// @param oldGasGriefingPremiumBps The old basis points denominated in parts of 10_000\\n    /// @param newGasGriefingPremiumBps The new basis points denominated in parts of 10_000\\n    event GasGriefingPremiumBpsUpdated(\\n        uint16 oldGasGriefingPremiumBps,\\n        uint16 newGasGriefingPremiumBps\\n    );\\n\\n    /// @notice Emitted when the bps premium paid to the protocol for refinancing a loan before the current lender has earned the equivalent amount of interest is changed\\n    /// @param oldGasGriefingProtocolPremiumBps The old basis points denominated in parts of 10_000\\n    /// @param newGasGriefingProtocolPremiumBps The new basis points denominated in parts of 10_000\\n    event GasGriefingProtocolPremiumBpsUpdated(\\n        uint16 oldGasGriefingProtocolPremiumBps,\\n        uint16 newGasGriefingProtocolPremiumBps\\n    );\\n\\n    /// @notice Emitted when the bps premium paid to the protocol for refinancing a loan with terms that do not improve the cumulative terms of the loan by the equivalent basis points is changed\\n    /// @param oldTermGriefingPremiumBps The old basis points denominated in parts of 10_000\\n    /// @param newTermGriefingPremiumBps The new basis points denominated in parts of 10_000\\n    event TermGriefingPremiumBpsUpdated(\\n        uint16 oldTermGriefingPremiumBps,\\n        uint16 newTermGriefingPremiumBps\\n    );\\n\\n    /// @notice Emitted when the bps premium paid to the protocol for refinancing a loan within 1 hour of default is changed\\n    /// @param oldDefaultRefinancePremiumBps The old basis points denominated in parts of 10_000\\n    /// @param newDefaultRefinancePremiumBps The new basis points denominated in parts of 10_000\\n    event DefaultRefinancePremiumBpsUpdated(\\n        uint16 oldDefaultRefinancePremiumBps,\\n        uint16 newDefaultRefinancePremiumBps\\n    );\\n\\n    /// @notice Emitted when sanctions checks are paused\\n    event LendingSanctionsPaused();\\n\\n    /// @notice Emitted when sanctions checks are unpaused\\n    event LendingSanctionsUnpaused();\\n}\\n\",\"keccak256\":\"0xe04134e6348384bcc60eafbd4bd83bdc1c8adb4727308b3f686f7cdcdda1e726\",\"license\":\"MIT\"},\"contracts/interfaces/niftyapes/lending/ILendingStructs.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ILendingStructs {\\n    //timestamps are uint32, will expire in 2048\\n    struct LoanAuction {\\n        // SLOT 0 START\\n        // The original owner of the nft.\\n        // If there is an active loan on an nft, nifty apes contracts become the holder (original owner)\\n        // of the underlying nft. This field tracks who to return the nft to if the loan gets repaid.\\n        address nftOwner;\\n        // end timestamp of loan\\n        uint32 loanEndTimestamp;\\n        /// Last timestamp this loan was updated\\n        uint32 lastUpdatedTimestamp;\\n        // Whether or not the loan can be refinanced\\n        bool fixedTerms;\\n        // The current lender of a loan\\n        address lender;\\n        // interest rate of loan in basis points\\n        uint96 interestRatePerSecond;\\n        // SLOT 1 START\\n        // the asset in which the loan has been denominated\\n        address asset;\\n        // beginning timestamp of loan\\n        uint32 loanBeginTimestamp;\\n        // refinanceByLender was last action, enables slashing\\n        bool lenderRefi;\\n        // cumulative interest of varying rates paid by new lenders to buy out the loan auction\\n        uint128 accumulatedLenderInterest;\\n        // 32 unused bytes in slot 1\\n        // SLOT 2 START\\n        // cumulative interest of varying rates accrued by the protocol. To be repaid at the end of the loan.\\n        uint128 accumulatedProtocolInterest;\\n        // The maximum amount of tokens that can be drawn from this loan\\n        uint128 amount;\\n        // SLOT 3 START\\n        // amount withdrawn by the nftOwner. This is the amount they will pay interest on, with this value as minimum\\n        uint128 amountDrawn;\\n        // This fee is the rate of interest per second for the protocol\\n        uint96 protocolInterestRatePerSecond;\\n        // 32 unused bytes in slot 3\\n        // SLOT 4 START\\n        uint128 slashableLenderInterest;\\n    }\\n}\\n\",\"keccak256\":\"0xfe27eb1e65f203670bd9d1175a85cba82f3beade9faa17a34009fbfaff304d40\",\"license\":\"MIT\"},\"contracts/interfaces/niftyapes/offers/IOffers.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.13;\\n\\nimport \\\"./IOffersAdmin.sol\\\";\\nimport \\\"./IOffersEvents.sol\\\";\\nimport \\\"./IOffersStructs.sol\\\";\\nimport \\\"../lending/ILendingStructs.sol\\\";\\n\\n/// @title The Offers interface for NiftyApes\\n///        This interface is intended to be used for interacting with offers on the protocol\\ninterface IOffers is IOffersAdmin, IOffersEvents, IOffersStructs, ILendingStructs {\\n    /// @notice Returns the address for the associated lending contract\\n    function lendingContractAddress() external view returns (address);\\n\\n    /// @notice Returns the address for the associated sigLending contract\\n    function sigLendingContractAddress() external view returns (address);\\n\\n    /// @notice Returns the address for the associated liquidity contract\\n    function liquidityContractAddress() external view returns (address);\\n\\n    /// @notice Returns an EIP712 standard compatible hash for a given offer\\n    ///         This hash can be signed to create a valid offer.\\n    /// @param offer The offer to compute the hash for\\n    function getOfferHash(Offer memory offer) external view returns (bytes32);\\n\\n    /// @notice Returns the signer of an offer or throws an error.\\n    /// @param offer The offer to use for retrieving the signer\\n    /// @param signature The signature to use for retrieving the signer\\n    function getOfferSigner(Offer memory offer, bytes memory signature) external returns (address);\\n\\n    /// @notice Returns true if a given signature has been revoked otherwise false\\n    /// @param signature The signature to check\\n    function getOfferSignatureStatus(bytes calldata signature) external view returns (bool status);\\n\\n    /// @notice Withdraw a given offer\\n    ///         Calling this method allows users to withdraw a given offer by cancelling their signature on chain\\n    /// @param offer The offer to withdraw\\n    /// @param signature The signature of the offer\\n    function withdrawOfferSignature(Offer memory offer, bytes calldata signature) external;\\n\\n    /// @notice Returns an offer from the on-chain offer books\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    /// @param offerHash The hash of all parameters in an offer\\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\\n    function getOffer(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        bytes32 offerHash,\\n        bool floorTerm\\n    ) external view returns (Offer memory offer);\\n\\n    /// @notice Creates an offer in the on chain offer book\\n    /// @param offer The details of offer\\n    function createOffer(Offer calldata offer) external returns (bytes32);\\n\\n    /// @notice Removes an offer from the on-chain offer book\\n    /// @param nftContractAddress The address of the NFT collection\\n    /// @param nftId The id of the specified NFT\\n    /// @param offerHash The hash of all parameters in an offer\\n    /// @param floorTerm Indicates whether this is a floor or individual NFT offer.\\n    function removeOffer(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        bytes32 offerHash,\\n        bool floorTerm\\n    ) external;\\n\\n    /// @notice Can only be called by the lendingContractAddress\\n    /// @param offer The details of the offer\\n    /// @param signature The signature of the offer\\n    function markSignatureUsed(Offer memory offer, bytes memory signature) external;\\n\\n    /// @notice Checks that a signature has a length of 65 bytes\\n    /// @param signature The signature of the offer\\n    function requireSignature65(bytes memory signature) external pure;\\n\\n    /// @notice Checks that a signature has not been cancelled/withdrawn on chain\\n    /// @param signature The signature of the offer\\n    function requireAvailableSignature(bytes memory signature) external view;\\n\\n    /// @notice Checks that an offer has a minimum duration\\n    /// @param offer The details of the offer\\n    function requireMinimumDuration(Offer memory offer) external pure;\\n\\n    /// @notice Checks that an offer is not a floor term offer\\n    /// @param offer The details of the offer\\n    function requireNoFloorTerms(Offer memory offer) external pure;\\n}\\n\",\"keccak256\":\"0xaf5d47f8b69e1ad83bae442546cabdf3de0a5f09bbedadac8fd31dd6515b2a22\",\"license\":\"Unlicensed\"},\"contracts/interfaces/niftyapes/offers/IOffersAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @title NiftyApes interface for the admin role.\\ninterface IOffersAdmin {\\n    /// @notice Updates the associated lending contract address\\n    function updateLendingContractAddress(address newLendingContractAddress) external;\\n\\n    /// @notice Updates the associated signature lending contract address\\n    function updateSigLendingContractAddress(address newSigLendingContractAddress) external;\\n\\n    /// @notice Pauses all interactions with the contract.\\n    ///         This is intended to be used as an emergency measure to avoid loosing funds.\\n    function pause() external;\\n\\n    /// @notice Unpauses all interactions with the contract.\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x2b37ea8bde20aa340191ecd133688041ba4abff414c6f93aee5ced240676a83c\",\"license\":\"MIT\"},\"contracts/interfaces/niftyapes/offers/IOffersEvents.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IOffersStructs.sol\\\";\\n\\n/// @title Events emitted by the offers part of the protocol.\\ninterface IOffersEvents {\\n    /// @notice Emitted when a new offer is stored on chain\\n    /// @param creator The creator of the offer, this can either be a borrower or a lender (check boolean flag in the offer).\\n    /// @param nftContractAddress The nft contract address\\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\\n    /// @param offer The offer details\\n    /// @param offerHash The offer hash\\n    event NewOffer(\\n        address indexed creator,\\n        address indexed nftContractAddress,\\n        uint256 indexed nftId,\\n        IOffersStructs.Offer offer,\\n        bytes32 offerHash\\n    );\\n\\n    /// @notice Emitted when a offer is removed from chain\\n    /// @param creator The creator of the offer, this can either be a borrower or a lender (check boolean flag in the offer).\\n    /// @param nftContractAddress The nft contract address\\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\\n    /// @param offer The offer details\\n    /// @param offerHash The offer hash\\n    event OfferRemoved(\\n        address indexed creator,\\n        address indexed nftContractAddress,\\n        uint256 indexed nftId,\\n        IOffersStructs.Offer offer,\\n        bytes32 offerHash\\n    );\\n\\n    /// @notice Emitted when a offer signature gets has been used\\n    /// @param nftContractAddress The nft contract address\\n    /// @param nftId The nft id, this field can be meaningless if the offer is a floor term offer\\n    /// @param offer The offer details\\n    /// @param signature The signature that has been revoked\\n    event OfferSignatureUsed(\\n        address indexed nftContractAddress,\\n        uint256 indexed nftId,\\n        IOffersStructs.Offer offer,\\n        bytes signature\\n    );\\n\\n    /// @notice Emitted when the associated lending contract address is changed\\n    /// @param oldLendingContractAddress The old lending contract address\\n    /// @param newLendingContractAddress The new lending contract address\\n    event OffersXLendingContractAddressUpdated(\\n        address oldLendingContractAddress,\\n        address newLendingContractAddress\\n    );\\n\\n    /// @notice Emitted when the associated signature lending contract address is changed\\n    /// @param oldSigLendingContractAddress The old lending contract address\\n    /// @param newSigLendingContractAddress The new lending contract address\\n    event OffersXSigLendingContractAddressUpdated(\\n        address oldSigLendingContractAddress,\\n        address newSigLendingContractAddress\\n    );\\n}\\n\",\"keccak256\":\"0x659025e410769ecfadd7f5b8dc79b0c396afd9bfb3763dd79a564fb9b8e9b8a0\",\"license\":\"MIT\"},\"contracts/interfaces/niftyapes/offers/IOffersStructs.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IOffersStructs {\\n    //timestamps are uint32, will expire in 2048\\n    struct Offer {\\n        // SLOT 0 START\\n        // Offer creator\\n        address creator;\\n        // offer loan duration\\n        uint32 duration;\\n        // The expiration timestamp of the offer in a unix timestamp in seconds\\n        uint32 expiration;\\n        // is loan offer fixed terms or open for perpetual auction\\n        bool fixedTerms;\\n        // is offer for single NFT or for every NFT in a collection\\n        bool floorTerm;\\n        // Whether or not this offer was made by a lender or a borrower\\n        bool lenderOffer;\\n        // SLOT 1 START\\n        // offer NFT contract address\\n        address nftContractAddress;\\n        // SLOT 2 START\\n        // offer NFT ID\\n        uint256 nftId; // ignored if floorTerm is true\\n        // SLOT 3 START\\n        // offer asset type\\n        address asset;\\n        // SLOT 4 START\\n        // offer loan amount\\n        uint128 amount;\\n        // offer interest rate per second. (Amount * InterestRate) / MAX-BPS / Duration\\n        uint96 interestRatePerSecond;\\n    }\\n}\\n\",\"keccak256\":\"0x832744ec694c79c880620500c69d1d8e1cf2f7301d3f85360f81b405589822e1\",\"license\":\"MIT\"},\"contracts/interfaces/niftyapes/sigLending/ISigLending.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./ISigLendingAdmin.sol\\\";\\nimport \\\"./ISigLendingEvents.sol\\\";\\nimport \\\"../offers/IOffersStructs.sol\\\";\\n\\n/// @title The signature lending interface for Nifty Apes\\n///        This interface is intended to be used for interacting with loans on the protocol.\\ninterface ISigLending is ISigLendingAdmin, ISigLendingEvents, IOffersStructs {\\n    /// @notice Returns the address for the associated offers contract\\n    function offersContractAddress() external view returns (address);\\n\\n    /// @notice Returns the address for the associated liquidity contract\\n    function lendingContractAddress() external view returns (address);\\n\\n    /// @notice Start a loan as the borrower using a signed offer.\\n    ///         The caller of this method has to be the current owner of the NFT\\n    ///         Since offers can be floorTerm offers they might not include a specific nft id,\\n    ///         thus the caller has to pass an extra nft id to the method to identify the nft.\\n    /// @param offer The details of the loan auction offer\\n    /// @param signature A signed offerHash\\n    /// @param nftId The id of a specified NFT\\n    function executeLoanByBorrowerSignature(\\n        Offer calldata offer,\\n        bytes memory signature,\\n        uint256 nftId\\n    ) external payable;\\n\\n    /// @notice Start a loan as the lender using a borrowers offer and signature.\\n    ///         Borrowers can make offers for loan terms on their NFTs and thus lenders can\\n    ///         execute these offers\\n    /// @param offer The details of the loan auction offer\\n    /// @param signature A signed offerHash\\n    function executeLoanByLenderSignature(Offer calldata offer, bytes calldata signature)\\n        external\\n        payable;\\n\\n    /// @notice Refinance a loan against an off chain signed offer as the borrower.\\n    ///         The new offer has to cover the principle remaining and all lender interest owed on the loan\\n    ///         Borrowers can refinance at any time even after loan default as long as their NFT collateral has not been seized\\n    /// @param offer The details of the loan auction offer\\n    /// @param signature The signature for the offer\\n    /// @param nftId The id of a specified NFT\\n    function refinanceByBorrowerSignature(\\n        Offer calldata offer,\\n        bytes memory signature,\\n        uint256 nftId,\\n        uint32 expectedLastUpdatedTimestamp\\n    ) external;\\n}\\n\",\"keccak256\":\"0x84ee8aa0c947f9840df730597f05543951d15bc01e1d93f04abfb8094468780f\",\"license\":\"MIT\"},\"contracts/interfaces/niftyapes/sigLending/ISigLendingAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./ISigLendingEvents.sol\\\";\\n\\n/// @title NiftyApes interface for the admin role.\\ninterface ISigLendingAdmin {\\n    /// @notice Updates the associated liquidity contract address\\n    function updateLendingContractAddress(address newLendingContractAddress) external;\\n\\n    /// @notice Pauses all interactions with the contract.\\n    ///         This is intended to be used as an emergency measure to avoid loosing funds.\\n    function pause() external;\\n\\n    /// @notice Unpauses all interactions with the contract.\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x9cd3c6bd22d3c035d0c2b2a0ab8d25da5761c568b01f4eafcf9fbaeca2850d2d\",\"license\":\"MIT\"},\"contracts/interfaces/niftyapes/sigLending/ISigLendingEvents.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @title Events emitted by the signature lending part of the protocol.\\ninterface ISigLendingEvents {\\n    /// @notice Emitted when the associated liquidity contract address is changed\\n    /// @param oldLendingContractAddress The old liquidity contract address\\n    /// @param newLendingContractAddress The new liquidity contract address\\n    event SigLendingXLendingContractAddressUpdated(\\n        address oldLendingContractAddress,\\n        address newLendingContractAddress\\n    );\\n}\\n\",\"keccak256\":\"0x9c4fb75dc10f15fa621235d93b12969f0f8ca275386b537d8a2b6920457f883c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061184a806100206000396000f3fe6080604052600436106100c25760003560e01c80638456cb591161007f578063c4d66de811610059578063c4d66de8146101d9578063ebfa2b7b146101f9578063f2fde38b1461020c578063f79c818a1461022c57600080fd5b80638456cb59146101935780638da5cb5b146101a8578063b1ba4cbb146101c657600080fd5b80631efdf7bd146100c757806326d791bd146101045780633f4ba83a146101265780635c975abb1461013b578063715018a61461015e5780637379dbe614610173575b600080fd5b3480156100d357600080fd5b5060c9546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011057600080fd5b5061012461011f366004611195565b61024c565b005b34801561013257600080fd5b506101246102e8565b34801561014757600080fd5b5060655460ff1660405190151581526020016100fb565b34801561016a57600080fd5b5061012461031c565b34801561017f57600080fd5b5060ca546100e7906001600160a01b031681565b34801561019f57600080fd5b50610124610346565b3480156101b457600080fd5b506033546001600160a01b03166100e7565b6101246101d43660046113b1565b610378565b3480156101e557600080fd5b506101246101f4366004611195565b610658565b61012461020736600461140c565b6106f9565b34801561021857600080fd5b50610124610227366004611195565b610a28565b34801561023857600080fd5b5061012461024736600461145d565b610ac3565b6033546001600160a01b0316331461027f5760405162461bcd60e51b8152600401610276906114ca565b60405180910390fd5b60ca54604080516001600160a01b03928316815291831660208301527f779f60183472eb9241e747f23a7f255939bda9b812a442d39b17cfd00125b5bd910160405180910390a160ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146103125760405162461bcd60e51b8152600401610276906114ca565b61031a610d9b565b565b6033546001600160a01b0316331461031a5760405162461bcd60e51b8152600401610276906114ca565b6033546001600160a01b031633146103705760405162461bcd60e51b8152600401610276906114ca565b61031a610e2e565b60655460ff161561039b5760405162461bcd60e51b8152600401610276906114ff565b6002609754036103bd5760405162461bcd60e51b815260040161027690611529565b600260975560c9546040516314d927c560e11b81526000916001600160a01b0316906329b24f8a906103f59087908790600401611696565b6020604051808303816000875af1158015610414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043891906116c1565b90506104448482610e86565b60c954604051637ba2edfd60e11b81526001600160a01b039091169063f745dbfa906104749086906004016116de565b60006040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505060c9546040516346df86c560e11b81526001600160a01b039091169250638dbf0d8a91506104d49086906004016116de565b60006040518083038186803b1580156104ec57600080fd5b505afa158015610500573d6000803e3d6000fd5b505060c9546040516375ec11ff60e11b81526001600160a01b03909116925063ebd823fe91506105349087906004016116f1565b60006040518083038186803b15801561054c57600080fd5b505afa158015610560573d6000803e3d6000fd5b5050505061056d84610eca565b83608001516105e5576105808483610f03565b60c95460405163e2adc1b760e01b81526001600160a01b039091169063e2adc1b7906105b29087908790600401611696565b600060405180830381600087803b1580156105cc57600080fd5b505af11580156105e0573d6000803e3d6000fd5b505050505b60ca54604051632091078760e21b81526001600160a01b03909116906382441e1c9061061b908790859033908890600401611706565b600060405180830381600087803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b50506001609755505050505050565b60006106646001610f3e565b9050801561067c576000805461ff0019166101001790555b60c980546001600160a01b0319166001600160a01b03841617905561069f610fcb565b6106a7610ffa565b6106af611029565b80156106f5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60655460ff161561071c5760405162461bcd60e51b8152600401610276906114ff565b60026097540361073e5760405162461bcd60e51b815260040161027690611529565b600260975560c9546040516314d927c560e11b81526000916001600160a01b0316906329b24f8a906107769086908690600401611696565b6020604051808303816000875af1158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b991906116c1565b90506107c58382610e86565b60c954604051637ba2edfd60e11b81526001600160a01b039091169063f745dbfa906107f59085906004016116de565b60006040518083038186803b15801561080d57600080fd5b505afa158015610821573d6000803e3d6000fd5b505060c9546040516346df86c560e11b81526001600160a01b039091169250638dbf0d8a91506108559085906004016116de565b60006040518083038186803b15801561086d57600080fd5b505afa158015610881573d6000803e3d6000fd5b505060c9546040516375ec11ff60e11b81526001600160a01b03909116925063ebd823fe91506108b59086906004016116f1565b60006040518083038186803b1580156108cd57600080fd5b505afa1580156108e1573d6000803e3d6000fd5b505050506108ee83611058565b60c954604051632441c3f760e11b81526001600160a01b039091169063488387ee9061091e9086906004016116f1565b60006040518083038186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505060c95460405163e2adc1b760e01b81526001600160a01b03909116925063e2adc1b791506109809086908690600401611696565b600060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b505060ca5460e0860151604051632091078760e21b81526001600160a01b0390921693506382441e1c92506109ec9187913391879190600401611706565b600060405180830381600087803b158015610a0657600080fd5b505af1158015610a1a573d6000803e3d6000fd5b505060016097555050505050565b6033546001600160a01b03163314610a525760405162461bcd60e51b8152600401610276906114ca565b6001600160a01b038116610ab75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610276565b610ac081611092565b50565b60655460ff1615610ae65760405162461bcd60e51b8152600401610276906114ff565b600260975403610b085760405162461bcd60e51b815260040161027690611529565b600260975560c9546040516314d927c560e11b81526000916001600160a01b0316906329b24f8a90610b409088908890600401611696565b6020604051808303816000875af1158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8391906116c1565b9050610b8f8582610e86565b60c954604051637ba2edfd60e11b81526001600160a01b039091169063f745dbfa90610bbf9087906004016116de565b60006040518083038186803b158015610bd757600080fd5b505afa158015610beb573d6000803e3d6000fd5b505060c9546040516346df86c560e11b81526001600160a01b039091169250638dbf0d8a9150610c1f9087906004016116de565b60006040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505060c9546040516375ec11ff60e11b81526001600160a01b03909116925063ebd823fe9150610c7f9088906004016116f1565b60006040518083038186803b158015610c9757600080fd5b505afa158015610cab573d6000803e3d6000fd5b505050508460800151610d2757610cc28584610f03565b60c95460405163e2adc1b760e01b81526001600160a01b039091169063e2adc1b790610cf49088908890600401611696565b600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050505b60ca54604051630a66bb5360e31b81526001600160a01b0390911690635335da9890610d5d90889087903390889060040161173f565b600060405180830381600087803b158015610d7757600080fd5b505af1158015610d8b573d6000803e3d6000fd5b5050600160975550505050505050565b60655460ff16610de45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610276565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615610e515760405162461bcd60e51b8152600401610276906114ff565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e113390565b81516001600160a01b038281169116146106f55760405162461bcd60e51b81526020600482015260056024820152640c0c0c0c8d60da1b6044820152606401610276565b8060a00151610ac05760405162461bcd60e51b8152602060048201526005602482015264181818189960d91b6044820152606401610276565b8160e0015181146106f55760405162461bcd60e51b8152602060048201526005602482015264181818191960d91b6044820152606401610276565b60008054610100900460ff1615610f85578160ff166001148015610f615750303b155b610f7d5760405162461bcd60e51b81526004016102769061177b565b506000919050565b60005460ff808416911610610fac5760405162461bcd60e51b81526004016102769061177b565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610ff25760405162461bcd60e51b8152600401610276906117c9565b61031a6110e4565b600054610100900460ff166110215760405162461bcd60e51b8152600401610276906117c9565b61031a611114565b600054610100900460ff166110505760405162461bcd60e51b8152600401610276906117c9565b61031a611147565b8060a0015115610ac05760405162461bcd60e51b8152602060048201526005602482015264303030313360d81b6044820152606401610276565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661110b5760405162461bcd60e51b8152600401610276906117c9565b61031a33611092565b600054610100900460ff1661113b5760405162461bcd60e51b8152600401610276906117c9565b6065805460ff19169055565b600054610100900460ff1661116e5760405162461bcd60e51b8152600401610276906117c9565b6001609755565b6001600160a01b0381168114610ac057600080fd5b8035610fc681611175565b6000602082840312156111a757600080fd5b81356111b281611175565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156111f3576111f36111b9565b60405290565b803563ffffffff81168114610fc657600080fd5b80358015158114610fc657600080fd5b80356001600160801b0381168114610fc657600080fd5b80356bffffffffffffffffffffffff81168114610fc657600080fd5b6000610160828403121561126357600080fd5b61126b6111cf565b90506112768261118a565b8152611284602083016111f9565b6020820152611295604083016111f9565b60408201526112a66060830161120d565b60608201526112b76080830161120d565b60808201526112c860a0830161120d565b60a08201526112d960c0830161118a565b60c082015260e082013560e08201526101006112f681840161118a565b9082015261012061130883820161121d565b9082015261014061131a838201611234565b9082015292915050565b600082601f83011261133557600080fd5b813567ffffffffffffffff80821115611350576113506111b9565b604051601f8301601f19908116603f01168101908282118183101715611378576113786111b9565b8160405283815286602085880101111561139157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006101a084860312156113c757600080fd5b6113d18585611250565b925061016084013567ffffffffffffffff8111156113ee57600080fd5b6113fa86828701611324565b92505061018084013590509250925092565b600080610180838503121561142057600080fd5b61142a8484611250565b915061016083013567ffffffffffffffff81111561144757600080fd5b61145385828601611324565b9150509250929050565b6000806000806101c0858703121561147457600080fd5b61147e8686611250565b935061016085013567ffffffffffffffff81111561149b57600080fd5b6114a787828801611324565b93505061018085013591506114bf6101a086016111f9565b905092959194509250565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b80516001600160a01b031682526020810151611584602084018263ffffffff169052565b50604081015161159c604084018263ffffffff169052565b5060608101516115b0606084018215159052565b5060808101516115c4608084018215159052565b5060a08101516115d860a084018215159052565b5060c08101516115f360c08401826001600160a01b03169052565b5060e081015160e083015261010080820151611619828501826001600160a01b03169052565b5050610120818101516001600160801b031690830152610140908101516bffffffffffffffffffffffff16910152565b6000815180845260005b8181101561166f57602081850181015186830182015201611653565b81811115611681576000602083870101525b50601f01601f19169290920160200192915050565b60006101806116a58386611560565b806101608401526116b881840185611649565b95945050505050565b6000602082840312156116d357600080fd5b81516111b281611175565b6020815260006111b26020830184611649565b61016081016117008284611560565b92915050565b6101c081016117158287611560565b6001600160a01b03948516610160830152929093166101808401526101a090920191909152919050565b6101c0810161174e8287611560565b6101608201949094526001600160a01b039290921661018083015263ffffffff166101a090910152919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220c7019503985bfab5dc59767683004e88508204ddcf1b14ced3ee1730048bf4ca64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80638456cb591161007f578063c4d66de811610059578063c4d66de8146101d9578063ebfa2b7b146101f9578063f2fde38b1461020c578063f79c818a1461022c57600080fd5b80638456cb59146101935780638da5cb5b146101a8578063b1ba4cbb146101c657600080fd5b80631efdf7bd146100c757806326d791bd146101045780633f4ba83a146101265780635c975abb1461013b578063715018a61461015e5780637379dbe614610173575b600080fd5b3480156100d357600080fd5b5060c9546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011057600080fd5b5061012461011f366004611195565b61024c565b005b34801561013257600080fd5b506101246102e8565b34801561014757600080fd5b5060655460ff1660405190151581526020016100fb565b34801561016a57600080fd5b5061012461031c565b34801561017f57600080fd5b5060ca546100e7906001600160a01b031681565b34801561019f57600080fd5b50610124610346565b3480156101b457600080fd5b506033546001600160a01b03166100e7565b6101246101d43660046113b1565b610378565b3480156101e557600080fd5b506101246101f4366004611195565b610658565b61012461020736600461140c565b6106f9565b34801561021857600080fd5b50610124610227366004611195565b610a28565b34801561023857600080fd5b5061012461024736600461145d565b610ac3565b6033546001600160a01b0316331461027f5760405162461bcd60e51b8152600401610276906114ca565b60405180910390fd5b60ca54604080516001600160a01b03928316815291831660208301527f779f60183472eb9241e747f23a7f255939bda9b812a442d39b17cfd00125b5bd910160405180910390a160ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146103125760405162461bcd60e51b8152600401610276906114ca565b61031a610d9b565b565b6033546001600160a01b0316331461031a5760405162461bcd60e51b8152600401610276906114ca565b6033546001600160a01b031633146103705760405162461bcd60e51b8152600401610276906114ca565b61031a610e2e565b60655460ff161561039b5760405162461bcd60e51b8152600401610276906114ff565b6002609754036103bd5760405162461bcd60e51b815260040161027690611529565b600260975560c9546040516314d927c560e11b81526000916001600160a01b0316906329b24f8a906103f59087908790600401611696565b6020604051808303816000875af1158015610414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043891906116c1565b90506104448482610e86565b60c954604051637ba2edfd60e11b81526001600160a01b039091169063f745dbfa906104749086906004016116de565b60006040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505060c9546040516346df86c560e11b81526001600160a01b039091169250638dbf0d8a91506104d49086906004016116de565b60006040518083038186803b1580156104ec57600080fd5b505afa158015610500573d6000803e3d6000fd5b505060c9546040516375ec11ff60e11b81526001600160a01b03909116925063ebd823fe91506105349087906004016116f1565b60006040518083038186803b15801561054c57600080fd5b505afa158015610560573d6000803e3d6000fd5b5050505061056d84610eca565b83608001516105e5576105808483610f03565b60c95460405163e2adc1b760e01b81526001600160a01b039091169063e2adc1b7906105b29087908790600401611696565b600060405180830381600087803b1580156105cc57600080fd5b505af11580156105e0573d6000803e3d6000fd5b505050505b60ca54604051632091078760e21b81526001600160a01b03909116906382441e1c9061061b908790859033908890600401611706565b600060405180830381600087803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b50506001609755505050505050565b60006106646001610f3e565b9050801561067c576000805461ff0019166101001790555b60c980546001600160a01b0319166001600160a01b03841617905561069f610fcb565b6106a7610ffa565b6106af611029565b80156106f5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60655460ff161561071c5760405162461bcd60e51b8152600401610276906114ff565b60026097540361073e5760405162461bcd60e51b815260040161027690611529565b600260975560c9546040516314d927c560e11b81526000916001600160a01b0316906329b24f8a906107769086908690600401611696565b6020604051808303816000875af1158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b991906116c1565b90506107c58382610e86565b60c954604051637ba2edfd60e11b81526001600160a01b039091169063f745dbfa906107f59085906004016116de565b60006040518083038186803b15801561080d57600080fd5b505afa158015610821573d6000803e3d6000fd5b505060c9546040516346df86c560e11b81526001600160a01b039091169250638dbf0d8a91506108559085906004016116de565b60006040518083038186803b15801561086d57600080fd5b505afa158015610881573d6000803e3d6000fd5b505060c9546040516375ec11ff60e11b81526001600160a01b03909116925063ebd823fe91506108b59086906004016116f1565b60006040518083038186803b1580156108cd57600080fd5b505afa1580156108e1573d6000803e3d6000fd5b505050506108ee83611058565b60c954604051632441c3f760e11b81526001600160a01b039091169063488387ee9061091e9086906004016116f1565b60006040518083038186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505060c95460405163e2adc1b760e01b81526001600160a01b03909116925063e2adc1b791506109809086908690600401611696565b600060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b505060ca5460e0860151604051632091078760e21b81526001600160a01b0390921693506382441e1c92506109ec9187913391879190600401611706565b600060405180830381600087803b158015610a0657600080fd5b505af1158015610a1a573d6000803e3d6000fd5b505060016097555050505050565b6033546001600160a01b03163314610a525760405162461bcd60e51b8152600401610276906114ca565b6001600160a01b038116610ab75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610276565b610ac081611092565b50565b60655460ff1615610ae65760405162461bcd60e51b8152600401610276906114ff565b600260975403610b085760405162461bcd60e51b815260040161027690611529565b600260975560c9546040516314d927c560e11b81526000916001600160a01b0316906329b24f8a90610b409088908890600401611696565b6020604051808303816000875af1158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8391906116c1565b9050610b8f8582610e86565b60c954604051637ba2edfd60e11b81526001600160a01b039091169063f745dbfa90610bbf9087906004016116de565b60006040518083038186803b158015610bd757600080fd5b505afa158015610beb573d6000803e3d6000fd5b505060c9546040516346df86c560e11b81526001600160a01b039091169250638dbf0d8a9150610c1f9087906004016116de565b60006040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505060c9546040516375ec11ff60e11b81526001600160a01b03909116925063ebd823fe9150610c7f9088906004016116f1565b60006040518083038186803b158015610c9757600080fd5b505afa158015610cab573d6000803e3d6000fd5b505050508460800151610d2757610cc28584610f03565b60c95460405163e2adc1b760e01b81526001600160a01b039091169063e2adc1b790610cf49088908890600401611696565b600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050505b60ca54604051630a66bb5360e31b81526001600160a01b0390911690635335da9890610d5d90889087903390889060040161173f565b600060405180830381600087803b158015610d7757600080fd5b505af1158015610d8b573d6000803e3d6000fd5b5050600160975550505050505050565b60655460ff16610de45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610276565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615610e515760405162461bcd60e51b8152600401610276906114ff565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e113390565b81516001600160a01b038281169116146106f55760405162461bcd60e51b81526020600482015260056024820152640c0c0c0c8d60da1b6044820152606401610276565b8060a00151610ac05760405162461bcd60e51b8152602060048201526005602482015264181818189960d91b6044820152606401610276565b8160e0015181146106f55760405162461bcd60e51b8152602060048201526005602482015264181818191960d91b6044820152606401610276565b60008054610100900460ff1615610f85578160ff166001148015610f615750303b155b610f7d5760405162461bcd60e51b81526004016102769061177b565b506000919050565b60005460ff808416911610610fac5760405162461bcd60e51b81526004016102769061177b565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610ff25760405162461bcd60e51b8152600401610276906117c9565b61031a6110e4565b600054610100900460ff166110215760405162461bcd60e51b8152600401610276906117c9565b61031a611114565b600054610100900460ff166110505760405162461bcd60e51b8152600401610276906117c9565b61031a611147565b8060a0015115610ac05760405162461bcd60e51b8152602060048201526005602482015264303030313360d81b6044820152606401610276565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661110b5760405162461bcd60e51b8152600401610276906117c9565b61031a33611092565b600054610100900460ff1661113b5760405162461bcd60e51b8152600401610276906117c9565b6065805460ff19169055565b600054610100900460ff1661116e5760405162461bcd60e51b8152600401610276906117c9565b6001609755565b6001600160a01b0381168114610ac057600080fd5b8035610fc681611175565b6000602082840312156111a757600080fd5b81356111b281611175565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156111f3576111f36111b9565b60405290565b803563ffffffff81168114610fc657600080fd5b80358015158114610fc657600080fd5b80356001600160801b0381168114610fc657600080fd5b80356bffffffffffffffffffffffff81168114610fc657600080fd5b6000610160828403121561126357600080fd5b61126b6111cf565b90506112768261118a565b8152611284602083016111f9565b6020820152611295604083016111f9565b60408201526112a66060830161120d565b60608201526112b76080830161120d565b60808201526112c860a0830161120d565b60a08201526112d960c0830161118a565b60c082015260e082013560e08201526101006112f681840161118a565b9082015261012061130883820161121d565b9082015261014061131a838201611234565b9082015292915050565b600082601f83011261133557600080fd5b813567ffffffffffffffff80821115611350576113506111b9565b604051601f8301601f19908116603f01168101908282118183101715611378576113786111b9565b8160405283815286602085880101111561139157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006101a084860312156113c757600080fd5b6113d18585611250565b925061016084013567ffffffffffffffff8111156113ee57600080fd5b6113fa86828701611324565b92505061018084013590509250925092565b600080610180838503121561142057600080fd5b61142a8484611250565b915061016083013567ffffffffffffffff81111561144757600080fd5b61145385828601611324565b9150509250929050565b6000806000806101c0858703121561147457600080fd5b61147e8686611250565b935061016085013567ffffffffffffffff81111561149b57600080fd5b6114a787828801611324565b93505061018085013591506114bf6101a086016111f9565b905092959194509250565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b80516001600160a01b031682526020810151611584602084018263ffffffff169052565b50604081015161159c604084018263ffffffff169052565b5060608101516115b0606084018215159052565b5060808101516115c4608084018215159052565b5060a08101516115d860a084018215159052565b5060c08101516115f360c08401826001600160a01b03169052565b5060e081015160e083015261010080820151611619828501826001600160a01b03169052565b5050610120818101516001600160801b031690830152610140908101516bffffffffffffffffffffffff16910152565b6000815180845260005b8181101561166f57602081850181015186830182015201611653565b81811115611681576000602083870101525b50601f01601f19169290920160200192915050565b60006101806116a58386611560565b806101608401526116b881840185611649565b95945050505050565b6000602082840312156116d357600080fd5b81516111b281611175565b6020815260006111b26020830184611649565b61016081016117008284611560565b92915050565b6101c081016117158287611560565b6001600160a01b03948516610160830152929093166101808401526101a090920191909152919050565b6101c0810161174e8287611560565b6101608201949094526001600160a01b039290921661018083015263ffffffff166101a090910152919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220c7019503985bfab5dc59767683004e88508204ddcf1b14ced3ee1730048bf4ca64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeLoanByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256)": {
        "params": {
          "nftId": "The id of a specified NFT",
          "offer": "The details of the loan auction offer",
          "signature": "A signed offerHash"
        }
      },
      "executeLoanByLenderSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes)": {
        "params": {
          "offer": "The details of the loan auction offer",
          "signature": "A signed offerHash"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "refinanceByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256,uint32)": {
        "params": {
          "nftId": "The id of a specified NFT",
          "offer": "The details of the loan auction offer",
          "signature": "The signature for the offer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting storage."
      }
    },
    "title": "Implementation of the ILending interface",
    "version": 1
  },
  "userdoc": {
    "events": {
      "SigLendingXLendingContractAddressUpdated(address,address)": {
        "notice": "Emitted when the associated liquidity contract address is changed"
      }
    },
    "kind": "user",
    "methods": {
      "executeLoanByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256)": {
        "notice": "Start a loan as the borrower using a signed offer.         The caller of this method has to be the current owner of the NFT         Since offers can be floorTerm offers they might not include a specific nft id,         thus the caller has to pass an extra nft id to the method to identify the nft."
      },
      "executeLoanByLenderSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes)": {
        "notice": "Start a loan as the lender using a borrowers offer and signature.         Borrowers can make offers for loan terms on their NFTs and thus lenders can         execute these offers"
      },
      "initialize(address)": {
        "notice": "The initializer for the NiftyApes protocol.         Nifty Apes is intended to be deployed behind a proxy amd thus needs to initialize         its state outsize of a constructor."
      },
      "lendingContractAddress()": {
        "notice": "Returns the address for the associated liquidity contract"
      },
      "offersContractAddress()": {
        "notice": "Returns the address for the associated offers contract"
      },
      "pause()": {
        "notice": "Pauses all interactions with the contract.         This is intended to be used as an emergency measure to avoid loosing funds."
      },
      "refinanceByBorrowerSignature((address,uint32,uint32,bool,bool,bool,address,uint256,address,uint128,uint96),bytes,uint256,uint32)": {
        "notice": "Refinance a loan against an off chain signed offer as the borrower.         The new offer has to cover the principle remaining and all lender interest owed on the loan         Borrowers can refinance at any time even after loan default as long as their NFT collateral has not been seized"
      },
      "unpause()": {
        "notice": "Unpauses all interactions with the contract."
      },
      "updateLendingContractAddress(address)": {
        "notice": "Updates the associated liquidity contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1202,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 286,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 375,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 390,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 434,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8043,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "offersContractAddress",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 8046,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "lendingContractAddress",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 8051,
        "contract": "contracts/SigLending.sol:NiftyApesSigLending",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)500_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)500_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[500]",
        "numberOfBytes": "16000"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}